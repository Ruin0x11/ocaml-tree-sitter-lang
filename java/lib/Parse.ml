(* Generated by ocaml-tree-sitter. *)

(* Disable warnings against unused variables *)
[@@@warning "-26-27"]

open Tree_sitter_bindings
open Tree_sitter_run
open Tree_sitter_output_t
let get_loc x = Loc.({ start = x.start_pos; end_ = x.end_pos })

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_java"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let debug = ref false

let extras = [
  "comment";
]

let parse_input_tree input_tree : CST.program option =
  let root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let get_token x = Src_file.get_token src x.start_pos x.end_pos in

  if !debug then (
    Printf.printf "input from tree-sitter:\n";
    Tree_sitter_dump.to_stdout [root_node];
    flush stdout;
    Printf.printf "ocaml-tree-sitter trace:\n"
  );

  let get_token x =
    Src_file.get_token src x.start_pos x.end_pos in

  (* Parse a single node that has no children.
     We extract its location and source code (token). *)
  let _parse_leaf_rule type_ =
    Combine.parse_node (fun x ->
      if x.type_ = type_ then
        Some (get_loc x, get_token x)
      else
        None
    )
  in

  let cache_asterisk : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_asterisk : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_asterisk : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_asterisk
        (_parse_leaf_rule "asterisk") nodes
    )
  in
  let cache_comment : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_comment : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_comment : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_comment
        (_parse_leaf_rule "comment") nodes
    )
  in
  let cache_reserved_identifier : CST.reserved_identifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_reserved_identifier _parse_tail : (CST.reserved_identifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Rese_id_open nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "open")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Rese_id_open (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Rese_id_modu nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "module")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Rese_id_modu (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Rese_id_open nodes with
            | Some _ as res -> res
            | None ->
                _parse_Rese_id_modu nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_reserved_identifier : CST.reserved_identifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_reserved_identifier nodes
    )
  in
  let parse_node_reserved_identifier : CST.reserved_identifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_reserved_identifier (
        Combine.parse_rule "reserved_identifier" parse_children_reserved_identifier
      ) nodes
    )
  in
  let cache_floating_point_type : CST.floating_point_type Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_floating_point_type _parse_tail : (CST.floating_point_type * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Floa_point_type_float nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "float")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Floa_point_type_float (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Floa_point_type_doub nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "double")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Floa_point_type_doub (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Floa_point_type_float nodes with
            | Some _ as res -> res
            | None ->
                _parse_Floa_point_type_doub nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_floating_point_type : CST.floating_point_type Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_floating_point_type nodes
    )
  in
  let parse_node_floating_point_type : CST.floating_point_type Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_floating_point_type (
        Combine.parse_rule "floating_point_type" parse_children_floating_point_type
      ) nodes
    )
  in
  let cache_octal_integer_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_octal_integer_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_octal_integer_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_octal_integer_literal
        (_parse_leaf_rule "octal_integer_literal") nodes
    )
  in
  let cache_binary_integer_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_binary_integer_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_binary_integer_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_binary_integer_literal
        (_parse_leaf_rule "binary_integer_literal") nodes
    )
  in
  let cache_super : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_super : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_super : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_super
        (_parse_leaf_rule "super") nodes
    )
  in
  let cache_hex_integer_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_hex_integer_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_hex_integer_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_hex_integer_literal
        (_parse_leaf_rule "hex_integer_literal") nodes
    )
  in
  let cache_integral_type : CST.integral_type Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_integral_type _parse_tail : (CST.integral_type * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Inte_type_byte nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "byte")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Inte_type_byte (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Inte_type_short nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "short")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Inte_type_short (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Inte_type_int nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "int")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Inte_type_int (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Inte_type_long nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "long")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Inte_type_long (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Inte_type_char nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "char")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Inte_type_char (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Inte_type_byte nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Inte_type_short nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Inte_type_int nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Inte_type_long nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Inte_type_char nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_integral_type : CST.integral_type Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_integral_type nodes
    )
  in
  let parse_node_integral_type : CST.integral_type Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_integral_type (
        Combine.parse_rule "integral_type" parse_children_integral_type
      ) nodes
    )
  in
  let cache_decimal_floating_point_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_decimal_floating_point_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_decimal_floating_point_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_decimal_floating_point_literal
        (_parse_leaf_rule "decimal_floating_point_literal") nodes
    )
  in
  let cache_void_type : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_void_type : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_void_type : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_void_type
        (_parse_leaf_rule "void_type") nodes
    )
  in
  let cache_boolean_type : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_boolean_type : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_boolean_type : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_boolean_type
        (_parse_leaf_rule "boolean_type") nodes
    )
  in
  let cache_character_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_character_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_character_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_character_literal
        (_parse_leaf_rule "character_literal") nodes
    )
  in
  let cache_string_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_string_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_string_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_string_literal
        (_parse_leaf_rule "string_literal") nodes
    )
  in
  let cache_identifier : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_identifier : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_identifier : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_identifier
        (_parse_leaf_rule "identifier") nodes
    )
  in
  let cache_false_ : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_false_ : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_false_ : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_false_
        (_parse_leaf_rule "false") nodes
    )
  in
  let cache_null_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_null_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_null_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_null_literal
        (_parse_leaf_rule "null_literal") nodes
    )
  in
  let cache_hex_floating_point_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_hex_floating_point_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_hex_floating_point_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_hex_floating_point_literal
        (_parse_leaf_rule "hex_floating_point_literal") nodes
    )
  in
  let cache_true_ : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_true_ : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_true_ : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_true_
        (_parse_leaf_rule "true") nodes
    )
  in
  let cache_this : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_this : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_this : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_this
        (_parse_leaf_rule "this") nodes
    )
  in
  let cache_decimal_integer_literal : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_decimal_integer_literal : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_decimal_integer_literal : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_decimal_integer_literal
        (_parse_leaf_rule "decimal_integer_literal") nodes
    )
  in
  let cache_requires_modifier : CST.requires_modifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_requires_modifier _parse_tail : (CST.requires_modifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Requis_modi_tran nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "transitive")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Requis_modi_tran (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Requis_modi_stat nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "static")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Requis_modi_stat (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Requis_modi_tran nodes with
            | Some _ as res -> res
            | None ->
                _parse_Requis_modi_stat nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_requires_modifier : CST.requires_modifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_requires_modifier nodes
    )
  in
  let parse_node_requires_modifier : CST.requires_modifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_requires_modifier (
        Combine.parse_rule "requires_modifier" parse_children_requires_modifier
      ) nodes
    )
  in
  let cache_name : CST.name Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_scoped_identifier : CST.scoped_identifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let rec parse_inline_name _parse_tail : (CST.name * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Name_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Name_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Name_rese_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_reserved_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Name_rese_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Name_scop_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_scoped_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Name_scop_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Name_id nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Name_rese_id nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Name_scop_id nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_name : CST.name Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_name nodes
    )
  and parse_node_name : CST.name Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_name (
        Combine.parse_rule "name" parse_children_name
      ) nodes
    )
  and parse_inline_scoped_identifier _parse_tail : (CST.scoped_identifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_name)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule ".")
                    (Combine.parse_seq(parse_node_identifier)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_scoped_identifier : CST.scoped_identifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_scoped_identifier nodes
    )
  and parse_node_scoped_identifier : CST.scoped_identifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_scoped_identifier (
        Combine.parse_rule "scoped_identifier" parse_children_scoped_identifier
      ) nodes
    )
  in
  let cache_continue_statement : CST.continue_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_continue_statement _parse_tail : (CST.continue_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "continue")
                (
                  Combine.parse_optional
                    (parse_node_identifier)
                    (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_continue_statement : CST.continue_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_continue_statement nodes
    )
  in
  let parse_node_continue_statement : CST.continue_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_continue_statement (
        Combine.parse_rule "continue_statement" parse_children_continue_statement
      ) nodes
    )
  in
  let cache_inferred_parameters : CST.inferred_parameters Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_inferred_parameters _parse_tail : (CST.inferred_parameters * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_seq
                    (parse_node_identifier)
                    (
                      Combine.parse_repeat
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ",")
                            (parse_node_identifier)
                        )
                        (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_inferred_parameters : CST.inferred_parameters Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_inferred_parameters nodes
    )
  in
  let parse_node_inferred_parameters : CST.inferred_parameters Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_inferred_parameters (
        Combine.parse_rule "inferred_parameters" parse_children_inferred_parameters
      ) nodes
    )
  in
  let cache_break_statement : CST.break_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_break_statement _parse_tail : (CST.break_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "break")
                (
                  Combine.parse_optional
                    (parse_node_identifier)
                    (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_break_statement : CST.break_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_break_statement nodes
    )
  in
  let parse_node_break_statement : CST.break_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_break_statement (
        Combine.parse_rule "break_statement" parse_children_break_statement
      ) nodes
    )
  in
  let cache_literal : CST.literal Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_literal _parse_tail : (CST.literal * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Lit_deci_int_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_decimal_integer_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_deci_int_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_hex_int_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_hex_integer_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_hex_int_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_octal_int_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_octal_integer_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_octal_int_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_bin_int_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_binary_integer_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_bin_int_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_deci_floa_point_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_decimal_floating_point_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_deci_floa_point_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_hex_floa_point_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_hex_floating_point_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_hex_floa_point_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_true nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_true_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_true (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_false nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_false_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_false (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_char_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_character_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_char_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_str_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_string_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_str_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Lit_null_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_null_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lit_null_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Lit_deci_int_lit nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Lit_hex_int_lit nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Lit_octal_int_lit nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Lit_bin_int_lit nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Lit_deci_floa_point_lit nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Lit_hex_floa_point_lit nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Lit_true nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Lit_false nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Lit_char_lit nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_Lit_str_lit nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    _parse_Lit_null_lit nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_literal : CST.literal Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_literal nodes
    )
  in
  let parse_node_literal : CST.literal Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_literal (
        Combine.parse_rule "literal" parse_children_literal
      ) nodes
    )
  in
  let cache_module_directive : CST.module_directive Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_module_directive _parse_tail : (CST.module_directive * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (_parse_leaf_rule ";")
                (_parse_tail)
            in
            let _parse_Requis_rep_requis_modi_name nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "requires")
                      (
                        Combine.parse_repeat
                          (parse_node_requires_modifier)
                          (Combine.parse_seq(parse_node_name)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Requis_rep_requis_modi_name (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Expors_name_opt_to_opt_name_rep_COMMA_name nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "exports")
                      (
                        Combine.parse_seq
                          (parse_node_name)
                          (
                            Combine.parse_optional
                              (_parse_leaf_rule "to")
                              (
                                Combine.parse_optional
                                  (parse_node_name)
                                  (
                                    Combine.parse_repeat
                                      (Combine.parse_seq(_parse_leaf_rule ",")(parse_node_name))
                                      (_parse_tail)
                                  )
                              )
                          )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
                    Some ((`Expors_name_opt_to_opt_name_rep_COMMA_name (e0, e1, e2, e3, e4), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Opens_name_opt_to_opt_name_rep_COMMA_name nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "opens")
                      (
                        Combine.parse_seq
                          (parse_node_name)
                          (
                            Combine.parse_optional
                              (_parse_leaf_rule "to")
                              (
                                Combine.parse_optional
                                  (parse_node_name)
                                  (
                                    Combine.parse_repeat
                                      (Combine.parse_seq(_parse_leaf_rule ",")(parse_node_name))
                                      (_parse_tail)
                                  )
                              )
                          )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
                    Some ((`Opens_name_opt_to_opt_name_rep_COMMA_name (e0, e1, e2, e3, e4), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Uses_name nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "uses")
                      (Combine.parse_seq(parse_node_name)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Uses_name (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Provis_name_with_name_rep_COMMA_name nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "provides")
                      (
                        Combine.parse_seq
                          (parse_node_name)
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "with")
                              (
                                Combine.parse_seq
                                  (parse_node_name)
                                  (
                                    Combine.parse_repeat
                                      (Combine.parse_seq(_parse_leaf_rule ",")(parse_node_name))
                                      (_parse_tail)
                                  )
                              )
                          )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
                    Some ((`Provis_name_with_name_rep_COMMA_name (e0, e1, e2, e3, e4), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Requis_rep_requis_modi_name nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Expors_name_opt_to_opt_name_rep_COMMA_name nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Opens_name_opt_to_opt_name_rep_COMMA_name nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Uses_name nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Provis_name_with_name_rep_COMMA_name nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_module_directive : CST.module_directive Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_module_directive nodes
    )
  in
  let parse_node_module_directive : CST.module_directive Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_module_directive (
        Combine.parse_rule "module_directive" parse_children_module_directive
      ) nodes
    )
  in
  let cache_marker_annotation : CST.marker_annotation Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_marker_annotation _parse_tail : (CST.marker_annotation * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "@")
                (Combine.parse_seq(parse_node_name)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_marker_annotation : CST.marker_annotation Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_marker_annotation nodes
    )
  in
  let parse_node_marker_annotation : CST.marker_annotation Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_marker_annotation (
        Combine.parse_rule "marker_annotation" parse_children_marker_annotation
      ) nodes
    )
  in
  let cache_import_declaration : CST.import_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_import_declaration _parse_tail : (CST.import_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "import")
                (
                  Combine.parse_optional
                    (_parse_leaf_rule "static")
                    (
                      Combine.parse_seq
                        (parse_node_name)
                        (
                          Combine.parse_optional
                            (
                              Combine.parse_seq
                                (_parse_leaf_rule ".")
                                (parse_node_asterisk)
                            )
                            (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_import_declaration : CST.import_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_import_declaration nodes
    )
  in
  let parse_node_import_declaration : CST.import_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_import_declaration (
        Combine.parse_rule "import_declaration" parse_children_import_declaration
      ) nodes
    )
  in
  let cache_module_body : CST.module_body Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_module_body _parse_tail : (CST.module_body * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_repeat
                    (parse_node_module_directive)
                    (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_module_body : CST.module_body Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_module_body nodes
    )
  in
  let parse_node_module_body : CST.module_body Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_module_body (
        Combine.parse_rule "module_body" parse_children_module_body
      ) nodes
    )
  in
  let cache_expression : CST.expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_cast_expression : CST.cast_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_assignment_expression : CST.assignment_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_binary_expression : CST.binary_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_instanceof_expression : CST.instanceof_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_lambda_expression : CST.lambda_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_ternary_expression : CST.ternary_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_unary_expression : CST.unary_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_update_expression : CST.update_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_primary : CST.primary Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_array_creation_expression : CST.array_creation_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_dimensions_expr : CST.dimensions_expr Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_parenthesized_expression : CST.parenthesized_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_class_literal : CST.class_literal Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_object_creation_expression : CST.object_creation_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_unqualified_object_creation_expression : CST.unqualified_object_creation_expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_field_access : CST.field_access Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_array_access : CST.array_access Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_invocation : CST.method_invocation Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_argument_list : CST.argument_list Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_reference : CST.method_reference Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_type_arguments : CST.type_arguments Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_wildcard : CST.wildcard Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_wildcard_bounds : CST.wildcard_bounds Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_dimensions : CST.dimensions Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_statement : CST.statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_block : CST.block Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_expression_statement : CST.expression_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_labeled_statement : CST.labeled_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_assert_statement : CST.assert_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_switch_statement : CST.switch_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_switch_block : CST.switch_block Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_switch_label : CST.switch_label Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_do_statement : CST.do_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_return_statement : CST.return_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_synchronized_statement : CST.synchronized_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_throw_statement : CST.throw_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_try_statement : CST.try_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_catch_clause : CST.catch_clause Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_catch_formal_parameter : CST.catch_formal_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_catch_type : CST.catch_type Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_finally_clause : CST.finally_clause Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_try_with_resources_statement : CST.try_with_resources_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_resource_specification : CST.resource_specification Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_resource : CST.resource Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_if_statement : CST.if_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_while_statement : CST.while_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_for_statement : CST.for_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_enhanced_for_statement : CST.enhanced_for_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_annotation : CST.annotation Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_annotation_argument_list : CST.annotation_argument_list Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_element_value_pair : CST.element_value_pair Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_element_value : CST.element_value Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_element_value_array_initializer : CST.element_value_array_initializer Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_declaration : CST.declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_module_declaration : CST.module_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_package_declaration : CST.package_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_enum_declaration : CST.enum_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_enum_body : CST.enum_body Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_enum_body_declarations : CST.enum_body_declarations Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_enum_constant : CST.enum_constant Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_class_declaration : CST.class_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_modifiers : CST.modifiers Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_type_parameters : CST.type_parameters Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_type_parameter : CST.type_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_type_bound : CST.type_bound Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_superclass : CST.superclass Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_super_interfaces : CST.super_interfaces Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_interface_type_list : CST.interface_type_list Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_class_body : CST.class_body Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_class_body_declaration : CST.class_body_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_static_initializer : CST.static_initializer Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_constructor_declaration : CST.constructor_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_constructor_declarator : CST.constructor_declarator Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_constructor_body : CST.constructor_body Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_explicit_constructor_invocation : CST.explicit_constructor_invocation Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_field_declaration : CST.field_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_annotation_type_declaration : CST.annotation_type_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_annotation_type_body : CST.annotation_type_body Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_annotation_type_element_declaration : CST.annotation_type_element_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_default_value : CST.default_value Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_interface_declaration : CST.interface_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_extends_interfaces : CST.extends_interfaces Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_interface_body : CST.interface_body Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_constant_declaration : CST.constant_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_variable_declarator_list : CST.variable_declarator_list Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_variable_declarator : CST.variable_declarator Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_variable_declarator_id : CST.variable_declarator_id Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_variable_initializer : CST.variable_initializer Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_array_initializer : CST.array_initializer Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_type_ : CST.type_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_unannotated_type : CST.unannotated_type Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_simple_type : CST.simple_type Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_annotated_type : CST.annotated_type Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_scoped_type_identifier : CST.scoped_type_identifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_generic_type : CST.generic_type Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_array_type : CST.array_type Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_header : CST.method_header Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_declarator : CST.method_declarator Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_formal_parameters : CST.formal_parameters Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_formal_parameter : CST.formal_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_receiver_parameter : CST.receiver_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_spread_parameter : CST.spread_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_throws : CST.throws Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_local_variable_declaration : CST.local_variable_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_declaration : CST.method_declaration Combine.Memoize.t =
    Combine.Memoize.create () in
  let rec parse_inline_expression _parse_tail : (CST.expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Exp_assign_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_assignment_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_assign_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_bin_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_binary_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_bin_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_inst_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_instanceof_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_inst_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_lamb_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_lambda_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_lamb_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_tern_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_ternary_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_tern_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_upda_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_update_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_upda_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_prim nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_primary)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_prim (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_un_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_unary_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_un_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_cast_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_cast_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_cast_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Exp_assign_exp nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Exp_bin_exp nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Exp_inst_exp nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Exp_lamb_exp nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Exp_tern_exp nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Exp_upda_exp nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Exp_prim nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Exp_un_exp nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            _parse_Exp_cast_exp nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_expression : CST.expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_expression nodes
    )
  and parse_node_expression : CST.expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_expression (
        Combine.parse_rule "expression" parse_children_expression
      ) nodes
    )
  and parse_inline_cast_expression _parse_tail : (CST.cast_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_seq
                    (parse_node_type_)
                    (
                      Combine.parse_repeat
                        (Combine.parse_seq(_parse_leaf_rule "&")(parse_node_type_))
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ")")
                            (Combine.parse_seq(parse_node_expression)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_cast_expression : CST.cast_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_cast_expression nodes
    )
  and parse_node_cast_expression : CST.cast_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_cast_expression (
        Combine.parse_rule "cast_expression" parse_children_cast_expression
      ) nodes
    )
  and parse_inline_assignment_expression _parse_tail : (CST.assignment_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              (fun nodes ->
                let _parse_tail =
                  Combine.parse_seq
                    (parse_node_expression)
                    (_parse_tail)
                in
                let _parse_EQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`EQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_PLUSEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "+=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`PLUSEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_DASHEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "-=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`DASHEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_STAREQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "*=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`STAREQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_SLASHEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "/=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`SLASHEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_AMPEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "&=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`AMPEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_BAREQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "|=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`BAREQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_HATEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "^=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`HATEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_PERCEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "%=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`PERCEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_LTLTEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "<<=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`LTLTEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_GTGTEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule ">>=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`GTGTEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_GTGTGTEQ nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule ">>>=")
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`GTGTGTEQ (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                match _parse_EQ nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_PLUSEQ nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_DASHEQ nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_STAREQ nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_SLASHEQ nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_AMPEQ nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_BAREQ nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_HATEQ nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_PERCEQ nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_LTLTEQ nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        match _parse_GTGTEQ nodes with
                                                        | Some _ as res -> res
                                                        | None ->
                                                            _parse_GTGTGTEQ nodes
              )
            in
            let _parse_Id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Rese_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_reserved_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Rese_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Field_acce nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_field_access)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Field_acce (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Array_acce nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_array_access)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Array_acce (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Id nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Rese_id nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Field_acce nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_Array_acce nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_assignment_expression : CST.assignment_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_assignment_expression nodes
    )
  and parse_node_assignment_expression : CST.assignment_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_assignment_expression (
        Combine.parse_rule "assignment_expression" parse_children_assignment_expression
      ) nodes
    )
  and parse_inline_binary_expression _parse_tail : (CST.binary_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Bin_exp_exp_GT_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule ">")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_GT_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_LT_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "<")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_LT_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_EQEQ_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "==")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_EQEQ_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_GTEQ_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule ">=")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_GTEQ_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_LTEQ_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "<=")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_LTEQ_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_BANGEQ_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "!=")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_BANGEQ_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_AMPAMP_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "&&")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_AMPAMP_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_BARBAR_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "||")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_BARBAR_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_PLUS_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "+")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_PLUS_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_DASH_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "-")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_DASH_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_STAR_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "*")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_STAR_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_SLASH_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "/")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_SLASH_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_AMP_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "&")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_AMP_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_BAR_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "|")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_BAR_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_HAT_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "^")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_HAT_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_PERC_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "%")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_PERC_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_LTLT_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "<<")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_LTLT_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_GTGT_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule ">>")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_GTGT_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_exp_exp_GTGTGT_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule ">>>")
                          (Combine.parse_seq(parse_node_expression)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_exp_exp_GTGTGT_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Bin_exp_exp_GT_exp nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Bin_exp_exp_LT_exp nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Bin_exp_exp_EQEQ_exp nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Bin_exp_exp_GTEQ_exp nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Bin_exp_exp_LTEQ_exp nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Bin_exp_exp_BANGEQ_exp nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Bin_exp_exp_AMPAMP_exp nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Bin_exp_exp_BARBAR_exp nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Bin_exp_exp_PLUS_exp nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_Bin_exp_exp_DASH_exp nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_Bin_exp_exp_STAR_exp nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        match _parse_Bin_exp_exp_SLASH_exp nodes with
                                                        | Some _ as res -> res
                                                        | None ->
                                                            match _parse_Bin_exp_exp_AMP_exp nodes with
                                                            | Some _ as res -> res
                                                            | None ->
                                                                match _parse_Bin_exp_exp_BAR_exp nodes with
                                                                | Some _ as res -> res
                                                                | None ->
                                                                    match _parse_Bin_exp_exp_HAT_exp nodes with
                                                                    | Some _ as res -> res
                                                                    | None ->
                                                                        match _parse_Bin_exp_exp_PERC_exp nodes with
                                                                        | Some _ as res -> res
                                                                        | None ->
                                                                            match _parse_Bin_exp_exp_LTLT_exp nodes with
                                                                            | Some _ as res -> res
                                                                            | None ->
                                                                                match _parse_Bin_exp_exp_GTGT_exp nodes with
                                                                                | Some _ as res -> res
                                                                                | None ->
                                                                                    _parse_Bin_exp_exp_GTGTGT_exp nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_binary_expression : CST.binary_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_binary_expression nodes
    )
  and parse_node_binary_expression : CST.binary_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_binary_expression (
        Combine.parse_rule "binary_expression" parse_children_binary_expression
      ) nodes
    )
  and parse_inline_instanceof_expression _parse_tail : (CST.instanceof_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_expression)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "instanceof")
                    (Combine.parse_seq(parse_node_type_)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_instanceof_expression : CST.instanceof_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_instanceof_expression nodes
    )
  and parse_node_instanceof_expression : CST.instanceof_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_instanceof_expression (
        Combine.parse_rule "instanceof_expression" parse_children_instanceof_expression
      ) nodes
    )
  and parse_inline_lambda_expression _parse_tail : (CST.lambda_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (_parse_leaf_rule "->")
                (
                  (fun nodes ->
                    let _parse_tail =
                      _parse_tail
                    in
                    let _parse_Exp nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_expression)
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Exp (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Blk nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_block)
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Blk (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Exp nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_Blk nodes
                  )
                )
            in
            let _parse_Id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Form_params nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_formal_parameters)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Form_params (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Infe_params nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_inferred_parameters)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Infe_params (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Id nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Form_params nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Infe_params nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_lambda_expression : CST.lambda_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_lambda_expression nodes
    )
  and parse_node_lambda_expression : CST.lambda_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_lambda_expression (
        Combine.parse_rule "lambda_expression" parse_children_lambda_expression
      ) nodes
    )
  and parse_inline_ternary_expression _parse_tail : (CST.ternary_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_expression)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "?")
                    (
                      Combine.parse_seq
                        (parse_node_expression)
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ":")
                            (Combine.parse_seq(parse_node_expression)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_ternary_expression : CST.ternary_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_ternary_expression nodes
    )
  and parse_node_ternary_expression : CST.ternary_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_ternary_expression (
        Combine.parse_rule "ternary_expression" parse_children_ternary_expression
      ) nodes
    )
  and parse_inline_unary_expression _parse_tail : (CST.unary_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Un_exp_PLUS_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "+")
                      (Combine.parse_seq(parse_node_expression)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Un_exp_PLUS_exp (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Un_exp_DASH_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "-")
                      (Combine.parse_seq(parse_node_expression)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Un_exp_DASH_exp (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Un_exp_BANG_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "!")
                      (Combine.parse_seq(parse_node_expression)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Un_exp_BANG_exp (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Un_exp_TILDE_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "~")
                      (Combine.parse_seq(parse_node_expression)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Un_exp_TILDE_exp (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Un_exp_PLUS_exp nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Un_exp_DASH_exp nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Un_exp_BANG_exp nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_Un_exp_TILDE_exp nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_unary_expression : CST.unary_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_unary_expression nodes
    )
  and parse_node_unary_expression : CST.unary_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_unary_expression (
        Combine.parse_rule "unary_expression" parse_children_unary_expression
      ) nodes
    )
  and parse_inline_update_expression _parse_tail : (CST.update_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Exp_PLUSPLUS nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (Combine.parse_seq(_parse_leaf_rule "++")(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Exp_PLUSPLUS (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_DASHDASH nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (Combine.parse_seq(_parse_leaf_rule "--")(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Exp_DASHDASH (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_PLUSPLUS_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "++")
                      (Combine.parse_seq(parse_node_expression)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`PLUSPLUS_exp (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_DASHDASH_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "--")
                      (Combine.parse_seq(parse_node_expression)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`DASHDASH_exp (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Exp_PLUSPLUS nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Exp_DASHDASH nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_PLUSPLUS_exp nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_DASHDASH_exp nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_update_expression : CST.update_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_update_expression nodes
    )
  and parse_node_update_expression : CST.update_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_update_expression (
        Combine.parse_rule "update_expression" parse_children_update_expression
      ) nodes
    )
  and parse_inline_primary _parse_tail : (CST.primary * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Prim_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_class_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_class_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_class_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_this nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_this)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_this (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_rese_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_reserved_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_rese_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_paren_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_parenthesized_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_paren_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_obj_crea_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_object_creation_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_obj_crea_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_field_acce nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_field_access)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_field_acce (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_array_acce nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_array_access)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_array_acce (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_meth_invo nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_method_invocation)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_meth_invo (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_meth_ref nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_method_reference)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_meth_ref (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_array_crea_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_array_creation_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_array_crea_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Prim_lit nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Prim_class_lit nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Prim_this nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Prim_id nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Prim_rese_id nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Prim_paren_exp nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Prim_obj_crea_exp nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Prim_field_acce nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Prim_array_acce nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_Prim_meth_invo nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_Prim_meth_ref nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        _parse_Prim_array_crea_exp nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_primary : CST.primary Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_primary nodes
    )
  and parse_node_primary : CST.primary Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_primary (
        Combine.parse_rule "primary" parse_children_primary
      ) nodes
    )
  and parse_inline_array_creation_expression _parse_tail : (CST.array_creation_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "new")
                (
                  Combine.parse_seq
                    (parse_node_simple_type)
                    (
                      (fun nodes ->
                        let _parse_tail =
                          _parse_tail
                        in
                        let _parse_Rep1_dimens_expr_opt_dimens nodes =
                          (
                            match
                              (
                                Combine.parse_repeat1
                                  (parse_node_dimensions_expr)
                                  (Combine.parse_optional(parse_node_dimensions)(_parse_tail))
                              ) nodes
                            with
                            | Some ((e0, (e1, tail)), nodes) ->
                                Some ((`Rep1_dimens_expr_opt_dimens (e0, e1), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Dimens_array_init nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_dimensions)
                                  (
                                    Combine.parse_seq
                                      (parse_node_array_initializer)
                                      (_parse_tail)
                                  )
                              ) nodes
                            with
                            | Some ((e0, (e1, tail)), nodes) ->
                                Some ((`Dimens_array_init (e0, e1), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Rep1_dimens_expr_opt_dimens nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Dimens_array_init nodes
                      )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_array_creation_expression : CST.array_creation_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_array_creation_expression nodes
    )
  and parse_node_array_creation_expression : CST.array_creation_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_array_creation_expression (
        Combine.parse_rule "array_creation_expression" parse_children_array_creation_expression
      ) nodes
    )
  and parse_inline_dimensions_expr _parse_tail : (CST.dimensions_expr * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat
                (parse_node_annotation)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "[")
                    (
                      Combine.parse_seq
                        (parse_node_expression)
                        (Combine.parse_seq(_parse_leaf_rule "]")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_dimensions_expr : CST.dimensions_expr Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_dimensions_expr nodes
    )
  and parse_node_dimensions_expr : CST.dimensions_expr Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_dimensions_expr (
        Combine.parse_rule "dimensions_expr" parse_children_dimensions_expr
      ) nodes
    )
  and parse_inline_parenthesized_expression _parse_tail : (CST.parenthesized_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_seq
                    (parse_node_expression)
                    (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_parenthesized_expression : CST.parenthesized_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_parenthesized_expression nodes
    )
  and parse_node_parenthesized_expression : CST.parenthesized_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_parenthesized_expression (
        Combine.parse_rule "parenthesized_expression" parse_children_parenthesized_expression
      ) nodes
    )
  and parse_inline_class_literal _parse_tail : (CST.class_literal * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_unannotated_type)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule ".")
                    (Combine.parse_seq(_parse_leaf_rule "class")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_class_literal : CST.class_literal Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_class_literal nodes
    )
  and parse_node_class_literal : CST.class_literal Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_class_literal (
        Combine.parse_rule "class_literal" parse_children_class_literal
      ) nodes
    )
  and parse_inline_object_creation_expression _parse_tail : (CST.object_creation_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Obj_crea_exp_unqu_obj_crea_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_unqualified_object_creation_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Obj_crea_exp_unqu_obj_crea_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Obj_crea_exp_prim_DOT_unqu_obj_crea_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_primary)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule ".")
                          (
                            Combine.parse_seq
                              (parse_node_unqualified_object_creation_expression)
                              (_parse_tail)
                          )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Obj_crea_exp_prim_DOT_unqu_obj_crea_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Obj_crea_exp_unqu_obj_crea_exp nodes with
            | Some _ as res -> res
            | None ->
                _parse_Obj_crea_exp_prim_DOT_unqu_obj_crea_exp nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_object_creation_expression : CST.object_creation_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_object_creation_expression nodes
    )
  and parse_node_object_creation_expression : CST.object_creation_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_object_creation_expression (
        Combine.parse_rule "object_creation_expression" parse_children_object_creation_expression
      ) nodes
    )
  and parse_inline_unqualified_object_creation_expression _parse_tail : (CST.unqualified_object_creation_expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "new")
                (
                  Combine.parse_optional
                    (parse_node_type_arguments)
                    (
                      Combine.parse_seq
                        (parse_node_simple_type)
                        (
                          Combine.parse_seq
                            (parse_node_argument_list)
                            (Combine.parse_optional(parse_node_class_body)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_unqualified_object_creation_expression : CST.unqualified_object_creation_expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_unqualified_object_creation_expression nodes
    )
  and parse_node_unqualified_object_creation_expression : CST.unqualified_object_creation_expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_unqualified_object_creation_expression (
        Combine.parse_rule "unqualified_object_creation_expression" parse_children_unqualified_object_creation_expression
      ) nodes
    )
  and parse_inline_field_access _parse_tail : (CST.field_access * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_optional
                (Combine.parse_seq(_parse_leaf_rule ".")(parse_node_super))
                (
                  Combine.parse_seq
                    (_parse_leaf_rule ".")
                    (
                      (fun nodes ->
                        let _parse_tail =
                          _parse_tail
                        in
                        let _parse_Id nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_identifier)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Id (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Rese_id nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_reserved_identifier)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Rese_id (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_This nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_this)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`This (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Id nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Rese_id nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_This nodes
                      )
                    )
                )
            in
            let _parse_Prim nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_primary)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Super nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_super)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Super (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Prim nodes with
            | Some _ as res -> res
            | None ->
                _parse_Super nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_field_access : CST.field_access Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_field_access nodes
    )
  and parse_node_field_access : CST.field_access Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_field_access (
        Combine.parse_rule "field_access" parse_children_field_access
      ) nodes
    )
  and parse_inline_array_access _parse_tail : (CST.array_access * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_primary)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "[")
                    (
                      Combine.parse_seq
                        (parse_node_expression)
                        (Combine.parse_seq(_parse_leaf_rule "]")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_array_access : CST.array_access Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_array_access nodes
    )
  and parse_node_array_access : CST.array_access Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_array_access (
        Combine.parse_rule "array_access" parse_children_array_access
      ) nodes
    )
  and parse_inline_method_invocation _parse_tail : (CST.method_invocation * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (parse_node_argument_list)
                (_parse_tail)
            in
            let _parse_Choice_id nodes =
              (
                match
                  let _parse_tail =
                    _parse_tail
                  in
                  let _parse_Id nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_identifier)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Id (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Rese_id nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_reserved_identifier)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Rese_id (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Id nodes with
                  | Some _ as res -> res
                  | None ->
                      _parse_Rese_id nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Choice_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Choice_prim_DOT_opt_super_DOT_opt_type_args_choice_id nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (_parse_leaf_rule ".")
                      (
                        Combine.parse_optional
                          (Combine.parse_seq(parse_node_super)(_parse_leaf_rule "."))
                          (
                            Combine.parse_optional
                              (parse_node_type_arguments)
                              (
                                (fun nodes ->
                                  let _parse_tail =
                                    _parse_tail
                                  in
                                  let _parse_Id nodes =
                                    (
                                      match
                                        (
                                          Combine.parse_seq
                                            (parse_node_identifier)
                                            (_parse_tail)
                                        ) nodes
                                      with
                                      | Some ((e0, tail), nodes) ->
                                          Some ((`Id (e0), tail), nodes)
                                      | None ->
                                          None
                                    )
                                  in
                                  let _parse_Rese_id nodes =
                                    (
                                      match
                                        (
                                          Combine.parse_seq
                                            (parse_node_reserved_identifier)
                                            (_parse_tail)
                                        ) nodes
                                      with
                                      | Some ((e0, tail), nodes) ->
                                          Some ((`Rese_id (e0), tail), nodes)
                                      | None ->
                                          None
                                    )
                                  in
                                  match _parse_Id nodes with
                                  | Some _ as res -> res
                                  | None ->
                                      _parse_Rese_id nodes
                                )
                              )
                          )
                      )
                  in
                  let _parse_Prim nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_primary)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Prim (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Super nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_super)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Super (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Prim nodes with
                  | Some _ as res -> res
                  | None ->
                      _parse_Super nodes
                with
                | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
                    Some ((`Choice_prim_DOT_opt_super_DOT_opt_type_args_choice_id (e0, e1, e2, e3, e4), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Choice_id nodes with
            | Some _ as res -> res
            | None ->
                _parse_Choice_prim_DOT_opt_super_DOT_opt_type_args_choice_id nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_invocation : CST.method_invocation Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_invocation nodes
    )
  and parse_node_method_invocation : CST.method_invocation Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_invocation (
        Combine.parse_rule "method_invocation" parse_children_method_invocation
      ) nodes
    )
  and parse_inline_argument_list _parse_tail : (CST.argument_list * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            (
                              Combine.parse_seq
                                (parse_node_expression)
                                (
                                  Combine.parse_repeat
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ",")
                                        (parse_node_expression)
                                    )
                                    (Combine.parse_success)
                                )
                            ) nodes
                          with
                          | Some ((e0, (e1, tail)), nodes) ->
                              Some ((e0, e1), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_argument_list : CST.argument_list Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_argument_list nodes
    )
  and parse_node_argument_list : CST.argument_list Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_argument_list (
        Combine.parse_rule "argument_list" parse_children_argument_list
      ) nodes
    )
  and parse_inline_method_reference _parse_tail : (CST.method_reference * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (_parse_leaf_rule "::")
                (
                  Combine.parse_optional
                    (parse_node_type_arguments)
                    (
                      (fun nodes ->
                        let _parse_tail =
                          _parse_tail
                        in
                        let _parse_New nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (_parse_leaf_rule "new")
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`New (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Id nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_identifier)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Id (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_New nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Id nodes
                      )
                    )
                )
            in
            let _parse_Type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_type_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_primary)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Super nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_super)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Super (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Type nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Prim nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Super nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_reference : CST.method_reference Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_reference nodes
    )
  and parse_node_method_reference : CST.method_reference Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_reference (
        Combine.parse_rule "method_reference" parse_children_method_reference
      ) nodes
    )
  and parse_inline_type_arguments _parse_tail : (CST.type_arguments * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "<")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            let _parse_tail =
                              Combine.parse_repeat
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule ",")
                                    (
                                      (fun nodes ->
                                        let _parse_Type nodes =
                                          (
                                            match
                                              (
                                                parse_node_type_
                                              ) nodes
                                            with
                                            | Some (e0, nodes) ->
                                                Some (`Type (e0), nodes)
                                            | None ->
                                                None
                                          )
                                        in
                                        let _parse_Wild nodes =
                                          (
                                            match
                                              (
                                                parse_node_wildcard
                                              ) nodes
                                            with
                                            | Some (e0, nodes) ->
                                                Some (`Wild (e0), nodes)
                                            | None ->
                                                None
                                          )
                                        in
                                        match _parse_Type nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            _parse_Wild nodes
                                      )
                                    )
                                )
                                (Combine.parse_success)
                            in
                            let _parse_Type nodes =
                              (
                                match
                                  (
                                    Combine.parse_seq
                                      (parse_node_type_)
                                      (_parse_tail)
                                  ) nodes
                                with
                                | Some ((e0, tail), nodes) ->
                                    Some ((`Type (e0), tail), nodes)
                                | None ->
                                    None
                              )
                            in
                            let _parse_Wild nodes =
                              (
                                match
                                  (
                                    Combine.parse_seq
                                      (parse_node_wildcard)
                                      (_parse_tail)
                                  ) nodes
                                with
                                | Some ((e0, tail), nodes) ->
                                    Some ((`Wild (e0), tail), nodes)
                                | None ->
                                    None
                              )
                            in
                            match _parse_Type nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_Wild nodes
                          with
                          | Some ((e0, (e1, tail)), nodes) ->
                              Some ((e0, e1), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (Combine.parse_seq(_parse_leaf_rule ">")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_type_arguments : CST.type_arguments Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_type_arguments nodes
    )
  and parse_node_type_arguments : CST.type_arguments Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_type_arguments (
        Combine.parse_rule "type_arguments" parse_children_type_arguments
      ) nodes
    )
  and parse_inline_wildcard _parse_tail : (CST.wildcard * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat
                (parse_node_annotation)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "?")
                    (
                      Combine.parse_optional
                        (parse_node_wildcard_bounds)
                        (_parse_tail)
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_wildcard : CST.wildcard Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_wildcard nodes
    )
  and parse_node_wildcard : CST.wildcard Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_wildcard (
        Combine.parse_rule "wildcard" parse_children_wildcard
      ) nodes
    )
  and parse_inline_wildcard_bounds _parse_tail : (CST.wildcard_bounds * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Wild_bounds_extens_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "extends")
                      (Combine.parse_seq(parse_node_type_)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Wild_bounds_extens_type (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Wild_bounds_super_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_super)
                      (Combine.parse_seq(parse_node_type_)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Wild_bounds_super_type (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Wild_bounds_extens_type nodes with
            | Some _ as res -> res
            | None ->
                _parse_Wild_bounds_super_type nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_wildcard_bounds : CST.wildcard_bounds Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_wildcard_bounds nodes
    )
  and parse_node_wildcard_bounds : CST.wildcard_bounds Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_wildcard_bounds (
        Combine.parse_rule "wildcard_bounds" parse_children_wildcard_bounds
      ) nodes
    )
  and parse_inline_dimensions _parse_tail : (CST.dimensions * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat1
                (
                  (fun nodes ->
                    (
                      match
                        (
                          Combine.parse_repeat
                            (parse_node_annotation)
                            (
                              Combine.parse_seq
                                (_parse_leaf_rule "[")
                                (_parse_leaf_rule "]")
                            )
                        ) nodes
                      with
                      | Some ((e0, (e1, e2)), nodes) ->
                          Some ((e0, e1, e2), nodes)
                      | None ->
                          None
                    )
                  )
                )
                (_parse_tail)
            ) nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_dimensions : CST.dimensions Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_dimensions nodes
    )
  and parse_node_dimensions : CST.dimensions Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_dimensions (
        Combine.parse_rule "dimensions" parse_children_dimensions
      ) nodes
    )
  and parse_inline_statement _parse_tail : (CST.statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Stmt_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_exp_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_exp_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_labe_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_labeled_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_labe_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_if_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_if_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_if_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_while_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_while_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_while_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_for_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_for_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_for_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_enha_for_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_enhanced_for_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_enha_for_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_blk nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_block)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_blk (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_SEMI nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule ";")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_SEMI (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_asse_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_assert_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_asse_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_swit_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_switch_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_swit_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_do_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_do_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_do_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_brk_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_break_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_brk_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_cont_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_continue_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_cont_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_ret_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_return_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_ret_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_sync_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_synchronized_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_sync_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_local_var_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_local_variable_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_local_var_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_throw_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_throw_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_throw_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_try_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_try_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_try_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_try_with_resous_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_try_with_resources_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_try_with_resous_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Stmt_decl nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Stmt_exp_stmt nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Stmt_labe_stmt nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Stmt_if_stmt nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Stmt_while_stmt nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Stmt_for_stmt nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Stmt_enha_for_stmt nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Stmt_blk nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Stmt_SEMI nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_Stmt_asse_stmt nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_Stmt_swit_stmt nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        match _parse_Stmt_do_stmt nodes with
                                                        | Some _ as res -> res
                                                        | None ->
                                                            match _parse_Stmt_brk_stmt nodes with
                                                            | Some _ as res -> res
                                                            | None ->
                                                                match _parse_Stmt_cont_stmt nodes with
                                                                | Some _ as res -> res
                                                                | None ->
                                                                    match _parse_Stmt_ret_stmt nodes with
                                                                    | Some _ as res -> res
                                                                    | None ->
                                                                        match _parse_Stmt_sync_stmt nodes with
                                                                        | Some _ as res -> res
                                                                        | None ->
                                                                            match _parse_Stmt_local_var_decl nodes with
                                                                            | Some _ as res -> res
                                                                            | None ->
                                                                                match _parse_Stmt_throw_stmt nodes with
                                                                                | Some _ as res -> res
                                                                                | None ->
                                                                                    match _parse_Stmt_try_stmt nodes with
                                                                                    | Some _ as res -> res
                                                                                    | None ->
                                                                                        _parse_Stmt_try_with_resous_stmt nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_statement : CST.statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_statement nodes
    )
  and parse_node_statement : CST.statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_statement (
        Combine.parse_rule "statement" parse_children_statement
      ) nodes
    )
  and parse_inline_block _parse_tail : (CST.block * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_repeat
                    (parse_node_statement)
                    (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_block : CST.block Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_block nodes
    )
  and parse_node_block : CST.block Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_block (
        Combine.parse_rule "block" parse_children_block
      ) nodes
    )
  and parse_inline_expression_statement _parse_tail : (CST.expression_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_expression)
                (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_expression_statement : CST.expression_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_expression_statement nodes
    )
  and parse_node_expression_statement : CST.expression_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_expression_statement (
        Combine.parse_rule "expression_statement" parse_children_expression_statement
      ) nodes
    )
  and parse_inline_labeled_statement _parse_tail : (CST.labeled_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_identifier)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule ":")
                    (Combine.parse_seq(parse_node_statement)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_labeled_statement : CST.labeled_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_labeled_statement nodes
    )
  and parse_node_labeled_statement : CST.labeled_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_labeled_statement (
        Combine.parse_rule "labeled_statement" parse_children_labeled_statement
      ) nodes
    )
  and parse_inline_assert_statement _parse_tail : (CST.assert_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Asse_stmt_asse_exp_SEMI nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "assert")
                      (
                        Combine.parse_seq
                          (parse_node_expression)
                          (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Asse_stmt_asse_exp_SEMI (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Asse_stmt_asse_exp_COLON_exp_SEMI nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "assert")
                      (
                        Combine.parse_seq
                          (parse_node_expression)
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule ":")
                              (
                                Combine.parse_seq
                                  (parse_node_expression)
                                  (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                              )
                          )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
                    Some ((`Asse_stmt_asse_exp_COLON_exp_SEMI (e0, e1, e2, e3, e4), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Asse_stmt_asse_exp_SEMI nodes with
            | Some _ as res -> res
            | None ->
                _parse_Asse_stmt_asse_exp_COLON_exp_SEMI nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_assert_statement : CST.assert_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_assert_statement nodes
    )
  and parse_node_assert_statement : CST.assert_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_assert_statement (
        Combine.parse_rule "assert_statement" parse_children_assert_statement
      ) nodes
    )
  and parse_inline_switch_statement _parse_tail : (CST.switch_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "switch")
                (
                  Combine.parse_seq
                    (parse_node_parenthesized_expression)
                    (Combine.parse_seq(parse_node_switch_block)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_switch_statement : CST.switch_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_switch_statement nodes
    )
  and parse_node_switch_statement : CST.switch_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_switch_statement (
        Combine.parse_rule "switch_statement" parse_children_switch_statement
      ) nodes
    )
  and parse_inline_switch_block _parse_tail : (CST.switch_block * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_repeat
                    (
                      (fun nodes ->
                        let _parse_Swit_label nodes =
                          (
                            match
                              (
                                parse_node_switch_label
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Swit_label (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Stmt nodes =
                          (
                            match
                              (
                                parse_node_statement
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Stmt (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Swit_label nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Stmt nodes
                      )
                    )
                    (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_switch_block : CST.switch_block Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_switch_block nodes
    )
  and parse_node_switch_block : CST.switch_block Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_switch_block (
        Combine.parse_rule "switch_block" parse_children_switch_block
      ) nodes
    )
  and parse_inline_switch_label _parse_tail : (CST.switch_label * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Swit_label_case_exp_COLON nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "case")
                      (
                        Combine.parse_seq
                          (parse_node_expression)
                          (Combine.parse_seq(_parse_leaf_rule ":")(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Swit_label_case_exp_COLON (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Swit_label_defa_COLON nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "default")
                      (Combine.parse_seq(_parse_leaf_rule ":")(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Swit_label_defa_COLON (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Swit_label_case_exp_COLON nodes with
            | Some _ as res -> res
            | None ->
                _parse_Swit_label_defa_COLON nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_switch_label : CST.switch_label Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_switch_label nodes
    )
  and parse_node_switch_label : CST.switch_label Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_switch_label (
        Combine.parse_rule "switch_label" parse_children_switch_label
      ) nodes
    )
  and parse_inline_do_statement _parse_tail : (CST.do_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "do")
                (
                  Combine.parse_seq
                    (parse_node_statement)
                    (
                      Combine.parse_seq
                        (_parse_leaf_rule "while")
                        (
                          Combine.parse_seq
                            (parse_node_parenthesized_expression)
                            (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_do_statement : CST.do_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_do_statement nodes
    )
  and parse_node_do_statement : CST.do_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_do_statement (
        Combine.parse_rule "do_statement" parse_children_do_statement
      ) nodes
    )
  and parse_inline_return_statement _parse_tail : (CST.return_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "return")
                (
                  Combine.parse_optional
                    (parse_node_expression)
                    (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_return_statement : CST.return_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_return_statement nodes
    )
  and parse_node_return_statement : CST.return_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_return_statement (
        Combine.parse_rule "return_statement" parse_children_return_statement
      ) nodes
    )
  and parse_inline_synchronized_statement _parse_tail : (CST.synchronized_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "synchronized")
                (
                  Combine.parse_seq
                    (parse_node_parenthesized_expression)
                    (Combine.parse_seq(parse_node_block)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_synchronized_statement : CST.synchronized_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_synchronized_statement nodes
    )
  and parse_node_synchronized_statement : CST.synchronized_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_synchronized_statement (
        Combine.parse_rule "synchronized_statement" parse_children_synchronized_statement
      ) nodes
    )
  and parse_inline_throw_statement _parse_tail : (CST.throw_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "throw")
                (
                  Combine.parse_seq
                    (parse_node_expression)
                    (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_throw_statement : CST.throw_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_throw_statement nodes
    )
  and parse_node_throw_statement : CST.throw_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_throw_statement (
        Combine.parse_rule "throw_statement" parse_children_throw_statement
      ) nodes
    )
  and parse_inline_try_statement _parse_tail : (CST.try_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "try")
                (
                  Combine.parse_seq
                    (parse_node_block)
                    (
                      (fun nodes ->
                        let _parse_tail =
                          _parse_tail
                        in
                        let _parse_Rep1_catch_clau nodes =
                          (
                            match
                              (
                                Combine.parse_repeat1
                                  (parse_node_catch_clause)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Rep1_catch_clau (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Rep_catch_clau_fina_clau nodes =
                          (
                            match
                              (
                                Combine.parse_repeat
                                  (parse_node_catch_clause)
                                  (Combine.parse_seq(parse_node_finally_clause)(_parse_tail))
                              ) nodes
                            with
                            | Some ((e0, (e1, tail)), nodes) ->
                                Some ((`Rep_catch_clau_fina_clau (e0, e1), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Rep1_catch_clau nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Rep_catch_clau_fina_clau nodes
                      )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_try_statement : CST.try_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_try_statement nodes
    )
  and parse_node_try_statement : CST.try_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_try_statement (
        Combine.parse_rule "try_statement" parse_children_try_statement
      ) nodes
    )
  and parse_inline_catch_clause _parse_tail : (CST.catch_clause * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "catch")
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "(")
                    (
                      Combine.parse_seq
                        (parse_node_catch_formal_parameter)
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ")")
                            (Combine.parse_seq(parse_node_block)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_catch_clause : CST.catch_clause Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_catch_clause nodes
    )
  and parse_node_catch_clause : CST.catch_clause Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_catch_clause (
        Combine.parse_rule "catch_clause" parse_children_catch_clause
      ) nodes
    )
  and parse_inline_catch_formal_parameter _parse_tail : (CST.catch_formal_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_catch_type)
                    (
                      Combine.parse_seq
                        (parse_node_variable_declarator_id)
                        (_parse_tail)
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_catch_formal_parameter : CST.catch_formal_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_catch_formal_parameter nodes
    )
  and parse_node_catch_formal_parameter : CST.catch_formal_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_catch_formal_parameter (
        Combine.parse_rule "catch_formal_parameter" parse_children_catch_formal_parameter
      ) nodes
    )
  and parse_inline_catch_type _parse_tail : (CST.catch_type * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_unannotated_type)
                (
                  Combine.parse_repeat
                    (
                      Combine.parse_seq
                        (_parse_leaf_rule "|")
                        (parse_node_unannotated_type)
                    )
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_catch_type : CST.catch_type Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_catch_type nodes
    )
  and parse_node_catch_type : CST.catch_type Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_catch_type (
        Combine.parse_rule "catch_type" parse_children_catch_type
      ) nodes
    )
  and parse_inline_finally_clause _parse_tail : (CST.finally_clause * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "finally")
                (Combine.parse_seq(parse_node_block)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_finally_clause : CST.finally_clause Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_finally_clause nodes
    )
  and parse_node_finally_clause : CST.finally_clause Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_finally_clause (
        Combine.parse_rule "finally_clause" parse_children_finally_clause
      ) nodes
    )
  and parse_inline_try_with_resources_statement _parse_tail : (CST.try_with_resources_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "try")
                (
                  Combine.parse_seq
                    (parse_node_resource_specification)
                    (
                      Combine.parse_seq
                        (parse_node_block)
                        (
                          Combine.parse_repeat
                            (parse_node_catch_clause)
                            (
                              Combine.parse_optional
                                (parse_node_finally_clause)
                                (_parse_tail)
                            )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_try_with_resources_statement : CST.try_with_resources_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_try_with_resources_statement nodes
    )
  and parse_node_try_with_resources_statement : CST.try_with_resources_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_try_with_resources_statement (
        Combine.parse_rule "try_with_resources_statement" parse_children_try_with_resources_statement
      ) nodes
    )
  and parse_inline_resource_specification _parse_tail : (CST.resource_specification * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_seq
                    (parse_node_resource)
                    (
                      Combine.parse_repeat
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ";")
                            (parse_node_resource)
                        )
                        (
                          Combine.parse_optional
                            (_parse_leaf_rule ";")
                            (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_resource_specification : CST.resource_specification Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_resource_specification nodes
    )
  and parse_node_resource_specification : CST.resource_specification Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_resource_specification (
        Combine.parse_rule "resource_specification" parse_children_resource_specification
      ) nodes
    )
  and parse_inline_resource _parse_tail : (CST.resource * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Reso_opt_modifs_unan_type_var_decl_id_EQ_exp nodes =
              (
                match
                  (
                    Combine.parse_optional
                      (parse_node_modifiers)
                      (
                        Combine.parse_seq
                          (parse_node_unannotated_type)
                          (
                            Combine.parse_seq
                              (parse_node_variable_declarator_id)
                              (
                                Combine.parse_seq
                                  (_parse_leaf_rule "=")
                                  (Combine.parse_seq(parse_node_expression)(_parse_tail))
                              )
                          )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
                    Some ((`Reso_opt_modifs_unan_type_var_decl_id_EQ_exp (e0, e1, e2, e3, e4), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Reso_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Reso_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Reso_field_acce nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_field_access)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Reso_field_acce (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Reso_opt_modifs_unan_type_var_decl_id_EQ_exp nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Reso_id nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Reso_field_acce nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_resource : CST.resource Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_resource nodes
    )
  and parse_node_resource : CST.resource Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_resource (
        Combine.parse_rule "resource" parse_children_resource
      ) nodes
    )
  and parse_inline_if_statement _parse_tail : (CST.if_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "if")
                (
                  Combine.parse_seq
                    (parse_node_parenthesized_expression)
                    (
                      Combine.parse_seq
                        (parse_node_statement)
                        (
                          Combine.parse_optional
                            (
                              Combine.parse_seq
                                (_parse_leaf_rule "else")
                                (parse_node_statement)
                            )
                            (_parse_tail)
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_if_statement : CST.if_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_if_statement nodes
    )
  and parse_node_if_statement : CST.if_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_if_statement (
        Combine.parse_rule "if_statement" parse_children_if_statement
      ) nodes
    )
  and parse_inline_while_statement _parse_tail : (CST.while_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "while")
                (
                  Combine.parse_seq
                    (parse_node_parenthesized_expression)
                    (Combine.parse_seq(parse_node_statement)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_while_statement : CST.while_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_while_statement nodes
    )
  and parse_node_while_statement : CST.while_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_while_statement (
        Combine.parse_rule "while_statement" parse_children_while_statement
      ) nodes
    )
  and parse_inline_for_statement _parse_tail : (CST.for_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "for")
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "(")
                    (
                      (fun nodes ->
                        let _parse_tail =
                          Combine.parse_optional
                            (parse_node_expression)
                            (
                              Combine.parse_seq
                                (_parse_leaf_rule ";")
                                (
                                  Combine.parse_optional
                                    (
                                      (fun nodes ->
                                        (
                                          match
                                            (
                                              Combine.parse_seq
                                                (parse_node_expression)
                                                (
                                                  Combine.parse_repeat
                                                    (
                                                      Combine.parse_seq
                                                        (_parse_leaf_rule ",")
                                                        (parse_node_expression)
                                                    )
                                                    (Combine.parse_success)
                                                )
                                            ) nodes
                                          with
                                          | Some ((e0, (e1, tail)), nodes) ->
                                              Some ((e0, e1), nodes)
                                          | None ->
                                              None
                                        )
                                      )
                                    )
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ")")
                                        (Combine.parse_seq(parse_node_statement)(_parse_tail))
                                    )
                                )
                            )
                        in
                        let _parse_Local_var_decl nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_local_variable_declaration)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Local_var_decl (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Opt_exp_rep_COMMA_exp_SEMI nodes =
                          (
                            match
                              (
                                Combine.parse_optional
                                  (
                                    (fun nodes ->
                                      (
                                        match
                                          (
                                            Combine.parse_seq
                                              (parse_node_expression)
                                              (
                                                Combine.parse_repeat
                                                  (
                                                    Combine.parse_seq
                                                      (_parse_leaf_rule ",")
                                                      (parse_node_expression)
                                                  )
                                                  (Combine.parse_success)
                                              )
                                          ) nodes
                                        with
                                        | Some ((e0, (e1, tail)), nodes) ->
                                            Some ((e0, e1), nodes)
                                        | None ->
                                            None
                                      )
                                    )
                                  )
                                  (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                              ) nodes
                            with
                            | Some ((e0, (e1, tail)), nodes) ->
                                Some ((`Opt_exp_rep_COMMA_exp_SEMI (e0, e1), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Local_var_decl nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Opt_exp_rep_COMMA_exp_SEMI nodes
                      )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, (e5, (e6, (e7, tail)))))))), nodes) ->
              Some (((e0, e1, e2, e3, e4, e5, e6, e7), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_for_statement : CST.for_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_for_statement nodes
    )
  and parse_node_for_statement : CST.for_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_for_statement (
        Combine.parse_rule "for_statement" parse_children_for_statement
      ) nodes
    )
  and parse_inline_enhanced_for_statement _parse_tail : (CST.enhanced_for_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "for")
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "(")
                    (
                      Combine.parse_optional
                        (parse_node_modifiers)
                        (
                          Combine.parse_seq
                            (parse_node_unannotated_type)
                            (
                              Combine.parse_seq
                                (parse_node_variable_declarator_id)
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule ":")
                                    (
                                      Combine.parse_seq
                                        (parse_node_expression)
                                        (
                                          Combine.parse_seq
                                            (_parse_leaf_rule ")")
                                            (Combine.parse_seq(parse_node_statement)(_parse_tail))
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, (e5, (e6, (e7, (e8, tail))))))))), nodes) ->
              Some (((e0, e1, e2, e3, e4, e5, e6, e7, e8), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_enhanced_for_statement : CST.enhanced_for_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_enhanced_for_statement nodes
    )
  and parse_node_enhanced_for_statement : CST.enhanced_for_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_enhanced_for_statement (
        Combine.parse_rule "enhanced_for_statement" parse_children_enhanced_for_statement
      ) nodes
    )
  and parse_inline_annotation _parse_tail : (CST.annotation * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "@")
                (
                  Combine.parse_seq
                    (parse_node_name)
                    (
                      Combine.parse_seq
                        (parse_node_annotation_argument_list)
                        (_parse_tail)
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_annotation : CST.annotation Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_annotation nodes
    )
  and parse_node_annotation : CST.annotation Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_annotation (
        Combine.parse_rule "annotation" parse_children_annotation
      ) nodes
    )
  and parse_inline_annotation_argument_list _parse_tail : (CST.annotation_argument_list * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  (fun nodes ->
                    let _parse_tail =
                      Combine.parse_seq
                        (_parse_leaf_rule ")")
                        (_parse_tail)
                    in
                    let _parse_Elem_value nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_element_value)
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Elem_value (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Opt_elem_value_pair_rep_COMMA_elem_value_pair nodes =
                      (
                        match
                          (
                            Combine.parse_optional
                              (
                                (fun nodes ->
                                  (
                                    match
                                      (
                                        Combine.parse_seq
                                          (parse_node_element_value_pair)
                                          (
                                            Combine.parse_repeat
                                              (
                                                Combine.parse_seq
                                                  (_parse_leaf_rule ",")
                                                  (parse_node_element_value_pair)
                                              )
                                              (Combine.parse_success)
                                          )
                                      ) nodes
                                    with
                                    | Some ((e0, (e1, tail)), nodes) ->
                                        Some ((e0, e1), nodes)
                                    | None ->
                                        None
                                  )
                                )
                              )
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Opt_elem_value_pair_rep_COMMA_elem_value_pair (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Elem_value nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_Opt_elem_value_pair_rep_COMMA_elem_value_pair nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_annotation_argument_list : CST.annotation_argument_list Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_annotation_argument_list nodes
    )
  and parse_node_annotation_argument_list : CST.annotation_argument_list Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_annotation_argument_list (
        Combine.parse_rule "annotation_argument_list" parse_children_annotation_argument_list
      ) nodes
    )
  and parse_inline_element_value_pair _parse_tail : (CST.element_value_pair * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_identifier)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "=")
                    (Combine.parse_seq(parse_node_element_value)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_element_value_pair : CST.element_value_pair Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_element_value_pair nodes
    )
  and parse_node_element_value_pair : CST.element_value_pair Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_element_value_pair (
        Combine.parse_rule "element_value_pair" parse_children_element_value_pair
      ) nodes
    )
  and parse_inline_element_value _parse_tail : (CST.element_value * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Elem_value_array_init nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_element_value_array_initializer)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Elem_value_array_init (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Anno nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_annotation)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Anno (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Exp nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Elem_value_array_init nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Anno nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_element_value : CST.element_value Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_element_value nodes
    )
  and parse_node_element_value : CST.element_value Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_element_value (
        Combine.parse_rule "element_value" parse_children_element_value
      ) nodes
    )
  and parse_inline_element_value_array_initializer _parse_tail : (CST.element_value_array_initializer * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            (
                              Combine.parse_seq
                                (parse_node_element_value)
                                (
                                  Combine.parse_repeat
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ",")
                                        (parse_node_element_value)
                                    )
                                    (Combine.parse_success)
                                )
                            ) nodes
                          with
                          | Some ((e0, (e1, tail)), nodes) ->
                              Some ((e0, e1), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (
                      Combine.parse_optional
                        (_parse_leaf_rule ",")
                        (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_element_value_array_initializer : CST.element_value_array_initializer Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_element_value_array_initializer nodes
    )
  and parse_node_element_value_array_initializer : CST.element_value_array_initializer Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_element_value_array_initializer (
        Combine.parse_rule "element_value_array_initializer" parse_children_element_value_array_initializer
      ) nodes
    )
  and parse_inline_declaration _parse_tail : (CST.declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Modu_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_module_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Modu_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Pack_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_package_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Pack_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Impo_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_import_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Impo_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_class_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Inte_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_interface_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Inte_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Anno_type_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_annotation_type_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Anno_type_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Enum_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_enum_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Enum_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Modu_decl nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Pack_decl nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Impo_decl nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Class_decl nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Inte_decl nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Anno_type_decl nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Enum_decl nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_declaration : CST.declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_declaration nodes
    )
  and parse_node_declaration : CST.declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_declaration (
        Combine.parse_rule "declaration" parse_children_declaration
      ) nodes
    )
  and parse_inline_module_declaration _parse_tail : (CST.module_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat
                (parse_node_annotation)
                (
                  Combine.parse_optional
                    (_parse_leaf_rule "open")
                    (
                      Combine.parse_seq
                        (_parse_leaf_rule "module")
                        (
                          Combine.parse_seq
                            (parse_node_name)
                            (Combine.parse_seq(parse_node_module_body)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_module_declaration : CST.module_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_module_declaration nodes
    )
  and parse_node_module_declaration : CST.module_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_module_declaration (
        Combine.parse_rule "module_declaration" parse_children_module_declaration
      ) nodes
    )
  and parse_inline_package_declaration _parse_tail : (CST.package_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat
                (parse_node_annotation)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "package")
                    (
                      Combine.parse_seq
                        (parse_node_name)
                        (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_package_declaration : CST.package_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_package_declaration nodes
    )
  and parse_node_package_declaration : CST.package_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_package_declaration (
        Combine.parse_rule "package_declaration" parse_children_package_declaration
      ) nodes
    )
  and parse_inline_enum_declaration _parse_tail : (CST.enum_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "enum")
                    (
                      Combine.parse_seq
                        (parse_node_identifier)
                        (
                          Combine.parse_optional
                            (parse_node_super_interfaces)
                            (Combine.parse_seq(parse_node_enum_body)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_enum_declaration : CST.enum_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_enum_declaration nodes
    )
  and parse_node_enum_declaration : CST.enum_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_enum_declaration (
        Combine.parse_rule "enum_declaration" parse_children_enum_declaration
      ) nodes
    )
  and parse_inline_enum_body _parse_tail : (CST.enum_body * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            (
                              Combine.parse_seq
                                (parse_node_enum_constant)
                                (
                                  Combine.parse_repeat
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ",")
                                        (parse_node_enum_constant)
                                    )
                                    (Combine.parse_success)
                                )
                            ) nodes
                          with
                          | Some ((e0, (e1, tail)), nodes) ->
                              Some ((e0, e1), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (
                      Combine.parse_optional
                        (_parse_leaf_rule ",")
                        (
                          Combine.parse_optional
                            (parse_node_enum_body_declarations)
                            (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_enum_body : CST.enum_body Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_enum_body nodes
    )
  and parse_node_enum_body : CST.enum_body Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_enum_body (
        Combine.parse_rule "enum_body" parse_children_enum_body
      ) nodes
    )
  and parse_inline_enum_body_declarations _parse_tail : (CST.enum_body_declarations * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule ";")
                (
                  Combine.parse_repeat
                    (parse_node_class_body_declaration)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_enum_body_declarations : CST.enum_body_declarations Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_enum_body_declarations nodes
    )
  and parse_node_enum_body_declarations : CST.enum_body_declarations Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_enum_body_declarations (
        Combine.parse_rule "enum_body_declarations" parse_children_enum_body_declarations
      ) nodes
    )
  and parse_inline_enum_constant _parse_tail : (CST.enum_constant * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_identifier)
                    (
                      Combine.parse_optional
                        (parse_node_argument_list)
                        (Combine.parse_optional(parse_node_class_body)(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_enum_constant : CST.enum_constant Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_enum_constant nodes
    )
  and parse_node_enum_constant : CST.enum_constant Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_enum_constant (
        Combine.parse_rule "enum_constant" parse_children_enum_constant
      ) nodes
    )
  and parse_inline_class_declaration _parse_tail : (CST.class_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "class")
                    (
                      Combine.parse_seq
                        (parse_node_identifier)
                        (
                          Combine.parse_optional
                            (parse_node_type_parameters)
                            (
                              Combine.parse_optional
                                (parse_node_superclass)
                                (
                                  Combine.parse_optional
                                    (parse_node_super_interfaces)
                                    (Combine.parse_seq(parse_node_class_body)(_parse_tail))
                                )
                            )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, (e5, (e6, tail))))))), nodes) ->
              Some (((e0, e1, e2, e3, e4, e5, e6), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_class_declaration : CST.class_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_class_declaration nodes
    )
  and parse_node_class_declaration : CST.class_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_class_declaration (
        Combine.parse_rule "class_declaration" parse_children_class_declaration
      ) nodes
    )
  and parse_inline_modifiers _parse_tail : (CST.modifiers * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat1
                (
                  (fun nodes ->
                    let _parse_Anno nodes =
                      (
                        match
                          (
                            parse_node_annotation
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Anno (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Publ nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "public"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Publ (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Prot nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "protected"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Prot (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Priv nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "private"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Priv (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Abst nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "abstract"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Abst (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Stat nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "static"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Stat (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Final nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "final"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Final (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Stri nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "strictfp"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Stri (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Defa nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "default"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Defa (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Sync nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "synchronized"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Sync (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Nati nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "native"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Nati (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Tran nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "transient"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Tran (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Vola nodes =
                      (
                        match
                          (
                            _parse_leaf_rule "volatile"
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Vola (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Anno nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Publ nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Prot nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Priv nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Abst nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Stat nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Final nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_Stri nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_Defa nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        match _parse_Sync nodes with
                                                        | Some _ as res -> res
                                                        | None ->
                                                            match _parse_Nati nodes with
                                                            | Some _ as res -> res
                                                            | None ->
                                                                match _parse_Tran nodes with
                                                                | Some _ as res -> res
                                                                | None ->
                                                                    _parse_Vola nodes
                  )
                )
                (_parse_tail)
            ) nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_modifiers : CST.modifiers Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_modifiers nodes
    )
  and parse_node_modifiers : CST.modifiers Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_modifiers (
        Combine.parse_rule "modifiers" parse_children_modifiers
      ) nodes
    )
  and parse_inline_type_parameters _parse_tail : (CST.type_parameters * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "<")
                (
                  Combine.parse_seq
                    (parse_node_type_parameter)
                    (
                      Combine.parse_repeat
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ",")
                            (parse_node_type_parameter)
                        )
                        (Combine.parse_seq(_parse_leaf_rule ">")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_type_parameters : CST.type_parameters Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_type_parameters nodes
    )
  and parse_node_type_parameters : CST.type_parameters Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_type_parameters (
        Combine.parse_rule "type_parameters" parse_children_type_parameters
      ) nodes
    )
  and parse_inline_type_parameter _parse_tail : (CST.type_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat
                (parse_node_annotation)
                (
                  Combine.parse_seq
                    (parse_node_identifier)
                    (Combine.parse_optional(parse_node_type_bound)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_type_parameter : CST.type_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_type_parameter nodes
    )
  and parse_node_type_parameter : CST.type_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_type_parameter (
        Combine.parse_rule "type_parameter" parse_children_type_parameter
      ) nodes
    )
  and parse_inline_type_bound _parse_tail : (CST.type_bound * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "extends")
                (
                  Combine.parse_seq
                    (parse_node_type_)
                    (
                      Combine.parse_repeat
                        (Combine.parse_seq(_parse_leaf_rule "&")(parse_node_type_))
                        (_parse_tail)
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_type_bound : CST.type_bound Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_type_bound nodes
    )
  and parse_node_type_bound : CST.type_bound Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_type_bound (
        Combine.parse_rule "type_bound" parse_children_type_bound
      ) nodes
    )
  and parse_inline_superclass _parse_tail : (CST.superclass * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "extends")
                (Combine.parse_seq(parse_node_type_)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_superclass : CST.superclass Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_superclass nodes
    )
  and parse_node_superclass : CST.superclass Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_superclass (
        Combine.parse_rule "superclass" parse_children_superclass
      ) nodes
    )
  and parse_inline_super_interfaces _parse_tail : (CST.super_interfaces * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "implements")
                (
                  Combine.parse_seq
                    (parse_node_interface_type_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_super_interfaces : CST.super_interfaces Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_super_interfaces nodes
    )
  and parse_node_super_interfaces : CST.super_interfaces Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_super_interfaces (
        Combine.parse_rule "super_interfaces" parse_children_super_interfaces
      ) nodes
    )
  and parse_inline_interface_type_list _parse_tail : (CST.interface_type_list * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_type_)
                (
                  Combine.parse_repeat
                    (Combine.parse_seq(_parse_leaf_rule ",")(parse_node_type_))
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_interface_type_list : CST.interface_type_list Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_interface_type_list nodes
    )
  and parse_node_interface_type_list : CST.interface_type_list Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_interface_type_list (
        Combine.parse_rule "interface_type_list" parse_children_interface_type_list
      ) nodes
    )
  and parse_inline_class_body _parse_tail : (CST.class_body * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_repeat
                    (parse_node_class_body_declaration)
                    (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_class_body : CST.class_body Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_class_body nodes
    )
  and parse_node_class_body : CST.class_body Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_class_body (
        Combine.parse_rule "class_body" parse_children_class_body
      ) nodes
    )
  and parse_inline_class_body_declaration _parse_tail : (CST.class_body_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Class_body_decl_field_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_field_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_field_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_meth_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_method_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_meth_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_class_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_class_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_class_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_inte_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_interface_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_inte_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_anno_type_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_annotation_type_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_anno_type_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_enum_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_enum_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_enum_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_blk nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_block)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_blk (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_stat_init nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_static_initializer)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_stat_init (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_cons_decl nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_constructor_declaration)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_cons_decl (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_body_decl_SEMI nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule ";")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_body_decl_SEMI (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Class_body_decl_field_decl nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Class_body_decl_meth_decl nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Class_body_decl_class_decl nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Class_body_decl_inte_decl nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Class_body_decl_anno_type_decl nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Class_body_decl_enum_decl nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Class_body_decl_blk nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Class_body_decl_stat_init nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Class_body_decl_cons_decl nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                _parse_Class_body_decl_SEMI nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_class_body_declaration : CST.class_body_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_class_body_declaration nodes
    )
  and parse_node_class_body_declaration : CST.class_body_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_class_body_declaration (
        Combine.parse_rule "class_body_declaration" parse_children_class_body_declaration
      ) nodes
    )
  and parse_inline_static_initializer _parse_tail : (CST.static_initializer * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "static")
                (Combine.parse_seq(parse_node_block)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_static_initializer : CST.static_initializer Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_static_initializer nodes
    )
  and parse_node_static_initializer : CST.static_initializer Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_static_initializer (
        Combine.parse_rule "static_initializer" parse_children_static_initializer
      ) nodes
    )
  and parse_inline_constructor_declaration _parse_tail : (CST.constructor_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_constructor_declarator)
                    (
                      Combine.parse_optional
                        (parse_node_throws)
                        (
                          Combine.parse_seq
                            (parse_node_constructor_body)
                            (_parse_tail)
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_constructor_declaration : CST.constructor_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_constructor_declaration nodes
    )
  and parse_node_constructor_declaration : CST.constructor_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_constructor_declaration (
        Combine.parse_rule "constructor_declaration" parse_children_constructor_declaration
      ) nodes
    )
  and parse_inline_constructor_declarator _parse_tail : (CST.constructor_declarator * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_type_parameters)
                (
                  Combine.parse_seq
                    (parse_node_identifier)
                    (
                      Combine.parse_seq
                        (parse_node_formal_parameters)
                        (_parse_tail)
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_constructor_declarator : CST.constructor_declarator Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_constructor_declarator nodes
    )
  and parse_node_constructor_declarator : CST.constructor_declarator Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_constructor_declarator (
        Combine.parse_rule "constructor_declarator" parse_children_constructor_declarator
      ) nodes
    )
  and parse_inline_constructor_body _parse_tail : (CST.constructor_body * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_optional
                    (parse_node_explicit_constructor_invocation)
                    (
                      Combine.parse_repeat
                        (parse_node_statement)
                        (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_constructor_body : CST.constructor_body Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_constructor_body nodes
    )
  and parse_node_constructor_body : CST.constructor_body Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_constructor_body (
        Combine.parse_rule "constructor_body" parse_children_constructor_body
      ) nodes
    )
  and parse_inline_explicit_constructor_invocation _parse_tail : (CST.explicit_constructor_invocation * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (parse_node_argument_list)
                (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
            in
            let _parse_Opt_type_args_choice_this nodes =
              (
                match
                  (
                    Combine.parse_optional
                      (parse_node_type_arguments)
                      (
                        (fun nodes ->
                          let _parse_tail =
                            _parse_tail
                          in
                          let _parse_This nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_this)
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`This (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_Super nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_super)
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`Super (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_This nodes with
                          | Some _ as res -> res
                          | None ->
                              _parse_Super nodes
                        )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Opt_type_args_choice_this (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Choice_prim_DOT_opt_type_args_super nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (_parse_leaf_rule ".")
                      (
                        Combine.parse_optional
                          (parse_node_type_arguments)
                          (Combine.parse_seq(parse_node_super)(_parse_tail))
                      )
                  in
                  let _parse_Prim nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_primary)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Prim (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  _parse_Prim nodes
                with
                | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
                    Some ((`Choice_prim_DOT_opt_type_args_super (e0, e1, e2, e3), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Opt_type_args_choice_this nodes with
            | Some _ as res -> res
            | None ->
                _parse_Choice_prim_DOT_opt_type_args_super nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_explicit_constructor_invocation : CST.explicit_constructor_invocation Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_explicit_constructor_invocation nodes
    )
  and parse_node_explicit_constructor_invocation : CST.explicit_constructor_invocation Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_explicit_constructor_invocation (
        Combine.parse_rule "explicit_constructor_invocation" parse_children_explicit_constructor_invocation
      ) nodes
    )
  and parse_inline_field_declaration _parse_tail : (CST.field_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (
                      Combine.parse_seq
                        (parse_node_variable_declarator_list)
                        (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_field_declaration : CST.field_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_field_declaration nodes
    )
  and parse_node_field_declaration : CST.field_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_field_declaration (
        Combine.parse_rule "field_declaration" parse_children_field_declaration
      ) nodes
    )
  and parse_inline_annotation_type_declaration _parse_tail : (CST.annotation_type_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "@interface")
                    (
                      Combine.parse_seq
                        (parse_node_identifier)
                        (
                          Combine.parse_seq
                            (parse_node_annotation_type_body)
                            (_parse_tail)
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_annotation_type_declaration : CST.annotation_type_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_annotation_type_declaration nodes
    )
  and parse_node_annotation_type_declaration : CST.annotation_type_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_annotation_type_declaration (
        Combine.parse_rule "annotation_type_declaration" parse_children_annotation_type_declaration
      ) nodes
    )
  and parse_inline_annotation_type_body _parse_tail : (CST.annotation_type_body * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_repeat
                    (
                      (fun nodes ->
                        let _parse_Anno_type_elem_decl nodes =
                          (
                            match
                              (
                                parse_node_annotation_type_element_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Anno_type_elem_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Cst_decl nodes =
                          (
                            match
                              (
                                parse_node_constant_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Cst_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Class_decl nodes =
                          (
                            match
                              (
                                parse_node_class_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Class_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Inte_decl nodes =
                          (
                            match
                              (
                                parse_node_interface_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Inte_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Anno_type_decl nodes =
                          (
                            match
                              (
                                parse_node_annotation_type_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Anno_type_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Anno_type_elem_decl nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Cst_decl nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Class_decl nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Inte_decl nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        _parse_Anno_type_decl nodes
                      )
                    )
                    (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_annotation_type_body : CST.annotation_type_body Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_annotation_type_body nodes
    )
  and parse_node_annotation_type_body : CST.annotation_type_body Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_annotation_type_body (
        Combine.parse_rule "annotation_type_body" parse_children_annotation_type_body
      ) nodes
    )
  and parse_inline_annotation_type_element_declaration _parse_tail : (CST.annotation_type_element_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (
                      Combine.parse_seq
                        (parse_node_identifier)
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule "(")
                            (
                              Combine.parse_seq
                                (_parse_leaf_rule ")")
                                (
                                  Combine.parse_optional
                                    (parse_node_dimensions)
                                    (
                                      Combine.parse_optional
                                        (parse_node_default_value)
                                        (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                                    )
                                )
                            )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, (e5, (e6, (e7, tail)))))))), nodes) ->
              Some (((e0, e1, e2, e3, e4, e5, e6, e7), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_annotation_type_element_declaration : CST.annotation_type_element_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_annotation_type_element_declaration nodes
    )
  and parse_node_annotation_type_element_declaration : CST.annotation_type_element_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_annotation_type_element_declaration (
        Combine.parse_rule "annotation_type_element_declaration" parse_children_annotation_type_element_declaration
      ) nodes
    )
  and parse_inline_default_value _parse_tail : (CST.default_value * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "default")
                (Combine.parse_seq(parse_node_element_value)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_default_value : CST.default_value Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_default_value nodes
    )
  and parse_node_default_value : CST.default_value Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_default_value (
        Combine.parse_rule "default_value" parse_children_default_value
      ) nodes
    )
  and parse_inline_interface_declaration _parse_tail : (CST.interface_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "interface")
                    (
                      Combine.parse_seq
                        (parse_node_identifier)
                        (
                          Combine.parse_optional
                            (parse_node_type_parameters)
                            (
                              Combine.parse_optional
                                (parse_node_extends_interfaces)
                                (Combine.parse_seq(parse_node_interface_body)(_parse_tail))
                            )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, (e5, tail)))))), nodes) ->
              Some (((e0, e1, e2, e3, e4, e5), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_interface_declaration : CST.interface_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_interface_declaration nodes
    )
  and parse_node_interface_declaration : CST.interface_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_interface_declaration (
        Combine.parse_rule "interface_declaration" parse_children_interface_declaration
      ) nodes
    )
  and parse_inline_extends_interfaces _parse_tail : (CST.extends_interfaces * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "extends")
                (
                  Combine.parse_seq
                    (parse_node_interface_type_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_extends_interfaces : CST.extends_interfaces Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_extends_interfaces nodes
    )
  and parse_node_extends_interfaces : CST.extends_interfaces Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_extends_interfaces (
        Combine.parse_rule "extends_interfaces" parse_children_extends_interfaces
      ) nodes
    )
  and parse_inline_interface_body _parse_tail : (CST.interface_body * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_repeat
                    (
                      (fun nodes ->
                        let _parse_Cst_decl nodes =
                          (
                            match
                              (
                                parse_node_constant_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Cst_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Enum_decl nodes =
                          (
                            match
                              (
                                parse_node_enum_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Enum_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Meth_decl nodes =
                          (
                            match
                              (
                                parse_node_method_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Meth_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Class_decl nodes =
                          (
                            match
                              (
                                parse_node_class_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Class_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Inte_decl nodes =
                          (
                            match
                              (
                                parse_node_interface_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Inte_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Anno_type_decl nodes =
                          (
                            match
                              (
                                parse_node_annotation_type_declaration
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Anno_type_decl (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_SEMI nodes =
                          (
                            match
                              (
                                _parse_leaf_rule ";"
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`SEMI (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Cst_decl nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Enum_decl nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Meth_decl nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Class_decl nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Inte_decl nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Anno_type_decl nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                _parse_SEMI nodes
                      )
                    )
                    (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_interface_body : CST.interface_body Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_interface_body nodes
    )
  and parse_node_interface_body : CST.interface_body Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_interface_body (
        Combine.parse_rule "interface_body" parse_children_interface_body
      ) nodes
    )
  and parse_inline_constant_declaration _parse_tail : (CST.constant_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (
                      Combine.parse_seq
                        (parse_node_variable_declarator_list)
                        (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_constant_declaration : CST.constant_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_constant_declaration nodes
    )
  and parse_node_constant_declaration : CST.constant_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_constant_declaration (
        Combine.parse_rule "constant_declaration" parse_children_constant_declaration
      ) nodes
    )
  and parse_inline_variable_declarator_list _parse_tail : (CST.variable_declarator_list * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_variable_declarator)
                (
                  Combine.parse_repeat
                    (
                      Combine.parse_seq
                        (_parse_leaf_rule ",")
                        (parse_node_variable_declarator)
                    )
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_variable_declarator_list : CST.variable_declarator_list Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_variable_declarator_list nodes
    )
  and parse_node_variable_declarator_list : CST.variable_declarator_list Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_variable_declarator_list (
        Combine.parse_rule "variable_declarator_list" parse_children_variable_declarator_list
      ) nodes
    )
  and parse_inline_variable_declarator _parse_tail : (CST.variable_declarator * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_variable_declarator_id)
                (
                  Combine.parse_optional
                    (
                      Combine.parse_seq
                        (_parse_leaf_rule "=")
                        (parse_node_variable_initializer)
                    )
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_variable_declarator : CST.variable_declarator Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_variable_declarator nodes
    )
  and parse_node_variable_declarator : CST.variable_declarator Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_variable_declarator (
        Combine.parse_rule "variable_declarator" parse_children_variable_declarator
      ) nodes
    )
  and parse_inline_variable_declarator_id _parse_tail : (CST.variable_declarator_id * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_optional
                (parse_node_dimensions)
                (_parse_tail)
            in
            let _parse_Id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Rese_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_reserved_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Rese_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Id nodes with
            | Some _ as res -> res
            | None ->
                _parse_Rese_id nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_variable_declarator_id : CST.variable_declarator_id Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_variable_declarator_id nodes
    )
  and parse_node_variable_declarator_id : CST.variable_declarator_id Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_variable_declarator_id (
        Combine.parse_rule "variable_declarator_id" parse_children_variable_declarator_id
      ) nodes
    )
  and parse_inline_variable_initializer _parse_tail : (CST.variable_initializer * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Var_init_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Var_init_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Var_init_array_init nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_array_initializer)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Var_init_array_init (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Var_init_exp nodes with
            | Some _ as res -> res
            | None ->
                _parse_Var_init_array_init nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_variable_initializer : CST.variable_initializer Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_variable_initializer nodes
    )
  and parse_node_variable_initializer : CST.variable_initializer Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_variable_initializer (
        Combine.parse_rule "variable_initializer" parse_children_variable_initializer
      ) nodes
    )
  and parse_inline_array_initializer _parse_tail : (CST.array_initializer * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            (
                              Combine.parse_seq
                                (parse_node_variable_initializer)
                                (
                                  Combine.parse_repeat
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ",")
                                        (parse_node_variable_initializer)
                                    )
                                    (Combine.parse_success)
                                )
                            ) nodes
                          with
                          | Some ((e0, (e1, tail)), nodes) ->
                              Some ((e0, e1), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (
                      Combine.parse_optional
                        (_parse_leaf_rule ",")
                        (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_array_initializer : CST.array_initializer Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_array_initializer nodes
    )
  and parse_node_array_initializer : CST.array_initializer Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_array_initializer (
        Combine.parse_rule "array_initializer" parse_children_array_initializer
      ) nodes
    )
  and parse_inline_type_ _parse_tail : (CST.type_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Type_unan_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_unannotated_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Type_unan_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Type_anno_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_annotated_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Type_anno_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Type_unan_type nodes with
            | Some _ as res -> res
            | None ->
                _parse_Type_anno_type nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_type_ : CST.type_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_type_ nodes
    )
  and parse_node_type_ : CST.type_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_type_ (
        Combine.parse_rule "type" parse_children_type_
      ) nodes
    )
  and parse_inline_unannotated_type _parse_tail : (CST.unannotated_type * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Unan_type_simple_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_simple_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Unan_type_simple_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Unan_type_array_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_array_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Unan_type_array_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Unan_type_simple_type nodes with
            | Some _ as res -> res
            | None ->
                _parse_Unan_type_array_type nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_unannotated_type : CST.unannotated_type Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_unannotated_type nodes
    )
  and parse_node_unannotated_type : CST.unannotated_type Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_unannotated_type (
        Combine.parse_rule "unannotated_type" parse_children_unannotated_type
      ) nodes
    )
  and parse_inline_simple_type _parse_tail : (CST.simple_type * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Simple_type_void_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_void_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_type_void_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_type_inte_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_integral_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_type_inte_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_type_floa_point_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_floating_point_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_type_floa_point_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_type_bool_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_boolean_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_type_bool_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_type_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_type_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_type_scop_type_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_scoped_type_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_type_scop_type_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_type_gene_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_generic_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_type_gene_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Simple_type_void_type nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Simple_type_inte_type nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Simple_type_floa_point_type nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Simple_type_bool_type nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Simple_type_id nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Simple_type_scop_type_id nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Simple_type_gene_type nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_simple_type : CST.simple_type Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_simple_type nodes
    )
  and parse_node_simple_type : CST.simple_type Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_simple_type (
        Combine.parse_rule "simple_type" parse_children_simple_type
      ) nodes
    )
  and parse_inline_annotated_type _parse_tail : (CST.annotated_type * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat1
                (parse_node_annotation)
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_annotated_type : CST.annotated_type Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_annotated_type nodes
    )
  and parse_node_annotated_type : CST.annotated_type Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_annotated_type (
        Combine.parse_rule "annotated_type" parse_children_annotated_type
      ) nodes
    )
  and parse_inline_scoped_type_identifier _parse_tail : (CST.scoped_type_identifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (_parse_leaf_rule ".")
                (
                  Combine.parse_repeat
                    (parse_node_annotation)
                    (Combine.parse_seq(parse_node_identifier)(_parse_tail))
                )
            in
            let _parse_Id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Scop_type_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_scoped_type_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Scop_type_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Gene_type nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_generic_type)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Gene_type (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Id nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Scop_type_id nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Gene_type nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_scoped_type_identifier : CST.scoped_type_identifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_scoped_type_identifier nodes
    )
  and parse_node_scoped_type_identifier : CST.scoped_type_identifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_scoped_type_identifier (
        Combine.parse_rule "scoped_type_identifier" parse_children_scoped_type_identifier
      ) nodes
    )
  and parse_inline_generic_type _parse_tail : (CST.generic_type * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (parse_node_type_arguments)
                (_parse_tail)
            in
            let _parse_Id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Scop_type_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_scoped_type_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Scop_type_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Id nodes with
            | Some _ as res -> res
            | None ->
                _parse_Scop_type_id nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_generic_type : CST.generic_type Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_generic_type nodes
    )
  and parse_node_generic_type : CST.generic_type Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_generic_type (
        Combine.parse_rule "generic_type" parse_children_generic_type
      ) nodes
    )
  and parse_inline_array_type _parse_tail : (CST.array_type * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_unannotated_type)
                (Combine.parse_seq(parse_node_dimensions)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_array_type : CST.array_type Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_array_type nodes
    )
  and parse_node_array_type : CST.array_type Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_array_type (
        Combine.parse_rule "array_type" parse_children_array_type
      ) nodes
    )
  and parse_inline_method_header _parse_tail : (CST.method_header * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (
                  (fun nodes ->
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_type_parameters)
                            (
                              Combine.parse_repeat
                                (parse_node_annotation)
                                (Combine.parse_success)
                            )
                        ) nodes
                      with
                      | Some ((e0, (e1, tail)), nodes) ->
                          Some ((e0, e1), nodes)
                      | None ->
                          None
                    )
                  )
                )
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (
                      Combine.parse_seq
                        (parse_node_method_declarator)
                        (Combine.parse_optional(parse_node_throws)(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_header : CST.method_header Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_header nodes
    )
  and parse_node_method_header : CST.method_header Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_header (
        Combine.parse_rule "method_header" parse_children_method_header
      ) nodes
    )
  and parse_inline_method_declarator _parse_tail : (CST.method_declarator * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (parse_node_formal_parameters)
                (Combine.parse_optional(parse_node_dimensions)(_parse_tail))
            in
            let _parse_Id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Rese_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_reserved_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Rese_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Id nodes with
            | Some _ as res -> res
            | None ->
                _parse_Rese_id nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_declarator : CST.method_declarator Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_declarator nodes
    )
  and parse_node_method_declarator : CST.method_declarator Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_declarator (
        Combine.parse_rule "method_declarator" parse_children_method_declarator
      ) nodes
    )
  and parse_inline_formal_parameters _parse_tail : (CST.formal_parameters * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_optional
                    (parse_node_receiver_parameter)
                    (
                      Combine.parse_optional
                        (
                          (fun nodes ->
                            (
                              match
                                let _parse_tail =
                                  Combine.parse_repeat
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ",")
                                        (
                                          (fun nodes ->
                                            let _parse_Form_param nodes =
                                              (
                                                match
                                                  (
                                                    parse_node_formal_parameter
                                                  ) nodes
                                                with
                                                | Some (e0, nodes) ->
                                                    Some (`Form_param (e0), nodes)
                                                | None ->
                                                    None
                                              )
                                            in
                                            let _parse_Spre_param nodes =
                                              (
                                                match
                                                  (
                                                    parse_node_spread_parameter
                                                  ) nodes
                                                with
                                                | Some (e0, nodes) ->
                                                    Some (`Spre_param (e0), nodes)
                                                | None ->
                                                    None
                                              )
                                            in
                                            match _parse_Form_param nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                _parse_Spre_param nodes
                                          )
                                        )
                                    )
                                    (Combine.parse_success)
                                in
                                let _parse_Form_param nodes =
                                  (
                                    match
                                      (
                                        Combine.parse_seq
                                          (parse_node_formal_parameter)
                                          (_parse_tail)
                                      ) nodes
                                    with
                                    | Some ((e0, tail), nodes) ->
                                        Some ((`Form_param (e0), tail), nodes)
                                    | None ->
                                        None
                                  )
                                in
                                let _parse_Spre_param nodes =
                                  (
                                    match
                                      (
                                        Combine.parse_seq
                                          (parse_node_spread_parameter)
                                          (_parse_tail)
                                      ) nodes
                                    with
                                    | Some ((e0, tail), nodes) ->
                                        Some ((`Spre_param (e0), tail), nodes)
                                    | None ->
                                        None
                                  )
                                in
                                match _parse_Form_param nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Spre_param nodes
                              with
                              | Some ((e0, (e1, tail)), nodes) ->
                                  Some ((e0, e1), nodes)
                              | None ->
                                  None
                            )
                          )
                        )
                        (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_formal_parameters : CST.formal_parameters Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_formal_parameters nodes
    )
  and parse_node_formal_parameters : CST.formal_parameters Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_formal_parameters (
        Combine.parse_rule "formal_parameters" parse_children_formal_parameters
      ) nodes
    )
  and parse_inline_formal_parameter _parse_tail : (CST.formal_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (
                      Combine.parse_seq
                        (parse_node_variable_declarator_id)
                        (_parse_tail)
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_formal_parameter : CST.formal_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_formal_parameter nodes
    )
  and parse_node_formal_parameter : CST.formal_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_formal_parameter (
        Combine.parse_rule "formal_parameter" parse_children_formal_parameter
      ) nodes
    )
  and parse_inline_receiver_parameter _parse_tail : (CST.receiver_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat
                (parse_node_annotation)
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (
                      Combine.parse_optional
                        (
                          Combine.parse_seq
                            (parse_node_identifier)
                            (_parse_leaf_rule ".")
                        )
                        (Combine.parse_seq(parse_node_this)(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_receiver_parameter : CST.receiver_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_receiver_parameter nodes
    )
  and parse_node_receiver_parameter : CST.receiver_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_receiver_parameter (
        Combine.parse_rule "receiver_parameter" parse_children_receiver_parameter
      ) nodes
    )
  and parse_inline_spread_parameter _parse_tail : (CST.spread_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (
                      Combine.parse_seq
                        (_parse_leaf_rule "...")
                        (
                          Combine.parse_seq
                            (parse_node_variable_declarator)
                            (_parse_tail)
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_spread_parameter : CST.spread_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_spread_parameter nodes
    )
  and parse_node_spread_parameter : CST.spread_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_spread_parameter (
        Combine.parse_rule "spread_parameter" parse_children_spread_parameter
      ) nodes
    )
  and parse_inline_throws _parse_tail : (CST.throws * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "throws")
                (
                  Combine.parse_seq
                    (parse_node_type_)
                    (
                      Combine.parse_repeat
                        (Combine.parse_seq(_parse_leaf_rule ",")(parse_node_type_))
                        (_parse_tail)
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_throws : CST.throws Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_throws nodes
    )
  and parse_node_throws : CST.throws Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_throws (
        Combine.parse_rule "throws" parse_children_throws
      ) nodes
    )
  and parse_inline_local_variable_declaration _parse_tail : (CST.local_variable_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_unannotated_type)
                    (
                      Combine.parse_seq
                        (parse_node_variable_declarator_list)
                        (Combine.parse_seq(_parse_leaf_rule ";")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_local_variable_declaration : CST.local_variable_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_local_variable_declaration nodes
    )
  and parse_node_local_variable_declaration : CST.local_variable_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_local_variable_declaration (
        Combine.parse_rule "local_variable_declaration" parse_children_local_variable_declaration
      ) nodes
    )
  and parse_inline_method_declaration _parse_tail : (CST.method_declaration * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_modifiers)
                (
                  Combine.parse_seq
                    (parse_node_method_header)
                    (
                      (fun nodes ->
                        let _parse_tail =
                          _parse_tail
                        in
                        let _parse_Blk nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_block)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Blk (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_SEMI nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (_parse_leaf_rule ";")
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`SEMI (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Blk nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_SEMI nodes
                      )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_declaration : CST.method_declaration Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_declaration nodes
    )
  and parse_node_method_declaration : CST.method_declaration Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_declaration (
        Combine.parse_rule "method_declaration" parse_children_method_declaration
      ) nodes
    )
  in
  let cache_program : CST.program Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_program _parse_tail : (CST.program * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat
                (parse_node_statement)
                (_parse_tail)
            ) nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_program : CST.program Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_program nodes
    )
  in
  let parse_node_program : CST.program Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_program (
        Combine.parse_rule "program" parse_children_program
      ) nodes
    )
  in
  let result =
    Combine.parse_root ~extras parse_node_program root_node;
  in
  if !debug then (
    Printf.printf "---
";
    flush stdout
  );
  result

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree
