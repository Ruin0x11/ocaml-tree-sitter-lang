(* Generated by ocaml-tree-sitter. *)

(* Disable warnings against unused variables *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_ruby"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
  "heredoc_body";
]

let children_regexps : (string * Run.exp option) list = [
  "uninterpreted", None;
  "self", None;
  "binary_star", None;
  "singleton_class_left_angle_left_langle", None;
  "instance_variable", None;
  "empty_statement", None;
  "binary_minus", None;
  "simple_symbol", None;
  "complex", None;
  "character", None;
  "escape_sequence", None;
  "false",
  Some (
    Alt [|
      Token (Literal "false");
      Token (Literal "FALSE");
    |];
  );
  "subshell_start", None;
  "regex_start", None;
  "constant", None;
  "symbol_start", None;
  "unary_minus", None;
  "block_ampersand", None;
  "class_variable", None;
  "comment", None;
  "string_array_start", None;
  "splat_star", None;
  "integer", None;
  "heredoc_content", None;
  "super", None;
  "string_end", None;
  "line_break", None;
  "identifier", None;
  "string_content", None;
  "heredoc_end", None;
  "nil",
  Some (
    Alt [|
      Token (Literal "nil");
      Token (Literal "NIL");
    |];
  );
  "heredoc_beginning", None;
  "float", None;
  "global_variable", None;
  "symbol_array_start", None;
  "heredoc_body_start", None;
  "operator",
  Some (
    Alt [|
      Token (Literal "..");
      Token (Literal "|");
      Token (Literal "^");
      Token (Literal "&");
      Token (Literal "<=>");
      Token (Literal "==");
      Token (Literal "===");
      Token (Literal "=~");
      Token (Literal ">");
      Token (Literal ">=");
      Token (Literal "<");
      Token (Literal "<=");
      Token (Literal "+");
      Token (Literal "-");
      Token (Literal "*");
      Token (Literal "/");
      Token (Literal "%");
      Token (Literal "!");
      Token (Literal "!~");
      Token (Literal "**");
      Token (Literal "<<");
      Token (Literal ">>");
      Token (Literal "~");
      Token (Literal "+@");
      Token (Literal "-@");
      Token (Literal "[]");
      Token (Literal "[]=");
      Token (Literal "`");
    |];
  );
  "true",
  Some (
    Alt [|
      Token (Literal "true");
      Token (Literal "TRUE");
    |];
  );
  "string_start", None;
  "identifier_hash_key", None;
  "rational",
  Some (
    Seq [
      Token (Name "integer");
      Token (Literal "r");
    ];
  );
  "terminator",
  Some (
    Alt [|
      Token (Name "line_break");
      Token (Literal ";");
    |];
  );
  "hash_splat_parameter",
  Some (
    Seq [
      Token (Literal "**");
      Opt (
        Token (Name "identifier");
      );
    ];
  );
  "splat_parameter",
  Some (
    Seq [
      Token (Literal "*");
      Opt (
        Token (Name "identifier");
      );
    ];
  );
  "setter",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "=");
    ];
  );
  "block_parameter",
  Some (
    Seq [
      Token (Literal "&");
      Token (Name "identifier");
    ];
  );
  "unary_literal",
  Some (
    Seq [
      Alt [|
        Token (Name "unary_minus");
        Token (Literal "+");
      |];
      Alt [|
        Token (Name "integer");
        Token (Name "float");
      |];
    ];
  );
  "variable",
  Some (
    Alt [|
      Token (Name "self");
      Token (Name "super");
      Token (Name "instance_variable");
      Token (Name "class_variable");
      Token (Name "global_variable");
      Token (Name "identifier");
      Token (Name "constant");
    |];
  );
  "do",
  Some (
    Alt [|
      Token (Literal "do");
      Token (Name "terminator");
    |];
  );
  "statements",
  Some (
    Alt [|
      Seq [
        Repeat1 (
          Alt [|
            Seq [
              Token (Name "statement");
              Token (Name "terminator");
            ];
            Token (Name "empty_statement");
          |];
        );
        Opt (
          Token (Name "statement");
        );
      ];
      Token (Name "statement");
    |];
  );
  "begin_block",
  Some (
    Seq [
      Token (Literal "BEGIN");
      Token (Literal "{");
      Opt (
        Token (Name "statements");
      );
      Token (Literal "}");
    ];
  );
  "end_block",
  Some (
    Seq [
      Token (Literal "END");
      Token (Literal "{");
      Opt (
        Token (Name "statements");
      );
      Token (Literal "}");
    ];
  );
  "statement",
  Some (
    Alt [|
      Token (Name "undef");
      Token (Name "alias");
      Token (Name "if_modifier");
      Token (Name "unless_modifier");
      Token (Name "while_modifier");
      Token (Name "until_modifier");
      Token (Name "rescue_modifier");
      Token (Name "begin_block");
      Token (Name "end_block");
      Token (Name "expression");
    |];
  );
  "method",
  Some (
    Seq [
      Token (Literal "def");
      Token (Name "method_rest");
    ];
  );
  "singleton_method",
  Some (
    Seq [
      Token (Literal "def");
      Alt [|
        Token (Name "variable");
        Seq [
          Token (Literal "(");
          Token (Name "arg");
          Token (Literal ")");
        ];
      |];
      Alt [|
        Token (Literal ".");
        Token (Literal "::");
      |];
      Token (Name "method_rest");
    ];
  );
  "method_rest",
  Some (
    Seq [
      Token (Name "method_name");
      Alt [|
        Seq [
          Token (Name "parameters");
          Opt (
            Token (Name "terminator");
          );
        ];
        Seq [
          Opt (
            Token (Name "bare_parameters");
          );
          Token (Name "terminator");
        ];
      |];
      Token (Name "body_statement");
    ];
  );
  "parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "formal_parameter");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "formal_parameter");
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "bare_parameters",
  Some (
    Seq [
      Token (Name "simple_formal_parameter");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "formal_parameter");
        ];
      );
    ];
  );
  "block_parameters",
  Some (
    Seq [
      Token (Literal "|");
      Opt (
        Seq [
          Token (Name "formal_parameter");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "formal_parameter");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Opt (
        Seq [
          Token (Literal ";");
          Token (Name "identifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "identifier");
            ];
          );
        ];
      );
      Token (Literal "|");
    ];
  );
  "formal_parameter",
  Some (
    Alt [|
      Token (Name "simple_formal_parameter");
      Token (Name "parameters");
    |];
  );
  "simple_formal_parameter",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "splat_parameter");
      Token (Name "hash_splat_parameter");
      Token (Name "block_parameter");
      Token (Name "keyword_parameter");
      Token (Name "optional_parameter");
    |];
  );
  "keyword_parameter",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal ":");
      Opt (
        Token (Name "arg");
      );
    ];
  );
  "optional_parameter",
  Some (
    Seq [
      Token (Name "identifier");
      Token (Literal "=");
      Token (Name "arg");
    ];
  );
  "class",
  Some (
    Seq [
      Token (Literal "class");
      Alt [|
        Token (Name "constant");
        Token (Name "scope_resolution");
      |];
      Opt (
        Token (Name "superclass");
      );
      Token (Name "terminator");
      Token (Name "body_statement");
    ];
  );
  "superclass",
  Some (
    Seq [
      Token (Literal "<");
      Token (Name "arg");
    ];
  );
  "singleton_class",
  Some (
    Seq [
      Token (Literal "class");
      Token (Name "singleton_class_left_angle_left_langle");
      Token (Name "arg");
      Token (Name "terminator");
      Token (Name "body_statement");
    ];
  );
  "module",
  Some (
    Seq [
      Token (Literal "module");
      Alt [|
        Token (Name "constant");
        Token (Name "scope_resolution");
      |];
      Alt [|
        Seq [
          Token (Name "terminator");
          Token (Name "body_statement");
        ];
        Token (Literal "end");
      |];
    ];
  );
  "return_command",
  Some (
    Seq [
      Token (Literal "return");
      Token (Name "command_argument_list");
    ];
  );
  "yield_command",
  Some (
    Seq [
      Token (Literal "yield");
      Token (Name "command_argument_list");
    ];
  );
  "break_command",
  Some (
    Seq [
      Token (Literal "break");
      Token (Name "command_argument_list");
    ];
  );
  "next_command",
  Some (
    Seq [
      Token (Literal "next");
      Token (Name "command_argument_list");
    ];
  );
  "return",
  Some (
    Seq [
      Token (Literal "return");
      Opt (
        Token (Name "argument_list");
      );
    ];
  );
  "yield",
  Some (
    Seq [
      Token (Literal "yield");
      Opt (
        Token (Name "argument_list");
      );
    ];
  );
  "break",
  Some (
    Seq [
      Token (Literal "break");
      Opt (
        Token (Name "argument_list");
      );
    ];
  );
  "next",
  Some (
    Seq [
      Token (Literal "next");
      Opt (
        Token (Name "argument_list");
      );
    ];
  );
  "redo",
  Some (
    Seq [
      Token (Literal "redo");
      Opt (
        Token (Name "argument_list");
      );
    ];
  );
  "retry",
  Some (
    Seq [
      Token (Literal "retry");
      Opt (
        Token (Name "argument_list");
      );
    ];
  );
  "if_modifier",
  Some (
    Seq [
      Token (Name "statement");
      Token (Literal "if");
      Token (Name "expression");
    ];
  );
  "unless_modifier",
  Some (
    Seq [
      Token (Name "statement");
      Token (Literal "unless");
      Token (Name "expression");
    ];
  );
  "while_modifier",
  Some (
    Seq [
      Token (Name "statement");
      Token (Literal "while");
      Token (Name "expression");
    ];
  );
  "until_modifier",
  Some (
    Seq [
      Token (Name "statement");
      Token (Literal "until");
      Token (Name "expression");
    ];
  );
  "rescue_modifier",
  Some (
    Seq [
      Token (Name "statement");
      Token (Literal "rescue");
      Token (Name "expression");
    ];
  );
  "while",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "arg");
      Token (Name "do");
      Opt (
        Token (Name "statements");
      );
      Token (Literal "end");
    ];
  );
  "until",
  Some (
    Seq [
      Token (Literal "until");
      Token (Name "arg");
      Token (Name "do");
      Opt (
        Token (Name "statements");
      );
      Token (Literal "end");
    ];
  );
  "for",
  Some (
    Seq [
      Token (Literal "for");
      Token (Name "mlhs");
      Token (Name "in");
      Token (Name "do");
      Opt (
        Token (Name "statements");
      );
      Token (Literal "end");
    ];
  );
  "in",
  Some (
    Seq [
      Token (Literal "in");
      Token (Name "arg");
    ];
  );
  "case",
  Some (
    Seq [
      Token (Literal "case");
      Opt (
        Token (Name "arg");
      );
      Token (Name "terminator");
      Repeat (
        Token (Literal ";");
      );
      Repeat (
        Token (Name "when");
      );
      Opt (
        Token (Name "else");
      );
      Token (Literal "end");
    ];
  );
  "when",
  Some (
    Seq [
      Token (Literal "when");
      Token (Name "pattern");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "pattern");
        ];
      );
      Alt [|
        Token (Name "terminator");
        Token (Name "then");
      |];
    ];
  );
  "pattern",
  Some (
    Alt [|
      Token (Name "arg");
      Token (Name "splat_argument");
    |];
  );
  "if",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "statement");
      Alt [|
        Token (Name "terminator");
        Token (Name "then");
      |];
      Opt (
        Alt [|
          Token (Name "else");
          Token (Name "elsif");
        |];
      );
      Token (Literal "end");
    ];
  );
  "unless",
  Some (
    Seq [
      Token (Literal "unless");
      Token (Name "statement");
      Alt [|
        Token (Name "terminator");
        Token (Name "then");
      |];
      Opt (
        Alt [|
          Token (Name "else");
          Token (Name "elsif");
        |];
      );
      Token (Literal "end");
    ];
  );
  "elsif",
  Some (
    Seq [
      Token (Literal "elsif");
      Token (Name "statement");
      Alt [|
        Token (Name "terminator");
        Token (Name "then");
      |];
      Opt (
        Alt [|
          Token (Name "else");
          Token (Name "elsif");
        |];
      );
    ];
  );
  "else",
  Some (
    Seq [
      Token (Literal "else");
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Token (Name "statements");
      );
    ];
  );
  "then",
  Some (
    Alt [|
      Seq [
        Token (Name "terminator");
        Token (Name "statements");
      ];
      Seq [
        Opt (
          Token (Name "terminator");
        );
        Token (Literal "then");
        Opt (
          Token (Name "statements");
        );
      ];
    |];
  );
  "begin",
  Some (
    Seq [
      Token (Literal "begin");
      Opt (
        Token (Name "terminator");
      );
      Token (Name "body_statement");
    ];
  );
  "ensure",
  Some (
    Seq [
      Token (Literal "ensure");
      Opt (
        Token (Name "statements");
      );
    ];
  );
  "rescue",
  Some (
    Seq [
      Token (Literal "rescue");
      Opt (
        Token (Name "exceptions");
      );
      Opt (
        Token (Name "exception_variable");
      );
      Alt [|
        Token (Name "terminator");
        Token (Name "then");
      |];
    ];
  );
  "exceptions",
  Some (
    Seq [
      Alt [|
        Token (Name "arg");
        Token (Name "splat_argument");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "arg");
            Token (Name "splat_argument");
          |];
        ];
      );
    ];
  );
  "exception_variable",
  Some (
    Seq [
      Token (Literal "=>");
      Token (Name "lhs");
    ];
  );
  "body_statement",
  Some (
    Seq [
      Opt (
        Token (Name "statements");
      );
      Repeat (
        Alt [|
          Token (Name "rescue");
          Token (Name "else");
          Token (Name "ensure");
        |];
      );
      Token (Literal "end");
    ];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "command_binary");
      Token (Name "command_assignment");
      Token (Name "command_operator_assignment");
      Token (Name "command_call");
      Token (Name "return_command");
      Token (Name "yield_command");
      Token (Name "break_command");
      Token (Name "next_command");
      Token (Name "arg");
    |];
  );
  "arg",
  Some (
    Alt [|
      Token (Name "primary");
      Token (Name "assignment");
      Token (Name "operator_assignment");
      Token (Name "conditional");
      Token (Name "range");
      Token (Name "binary");
      Token (Name "unary");
    |];
  );
  "primary",
  Some (
    Alt [|
      Token (Name "parenthesized_statements");
      Token (Name "lhs");
      Token (Name "array");
      Token (Name "string_array");
      Token (Name "symbol_array");
      Token (Name "hash");
      Token (Name "subshell");
      Token (Name "symbol");
      Token (Name "integer");
      Token (Name "float");
      Token (Name "complex");
      Token (Name "rational");
      Token (Name "string");
      Token (Name "character");
      Token (Name "chained_string");
      Token (Name "regex");
      Token (Name "lambda");
      Token (Name "method");
      Token (Name "singleton_method");
      Token (Name "class");
      Token (Name "singleton_class");
      Token (Name "module");
      Token (Name "begin");
      Token (Name "while");
      Token (Name "until");
      Token (Name "if");
      Token (Name "unless");
      Token (Name "for");
      Token (Name "case");
      Token (Name "return");
      Token (Name "yield");
      Token (Name "break");
      Token (Name "next");
      Token (Name "redo");
      Token (Name "retry");
      Token (Name "parenthesized_unary");
      Token (Name "unary_literal");
      Token (Name "heredoc_beginning");
    |];
  );
  "parenthesized_statements",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Name "statements");
      );
      Token (Literal ")");
    ];
  );
  "element_reference",
  Some (
    Seq [
      Token (Name "primary");
      Token (Literal "[");
      Opt (
        Token (Name "argument_list_with_trailing_comma");
      );
      Token (Literal "]");
    ];
  );
  "scope_resolution",
  Some (
    Seq [
      Alt [|
        Token (Literal "::");
        Seq [
          Token (Name "primary");
          Token (Literal "::");
        ];
      |];
      Alt [|
        Token (Name "identifier");
        Token (Name "constant");
      |];
    ];
  );
  "call",
  Some (
    Seq [
      Token (Name "primary");
      Alt [|
        Token (Literal ".");
        Token (Literal "&.");
      |];
      Alt [|
        Token (Name "identifier");
        Token (Name "operator");
        Token (Name "constant");
        Token (Name "argument_list");
      |];
    ];
  );
  "command_call",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "scope_resolution");
          Token (Name "call");
        |];
        Token (Name "command_argument_list");
      ];
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "scope_resolution");
          Token (Name "call");
        |];
        Token (Name "command_argument_list");
        Token (Name "block");
      ];
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "scope_resolution");
          Token (Name "call");
        |];
        Token (Name "command_argument_list");
        Token (Name "do_block");
      ];
    |];
  );
  "method_call",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "scope_resolution");
          Token (Name "call");
        |];
        Token (Name "argument_list");
      ];
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "scope_resolution");
          Token (Name "call");
        |];
        Token (Name "argument_list");
        Token (Name "block");
      ];
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "scope_resolution");
          Token (Name "call");
        |];
        Token (Name "argument_list");
        Token (Name "do_block");
      ];
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "scope_resolution");
          Token (Name "call");
        |];
        Token (Name "block");
      ];
      Seq [
        Alt [|
          Token (Name "variable");
          Token (Name "scope_resolution");
          Token (Name "call");
        |];
        Token (Name "do_block");
      ];
    |];
  );
  "command_argument_list",
  Some (
    Alt [|
      Seq [
        Token (Name "argument");
        Repeat (
          Seq [
            Token (Literal ",");
            Token (Name "argument");
          ];
        );
      ];
      Token (Name "command_call");
    |];
  );
  "argument_list",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Token (Name "argument_list_with_trailing_comma");
      );
      Token (Literal ")");
    ];
  );
  "argument_list_with_trailing_comma",
  Some (
    Seq [
      Token (Name "argument");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "argument");
        ];
      );
      Opt (
        Token (Literal ",");
      );
    ];
  );
  "argument",
  Some (
    Alt [|
      Token (Name "arg");
      Token (Name "splat_argument");
      Token (Name "hash_splat_argument");
      Token (Name "block_argument");
      Token (Name "pair");
    |];
  );
  "splat_argument",
  Some (
    Seq [
      Token (Name "splat_star");
      Token (Name "arg");
    ];
  );
  "hash_splat_argument",
  Some (
    Seq [
      Token (Literal "**");
      Token (Name "arg");
    ];
  );
  "block_argument",
  Some (
    Seq [
      Token (Name "block_ampersand");
      Token (Name "arg");
    ];
  );
  "do_block",
  Some (
    Seq [
      Token (Literal "do");
      Opt (
        Token (Name "terminator");
      );
      Opt (
        Seq [
          Token (Name "block_parameters");
          Opt (
            Token (Name "terminator");
          );
        ];
      );
      Token (Name "body_statement");
    ];
  );
  "block",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Token (Name "block_parameters");
      );
      Opt (
        Token (Name "statements");
      );
      Token (Literal "}");
    ];
  );
  "assignment",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "lhs");
          Token (Name "left_assignment_list");
        |];
        Token (Literal "=");
        Alt [|
          Token (Name "arg");
          Token (Name "splat_argument");
          Token (Name "right_assignment_list");
        |];
      ];
    |];
  );
  "command_assignment",
  Some (
    Alt [|
      Seq [
        Alt [|
          Token (Name "lhs");
          Token (Name "left_assignment_list");
        |];
        Token (Literal "=");
        Token (Name "expression");
      ];
    |];
  );
  "operator_assignment",
  Some (
    Seq [
      Token (Name "lhs");
      Alt [|
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "*=");
        Token (Literal "**=");
        Token (Literal "/=");
        Token (Literal "||=");
        Token (Literal "|=");
        Token (Literal "&&=");
        Token (Literal "&=");
        Token (Literal "%=");
        Token (Literal ">>=");
        Token (Literal "<<=");
        Token (Literal "^=");
      |];
      Token (Name "arg");
    ];
  );
  "command_operator_assignment",
  Some (
    Seq [
      Token (Name "lhs");
      Alt [|
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "*=");
        Token (Literal "**=");
        Token (Literal "/=");
        Token (Literal "||=");
        Token (Literal "|=");
        Token (Literal "&&=");
        Token (Literal "&=");
        Token (Literal "%=");
        Token (Literal ">>=");
        Token (Literal "<<=");
        Token (Literal "^=");
      |];
      Token (Name "expression");
    ];
  );
  "conditional",
  Some (
    Seq [
      Token (Name "arg");
      Token (Literal "?");
      Token (Name "arg");
      Token (Literal ":");
      Token (Name "arg");
    ];
  );
  "range",
  Some (
    Seq [
      Token (Name "arg");
      Alt [|
        Token (Literal "..");
        Token (Literal "...");
      |];
      Token (Name "arg");
    ];
  );
  "binary",
  Some (
    Alt [|
      Seq [
        Token (Name "arg");
        Token (Literal "and");
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Token (Literal "or");
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Token (Literal "||");
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Token (Literal "&&");
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Alt [|
          Token (Literal "<<");
          Token (Literal ">>");
        |];
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Alt [|
          Token (Literal "<");
          Token (Literal "<=");
          Token (Literal ">");
          Token (Literal ">=");
        |];
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Token (Literal "&");
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Alt [|
          Token (Literal "^");
          Token (Literal "|");
        |];
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Alt [|
          Token (Literal "+");
          Token (Name "binary_minus");
        |];
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Alt [|
          Token (Literal "/");
          Token (Literal "%");
          Token (Name "binary_star");
        |];
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Alt [|
          Token (Literal "==");
          Token (Literal "!=");
          Token (Literal "===");
          Token (Literal "<=>");
          Token (Literal "=~");
          Token (Literal "!~");
        |];
        Token (Name "arg");
      ];
      Seq [
        Token (Name "arg");
        Token (Literal "**");
        Token (Name "arg");
      ];
    |];
  );
  "command_binary",
  Some (
    Seq [
      Token (Name "expression");
      Alt [|
        Token (Literal "or");
        Token (Literal "and");
      |];
      Token (Name "expression");
    ];
  );
  "unary",
  Some (
    Alt [|
      Seq [
        Token (Literal "defined?");
        Token (Name "arg");
      ];
      Seq [
        Token (Literal "not");
        Token (Name "arg");
      ];
      Seq [
        Alt [|
          Token (Name "unary_minus");
          Token (Literal "+");
        |];
        Token (Name "arg");
      ];
      Seq [
        Alt [|
          Token (Literal "!");
          Token (Literal "~");
        |];
        Token (Name "arg");
      ];
    |];
  );
  "parenthesized_unary",
  Some (
    Seq [
      Alt [|
        Token (Literal "defined?");
        Token (Literal "not");
      |];
      Token (Name "parenthesized_statements");
    ];
  );
  "right_assignment_list",
  Some (
    Seq [
      Alt [|
        Token (Name "arg");
        Token (Name "splat_argument");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "arg");
            Token (Name "splat_argument");
          |];
        ];
      );
    ];
  );
  "left_assignment_list", Some (Token (Name "mlhs"););
  "mlhs",
  Some (
    Seq [
      Alt [|
        Token (Name "lhs");
        Token (Name "rest_assignment");
        Token (Name "destructured_left_assignment");
      |];
      Repeat (
        Seq [
          Token (Literal ",");
          Alt [|
            Token (Name "lhs");
            Token (Name "rest_assignment");
            Token (Name "destructured_left_assignment");
          |];
        ];
      );
      Opt (
        Token (Literal ",");
      );
    ];
  );
  "destructured_left_assignment",
  Some (
    Seq [
      Token (Literal "(");
      Token (Name "mlhs");
      Token (Literal ")");
    ];
  );
  "rest_assignment",
  Some (
    Seq [
      Token (Literal "*");
      Opt (
        Token (Name "lhs");
      );
    ];
  );
  "lhs",
  Some (
    Alt [|
      Token (Name "variable");
      Token (Name "true");
      Token (Name "false");
      Token (Name "nil");
      Token (Name "scope_resolution");
      Token (Name "element_reference");
      Token (Name "call");
      Token (Name "method_call");
    |];
  );
  "method_name",
  Some (
    Alt [|
      Token (Name "identifier");
      Token (Name "constant");
      Token (Name "setter");
      Token (Name "symbol");
      Token (Name "operator");
      Token (Name "instance_variable");
      Token (Name "class_variable");
      Token (Name "global_variable");
    |];
  );
  "undef",
  Some (
    Seq [
      Token (Literal "undef");
      Token (Name "method_name");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "method_name");
        ];
      );
    ];
  );
  "alias",
  Some (
    Seq [
      Token (Literal "alias");
      Token (Name "method_name");
      Token (Name "method_name");
    ];
  );
  "chained_string",
  Some (
    Seq [
      Token (Name "string");
      Repeat1 (
        Token (Name "string");
      );
    ];
  );
  "interpolation",
  Some (
    Seq [
      Token (Literal "#{");
      Token (Name "statement");
      Token (Literal "}");
    ];
  );
  "string",
  Some (
    Seq [
      Token (Name "string_start");
      Opt (
        Token (Name "literal_contents");
      );
      Token (Name "string_end");
    ];
  );
  "subshell",
  Some (
    Seq [
      Token (Name "subshell_start");
      Opt (
        Token (Name "literal_contents");
      );
      Token (Name "string_end");
    ];
  );
  "string_array",
  Some (
    Seq [
      Token (Name "string_array_start");
      Opt (
        Nothing;
      );
      Opt (
        Seq [
          Token (Name "literal_contents");
          Repeat (
            Seq [
              Nothing;
              Token (Name "literal_contents");
            ];
          );
        ];
      );
      Opt (
        Nothing;
      );
      Token (Name "string_end");
    ];
  );
  "symbol_array",
  Some (
    Seq [
      Token (Name "symbol_array_start");
      Opt (
        Nothing;
      );
      Opt (
        Seq [
          Token (Name "literal_contents");
          Repeat (
            Seq [
              Nothing;
              Token (Name "literal_contents");
            ];
          );
        ];
      );
      Opt (
        Nothing;
      );
      Token (Name "string_end");
    ];
  );
  "symbol",
  Some (
    Alt [|
      Token (Name "simple_symbol");
      Seq [
        Token (Name "symbol_start");
        Opt (
          Token (Name "literal_contents");
        );
        Token (Name "string_end");
      ];
    |];
  );
  "regex",
  Some (
    Seq [
      Token (Name "regex_start");
      Opt (
        Token (Name "literal_contents");
      );
      Token (Name "string_end");
    ];
  );
  "literal_contents",
  Some (
    Repeat1 (
      Alt [|
        Token (Name "string_content");
        Token (Name "interpolation");
        Token (Name "escape_sequence");
      |];
    );
  );
  "array",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Token (Name "argument_list_with_trailing_comma");
      );
      Token (Literal "]");
    ];
  );
  "hash",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "pair");
            Token (Name "hash_splat_argument");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "pair");
                Token (Name "hash_splat_argument");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "pair",
  Some (
    Alt [|
      Seq [
        Token (Name "arg");
        Token (Literal "=>");
        Token (Name "arg");
      ];
      Seq [
        Alt [|
          Token (Name "identifier_hash_key");
          Token (Name "identifier");
          Token (Name "constant");
          Token (Name "string");
        |];
        Token (Literal ":");
        Token (Name "arg");
      ];
    |];
  );
  "lambda",
  Some (
    Seq [
      Token (Literal "->");
      Opt (
        Alt [|
          Token (Name "parameters");
          Token (Name "bare_parameters");
        |];
      );
      Alt [|
        Token (Name "block");
        Token (Name "do_block");
      |];
    ];
  );
  "program",
  Some (
    Seq [
      Opt (
        Token (Name "statements");
      );
      Opt (
        Seq [
          Token (Literal "__END__");
          Token (Name "line_break");
          Token (Name "uninterpreted");
        ];
      );
    ];
  );
  "heredoc_body",
  Some (
    Seq [
      Token (Name "heredoc_body_start");
      Repeat (
        Alt [|
          Token (Name "heredoc_content");
          Token (Name "interpolation");
          Token (Name "escape_sequence");
        |];
      );
      Token (Name "heredoc_end");
    ];
  );
]

let trans_uninterpreted ((kind, body) : mt) : CST.uninterpreted =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_self ((kind, body) : mt) : CST.self =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_binary_star ((kind, body) : mt) : CST.binary_star =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_singleton_class_left_angle_left_langle ((kind, body) : mt) : CST.singleton_class_left_angle_left_langle =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_instance_variable ((kind, body) : mt) : CST.instance_variable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_binary_minus ((kind, body) : mt) : CST.binary_minus =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_simple_symbol ((kind, body) : mt) : CST.simple_symbol =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_complex ((kind, body) : mt) : CST.complex =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_character ((kind, body) : mt) : CST.character =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `False_false (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `False_FALSE (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_subshell_start ((kind, body) : mt) : CST.subshell_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_regex_start ((kind, body) : mt) : CST.regex_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_constant ((kind, body) : mt) : CST.constant =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_symbol_start ((kind, body) : mt) : CST.symbol_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unary_minus ((kind, body) : mt) : CST.unary_minus =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_block_ampersand ((kind, body) : mt) : CST.block_ampersand =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_class_variable ((kind, body) : mt) : CST.class_variable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_array_start ((kind, body) : mt) : CST.string_array_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_splat_star ((kind, body) : mt) : CST.splat_star =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_integer ((kind, body) : mt) : CST.integer =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_content ((kind, body) : mt) : CST.heredoc_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_super ((kind, body) : mt) : CST.super =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_end ((kind, body) : mt) : CST.string_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_line_break ((kind, body) : mt) : CST.line_break =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_string_content ((kind, body) : mt) : CST.string_content =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_end ((kind, body) : mt) : CST.heredoc_end =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_nil ((kind, body) : mt) : CST.nil =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Nil_nil (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Nil_NIL (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_heredoc_beginning ((kind, body) : mt) : CST.heredoc_beginning =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_float_ ((kind, body) : mt) : CST.float_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_global_variable ((kind, body) : mt) : CST.global_variable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_symbol_array_start ((kind, body) : mt) : CST.symbol_array_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_heredoc_body_start ((kind, body) : mt) : CST.heredoc_body_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_operator ((kind, body) : mt) : CST.operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Op_DOTDOT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Op_BAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Op_HAT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Op_AMP (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Op_LTEQGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Op_EQEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Op_EQEQEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Op_EQTILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Op_GT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Op_GTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Op_LT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Op_LTEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Op_PLUS (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Op_DASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Op_STAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Op_SLASH (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Op_PERC (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Op_BANG (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Op_BANGTILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Op_STARSTAR (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Op_LTLT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Op_GTGT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `Op_TILDE (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (23, v) ->
          `Op_PLUSAT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (24, v) ->
          `Op_DASHAT (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (25, v) ->
          `Op_LBRACKRBRACK (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (26, v) ->
          `Op_LBRACKRBRACKEQ (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (27, v) ->
          `Op_BQUOT (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `True_true (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `True_TRUE (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_start ((kind, body) : mt) : CST.string_start =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier_hash_key ((kind, body) : mt) : CST.identifier_hash_key =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_rational ((kind, body) : mt) : CST.rational =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_integer (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_terminator ((kind, body) : mt) : CST.terminator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Term_line_brk (
            trans_line_break (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Term_SEMI (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_hash_splat_parameter ((kind, body) : mt) : CST.hash_splat_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_splat_parameter ((kind, body) : mt) : CST.splat_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_setter ((kind, body) : mt) : CST.setter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_block_parameter ((kind, body) : mt) : CST.block_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_identifier (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_unary_literal ((kind, body) : mt) : CST.unary_literal =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Un_minus (
                  trans_unary_minus (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Int (
                  trans_integer (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Float (
                  trans_float_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_variable ((kind, body) : mt) : CST.variable =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Self (
            trans_self (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Super (
            trans_super (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Inst_var (
            trans_instance_variable (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Class_var (
            trans_class_variable (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Glob_var (
            trans_global_variable (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Cst (
            trans_constant (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_do_ ((kind, body) : mt) : CST.do_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Do_do (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Do_term (
            trans_terminator (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_statements ((kind, body) : mt) : CST.statements =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Stmts_rep1_choice_stmt_term_opt_stmt (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.repeat1
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Stmt_term (
                            (match v with
                            | Seq [v0; v1] ->
                                (
                                  trans_statement (Run.matcher_token v0),
                                  trans_terminator (Run.matcher_token v1)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (1, v) ->
                          `Empty_stmt (
                            trans_empty_statement (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v0
                  ,
                  Run.opt
                    (fun v -> trans_statement (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Stmts_stmt (
            trans_statement (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_begin_block ((kind, body) : mt) : CST.begin_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_end_block ((kind, body) : mt) : CST.end_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statement ((kind, body) : mt) : CST.statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Stmt_undef (
            trans_undef (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Stmt_alias (
            trans_alias (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Stmt_if_modi (
            trans_if_modifier (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Stmt_unle_modi (
            trans_unless_modifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Stmt_while_modi (
            trans_while_modifier (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Stmt_until_modi (
            trans_until_modifier (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Stmt_resc_modi (
            trans_rescue_modifier (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Stmt_begin_blk (
            trans_begin_block (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Stmt_end_blk (
            trans_end_block (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Stmt_exp (
            trans_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_ ((kind, body) : mt) : CST.method_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_method_rest (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_singleton_method ((kind, body) : mt) : CST.singleton_method =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Var (
                  trans_variable (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `LPAR_arg_RPAR (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_arg (Run.matcher_token v1),
                        Run.trans_token (Run.matcher_token v2)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `DOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `COLONCOLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_method_rest (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_rest ((kind, body) : mt) : CST.method_rest =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_method_name (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Params_opt_term (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_parameters (Run.matcher_token v0),
                        Run.opt
                          (fun v -> trans_terminator (Run.matcher_token v))
                          v1
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_bare_params_term (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.opt
                          (fun v -> trans_bare_parameters (Run.matcher_token v))
                          v0
                        ,
                        trans_terminator (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            trans_body_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parameters ((kind, body) : mt) : CST.parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_formal_parameter (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_formal_parameter (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_bare_parameters ((kind, body) : mt) : CST.bare_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_simple_formal_parameter (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_formal_parameter (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block_parameters ((kind, body) : mt) : CST.block_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_formal_parameter (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_formal_parameter (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_identifier (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v2
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_formal_parameter ((kind, body) : mt) : CST.formal_parameter =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Form_param_simple_form_param (
            trans_simple_formal_parameter (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Form_param_params (
            trans_parameters (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_simple_formal_parameter ((kind, body) : mt) : CST.simple_formal_parameter =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Simple_form_param_id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Simple_form_param_splat_param (
            trans_splat_parameter (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Simple_form_param_hash_splat_param (
            trans_hash_splat_parameter (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Simple_form_param_blk_param (
            trans_block_parameter (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Simple_form_param_kw_param (
            trans_keyword_parameter (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Simple_form_param_opt_param (
            trans_optional_parameter (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_keyword_parameter ((kind, body) : mt) : CST.keyword_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_arg (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_optional_parameter ((kind, body) : mt) : CST.optional_parameter =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_arg (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_ ((kind, body) : mt) : CST.class_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Cst (
                  trans_constant (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scope_resol (
                  trans_scope_resolution (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_superclass (Run.matcher_token v))
              v2
            ,
            trans_terminator (Run.matcher_token v3),
            trans_body_statement (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_superclass ((kind, body) : mt) : CST.superclass =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_arg (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_singleton_class ((kind, body) : mt) : CST.singleton_class =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_singleton_class_left_angle_left_langle (Run.matcher_token v1)
            ,
            trans_arg (Run.matcher_token v2),
            trans_terminator (Run.matcher_token v3),
            trans_body_statement (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_module_ ((kind, body) : mt) : CST.module_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Cst (
                  trans_constant (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Scope_resol (
                  trans_scope_resolution (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Term_body_stmt (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_terminator (Run.matcher_token v0),
                        trans_body_statement (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `End (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_command ((kind, body) : mt) : CST.return_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_command_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_yield_command ((kind, body) : mt) : CST.yield_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_command_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_break_command ((kind, body) : mt) : CST.break_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_command_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_next_command ((kind, body) : mt) : CST.next_command =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_command_argument_list (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return ((kind, body) : mt) : CST.return =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_argument_list (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_yield ((kind, body) : mt) : CST.yield =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_argument_list (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_break ((kind, body) : mt) : CST.break =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_argument_list (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_next ((kind, body) : mt) : CST.next =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_argument_list (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_redo ((kind, body) : mt) : CST.redo =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_argument_list (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_retry ((kind, body) : mt) : CST.retry =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_argument_list (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_modifier ((kind, body) : mt) : CST.if_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_statement (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unless_modifier ((kind, body) : mt) : CST.unless_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_statement (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_modifier ((kind, body) : mt) : CST.while_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_statement (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_until_modifier ((kind, body) : mt) : CST.until_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_statement (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_rescue_modifier ((kind, body) : mt) : CST.rescue_modifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_statement (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_ ((kind, body) : mt) : CST.while_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_arg (Run.matcher_token v1),
            trans_do_ (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_until ((kind, body) : mt) : CST.until =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_arg (Run.matcher_token v1),
            trans_do_ (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_ ((kind, body) : mt) : CST.for_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_mlhs (Run.matcher_token v1),
            trans_in_ (Run.matcher_token v2),
            trans_do_ (Run.matcher_token v3),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v4
            ,
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_in_ ((kind, body) : mt) : CST.in_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_arg (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_case ((kind, body) : mt) : CST.case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_arg (Run.matcher_token v))
              v1
            ,
            trans_terminator (Run.matcher_token v2),
            Run.repeat
              (fun v -> Run.trans_token (Run.matcher_token v))
              v3
            ,
            Run.repeat
              (fun v -> trans_when_ (Run.matcher_token v))
              v4
            ,
            Run.opt
              (fun v -> trans_else_ (Run.matcher_token v))
              v5
            ,
            Run.trans_token (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_when_ ((kind, body) : mt) : CST.when_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_pattern (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_pattern (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Term (
                  trans_terminator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Then (
                  trans_then_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pattern ((kind, body) : mt) : CST.pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pat_arg (
            trans_arg (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_splat_arg (
            trans_splat_argument (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_ ((kind, body) : mt) : CST.if_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Term (
                  trans_terminator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Then (
                  trans_then_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Else (
                      trans_else_ (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Elsif (
                      trans_elsif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unless ((kind, body) : mt) : CST.unless =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Term (
                  trans_terminator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Then (
                  trans_then_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Else (
                      trans_else_ (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Elsif (
                      trans_elsif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_elsif ((kind, body) : mt) : CST.elsif =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Term (
                  trans_terminator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Then (
                  trans_then_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Else (
                      trans_else_ (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Elsif (
                      trans_elsif (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_ ((kind, body) : mt) : CST.else_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_then_ ((kind, body) : mt) : CST.then_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Then_term_stmts (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_terminator (Run.matcher_token v0),
                  trans_statements (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Then_opt_term_then_opt_stmts (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.opt
                    (fun v -> trans_terminator (Run.matcher_token v))
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  Run.opt
                    (fun v -> trans_statements (Run.matcher_token v))
                    v2
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_begin_ ((kind, body) : mt) : CST.begin_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            trans_body_statement (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ensure ((kind, body) : mt) : CST.ensure =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_rescue ((kind, body) : mt) : CST.rescue =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_exceptions (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_exception_variable (Run.matcher_token v))
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Term (
                  trans_terminator (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Then (
                  trans_then_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_exceptions ((kind, body) : mt) : CST.exceptions =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Arg (
                  trans_arg (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Splat_arg (
                  trans_splat_argument (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Arg (
                            trans_arg (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Splat_arg (
                            trans_splat_argument (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_exception_variable ((kind, body) : mt) : CST.exception_variable =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_lhs (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_body_statement ((kind, body) : mt) : CST.body_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v0
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Resc (
                      trans_rescue (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Else (
                      trans_else_ (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Ensu (
                      trans_ensure (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_cmd_bin (
            trans_command_binary (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Exp_cmd_assign (
            trans_command_assignment (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Exp_cmd_op_assign (
            trans_command_operator_assignment (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Exp_cmd_call (
            trans_command_call (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Exp_ret_cmd (
            trans_return_command (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Exp_yield_cmd (
            trans_yield_command (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Exp_brk_cmd (
            trans_break_command (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Exp_next_cmd (
            trans_next_command (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Exp_arg (
            trans_arg (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arg ((kind, body) : mt) : CST.arg =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Arg_prim (
            trans_primary (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Arg_assign (
            trans_assignment (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Arg_op_assign (
            trans_operator_assignment (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Arg_cond (
            trans_conditional (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Arg_range (
            trans_range (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Arg_bin (
            trans_binary (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Arg_un (
            trans_unary (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_primary ((kind, body) : mt) : CST.primary =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Prim_paren_stmts (
            trans_parenthesized_statements (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Prim_lhs (
            trans_lhs (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Prim_array (
            trans_array_ (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Prim_str_array (
            trans_string_array (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Prim_symb_array (
            trans_symbol_array (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Prim_hash (
            trans_hash (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Prim_subs (
            trans_subshell (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Prim_symb (
            trans_symbol (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Prim_int (
            trans_integer (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Prim_float (
            trans_float_ (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Prim_comp (
            trans_complex (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Prim_rati (
            trans_rational (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `Prim_str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Prim_char (
            trans_character (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Prim_chai_str (
            trans_chained_string (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Prim_regex (
            trans_regex (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Prim_lamb (
            trans_lambda (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Prim_meth (
            trans_method_ (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Prim_sing_meth (
            trans_singleton_method (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Prim_class (
            trans_class_ (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Prim_sing_class (
            trans_singleton_class (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Prim_modu (
            trans_module_ (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `Prim_begin (
            trans_begin_ (Run.matcher_token v)
          )
      | Alt (23, v) ->
          `Prim_while (
            trans_while_ (Run.matcher_token v)
          )
      | Alt (24, v) ->
          `Prim_until (
            trans_until (Run.matcher_token v)
          )
      | Alt (25, v) ->
          `Prim_if (
            trans_if_ (Run.matcher_token v)
          )
      | Alt (26, v) ->
          `Prim_unle (
            trans_unless (Run.matcher_token v)
          )
      | Alt (27, v) ->
          `Prim_for (
            trans_for_ (Run.matcher_token v)
          )
      | Alt (28, v) ->
          `Prim_case (
            trans_case (Run.matcher_token v)
          )
      | Alt (29, v) ->
          `Prim_ret (
            trans_return (Run.matcher_token v)
          )
      | Alt (30, v) ->
          `Prim_yield (
            trans_yield (Run.matcher_token v)
          )
      | Alt (31, v) ->
          `Prim_brk (
            trans_break (Run.matcher_token v)
          )
      | Alt (32, v) ->
          `Prim_next (
            trans_next (Run.matcher_token v)
          )
      | Alt (33, v) ->
          `Prim_redo (
            trans_redo (Run.matcher_token v)
          )
      | Alt (34, v) ->
          `Prim_retry (
            trans_retry (Run.matcher_token v)
          )
      | Alt (35, v) ->
          `Prim_paren_un (
            trans_parenthesized_unary (Run.matcher_token v)
          )
      | Alt (36, v) ->
          `Prim_un_lit (
            trans_unary_literal (Run.matcher_token v)
          )
      | Alt (37, v) ->
          `Prim_here_begin (
            trans_heredoc_beginning (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_statements ((kind, body) : mt) : CST.parenthesized_statements =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_element_reference ((kind, body) : mt) : CST.element_reference =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            trans_primary (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                trans_argument_list_with_trailing_comma (Run.matcher_token v)
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_scope_resolution ((kind, body) : mt) : CST.scope_resolution =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `COLONCOLON (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prim_COLONCOLON (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_primary (Run.matcher_token v0),
                        Run.trans_token (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Cst (
                  trans_constant (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call ((kind, body) : mt) : CST.call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_primary (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `DOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `AMPDOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Op (
                  trans_operator (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Cst (
                  trans_constant (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Arg_list (
                  trans_argument_list (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_command_call ((kind, body) : mt) : CST.command_call =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Cmd_call_choice_var_cmd_arg_list (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scope_resol (
                        trans_scope_resolution (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Call (
                        trans_call (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_command_argument_list (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Cmd_call_choice_var_cmd_arg_list_blk (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scope_resol (
                        trans_scope_resolution (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Call (
                        trans_call (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_command_argument_list (Run.matcher_token v1),
                  trans_block (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Cmd_call_choice_var_cmd_arg_list_do_blk (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scope_resol (
                        trans_scope_resolution (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Call (
                        trans_call (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_command_argument_list (Run.matcher_token v1),
                  trans_do_block (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_call ((kind, body) : mt) : CST.method_call =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Meth_call_choice_var_arg_list (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scope_resol (
                        trans_scope_resolution (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Call (
                        trans_call (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_argument_list (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Meth_call_choice_var_arg_list_blk (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scope_resol (
                        trans_scope_resolution (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Call (
                        trans_call (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_argument_list (Run.matcher_token v1),
                  trans_block (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Meth_call_choice_var_arg_list_do_blk (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scope_resol (
                        trans_scope_resolution (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Call (
                        trans_call (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_argument_list (Run.matcher_token v1),
                  trans_do_block (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Meth_call_choice_var_blk (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scope_resol (
                        trans_scope_resolution (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Call (
                        trans_call (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_block (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Meth_call_choice_var_do_blk (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Var (
                        trans_variable (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Scope_resol (
                        trans_scope_resolution (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Call (
                        trans_call (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_do_block (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_command_argument_list ((kind, body) : mt) : CST.command_argument_list =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Cmd_arg_list_arg_rep_COMMA_arg (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_argument (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            trans_argument (Run.matcher_token v1)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Cmd_arg_list_cmd_call (
            trans_command_call (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument_list ((kind, body) : mt) : CST.argument_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_argument_list_with_trailing_comma (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument_list_with_trailing_comma ((kind, body) : mt) : CST.argument_list_with_trailing_comma =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_argument (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_argument (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_argument ((kind, body) : mt) : CST.argument =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Arg_arg (
            trans_arg (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Arg_splat_arg (
            trans_splat_argument (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Arg_hash_splat_arg (
            trans_hash_splat_argument (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Arg_blk_arg (
            trans_block_argument (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Arg_pair (
            trans_pair (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_splat_argument ((kind, body) : mt) : CST.splat_argument =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_splat_star (Run.matcher_token v0),
            trans_arg (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_hash_splat_argument ((kind, body) : mt) : CST.hash_splat_argument =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_arg (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block_argument ((kind, body) : mt) : CST.block_argument =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_block_ampersand (Run.matcher_token v0),
            trans_arg (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_block ((kind, body) : mt) : CST.do_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_terminator (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_block_parameters (Run.matcher_token v0),
                      Run.opt
                        (fun v -> trans_terminator (Run.matcher_token v))
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            trans_body_statement (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_block ((kind, body) : mt) : CST.block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_block_parameters (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment ((kind, body) : mt) : CST.assignment =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_lhs_EQ_choice_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Lhs (
                        trans_lhs (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Left_assign_list (
                        trans_left_assignment_list (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Arg (
                        trans_arg (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Splat_arg (
                        trans_splat_argument (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Right_assign_list (
                        trans_right_assignment_list (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_command_assignment ((kind, body) : mt) : CST.command_assignment =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_lhs_EQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Lhs (
                        trans_lhs (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Left_assign_list (
                        trans_left_assignment_list (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_operator_assignment ((kind, body) : mt) : CST.operator_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_lhs (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `STARSTAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `BARBAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `AMPAMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_arg (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_command_operator_assignment ((kind, body) : mt) : CST.command_operator_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_lhs (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `STARSTAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `BARBAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `AMPAMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_conditional ((kind, body) : mt) : CST.conditional =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_arg (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_arg (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_arg (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_range ((kind, body) : mt) : CST.range =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_arg (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `DOTDOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DOTDOTDOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_arg (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary ((kind, body) : mt) : CST.binary =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Bin_arg_and_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Bin_arg_or_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Bin_arg_BARBAR_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Bin_arg_AMPAMP_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Bin_arg_choice_LTLT_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `LTLT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `GTGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Bin_arg_choice_LT_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Bin_arg_AMP_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Bin_arg_choice_HAT_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `HAT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Bin_arg_choice_PLUS_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Bin_minus (
                        trans_binary_minus (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Bin_arg_choice_SLASH_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `SLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `PERC (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Bin_star (
                        trans_binary_star (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Bin_arg_choice_EQEQ_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `EQEQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `LTEQGT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `EQTILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `BANGTILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Bin_arg_STARSTAR_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_command_binary ((kind, body) : mt) : CST.command_binary =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Or (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `And (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary ((kind, body) : mt) : CST.unary =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Un_defi_arg (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_arg (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Un_not_arg (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_arg (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Un_choice_un_minus_arg (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Un_minus (
                        trans_unary_minus (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_arg (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Un_choice_BANG_arg (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `BANG (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `TILDE (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_arg (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_unary ((kind, body) : mt) : CST.parenthesized_unary =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Defi (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Not (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_parenthesized_statements (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_right_assignment_list ((kind, body) : mt) : CST.right_assignment_list =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Arg (
                  trans_arg (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Splat_arg (
                  trans_splat_argument (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Arg (
                            trans_arg (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Splat_arg (
                            trans_splat_argument (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_left_assignment_list ((kind, body) : mt) : CST.left_assignment_list =
  match body with
  | Children v ->
      trans_mlhs (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_mlhs ((kind, body) : mt) : CST.mlhs =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Lhs (
                  trans_lhs (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Rest_assign (
                  trans_rest_assignment (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Dest_left_assign (
                  trans_destructured_left_assignment (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Lhs (
                            trans_lhs (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Rest_assign (
                            trans_rest_assignment (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Dest_left_assign (
                            trans_destructured_left_assignment (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_destructured_left_assignment ((kind, body) : mt) : CST.destructured_left_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_mlhs (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_rest_assignment ((kind, body) : mt) : CST.rest_assignment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_lhs (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lhs ((kind, body) : mt) : CST.lhs =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Var (
            trans_variable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `True (
            trans_true_ (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `False (
            trans_false_ (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Nil (
            trans_nil (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Scope_resol (
            trans_scope_resolution (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Elem_ref (
            trans_element_reference (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Call (
            trans_call (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Meth_call (
            trans_method_call (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_name ((kind, body) : mt) : CST.method_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Meth_name_id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Meth_name_cst (
            trans_constant (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Meth_name_sett (
            trans_setter (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Meth_name_symb (
            trans_symbol (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Meth_name_op (
            trans_operator (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Meth_name_inst_var (
            trans_instance_variable (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Meth_name_class_var (
            trans_class_variable (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Meth_name_glob_var (
            trans_global_variable (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_undef ((kind, body) : mt) : CST.undef =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_method_name (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_method_name (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_alias ((kind, body) : mt) : CST.alias =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_method_name (Run.matcher_token v1),
            trans_method_name (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_chained_string ((kind, body) : mt) : CST.chained_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_string_ (Run.matcher_token v0),
            Run.repeat1
              (fun v -> trans_string_ (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_interpolation ((kind, body) : mt) : CST.interpolation =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_string_start (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_literal_contents (Run.matcher_token v))
              v1
            ,
            trans_string_end (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subshell ((kind, body) : mt) : CST.subshell =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_subshell_start (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_literal_contents (Run.matcher_token v))
              v1
            ,
            trans_string_end (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_string_array ((kind, body) : mt) : CST.string_array =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_string_array_start (Run.matcher_token v0),
            Run.opt
              Run.nothing
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_literal_contents (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.nothing v0,
                                trans_literal_contents (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              Run.nothing
              v3
            ,
            trans_string_end (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_symbol_array ((kind, body) : mt) : CST.symbol_array =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_symbol_array_start (Run.matcher_token v0),
            Run.opt
              Run.nothing
              v1
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_literal_contents (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.nothing v0,
                                trans_literal_contents (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.opt
              Run.nothing
              v3
            ,
            trans_string_end (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_symbol ((kind, body) : mt) : CST.symbol =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Symb_simple_symb (
            trans_simple_symbol (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Symb_symb_start_opt_lit_content_str_end (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_symbol_start (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_literal_contents (Run.matcher_token v))
                    v1
                  ,
                  trans_string_end (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_regex ((kind, body) : mt) : CST.regex =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_regex_start (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_literal_contents (Run.matcher_token v))
              v1
            ,
            trans_string_end (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_literal_contents ((kind, body) : mt) : CST.literal_contents =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Alt (0, v) ->
              `Str_content (
                trans_string_content (Run.matcher_token v)
              )
          | Alt (1, v) ->
              `Interp (
                trans_interpolation (Run.matcher_token v)
              )
          | Alt (2, v) ->
              `Esc_seq (
                trans_escape_sequence (Run.matcher_token v)
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

and trans_array_ ((kind, body) : mt) : CST.array_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                trans_argument_list_with_trailing_comma (Run.matcher_token v)
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_hash ((kind, body) : mt) : CST.hash =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Pair (
                            trans_pair (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Hash_splat_arg (
                            trans_hash_splat_argument (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Pair (
                                      trans_pair (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Hash_splat_arg (
                                      trans_hash_splat_argument (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pair ((kind, body) : mt) : CST.pair =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Pair_arg_EQGT_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_arg (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Pair_choice_id_hash_key_COLON_arg (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `Id_hash_key (
                        trans_identifier_hash_key (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Cst (
                        trans_constant (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Str (
                        trans_string_ (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  trans_arg (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lambda ((kind, body) : mt) : CST.lambda =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Params (
                      trans_parameters (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Bare_params (
                      trans_bare_parameters (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Blk (
                  trans_block (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Do_blk (
                  trans_do_block (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_program ((kind, body) : mt) : CST.program =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_statements (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_line_break (Run.matcher_token v1),
                      trans_uninterpreted (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_heredoc_body ((kind, body) : mt) : CST.heredoc_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_heredoc_body_start (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Here_content (
                      trans_heredoc_content (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Interp (
                      trans_interpolation (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_heredoc_end (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let parse_input_tree input_tree =
  let root_node =
    Tree_sitter_parsing.root input_tree
    |> Run.remove_extras ~extras
  in
  let src = Tree_sitter_parsing.src input_tree in
  let match_node = Run.make_node_matcher children_regexps src in
  let matched_tree = match_node root_node in
  trans_program matched_tree

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

