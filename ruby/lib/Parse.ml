(* Generated by ocaml-tree-sitter. *)

(* Disable warnings against unused variables *)
[@@@warning "-26-27"]

open Tree_sitter_bindings
open Tree_sitter_run
open Tree_sitter_output_t
let get_loc x = Loc.({ start = x.start_pos; end_ = x.end_pos })

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_ruby"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let debug = ref false

let extras = [
  "comment";
  "heredoc_body";
]

let parse_input_tree input_tree : CST.program option =
  let root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let get_token x = Src_file.get_token src x.start_pos x.end_pos in

  if !debug then (
    Printf.printf "input from tree-sitter:\n";
    Tree_sitter_dump.to_stdout [root_node];
    flush stdout;
    Printf.printf "ocaml-tree-sitter trace:\n"
  );

  let get_token x =
    Src_file.get_token src x.start_pos x.end_pos in

  (* Parse a single node that has no children.
     We extract its location and source code (token). *)
  let _parse_leaf_rule type_ =
    Combine.parse_node (fun x ->
      if x.type_ = type_ then
        Some (get_loc x, get_token x)
      else
        None
    )
  in

  let cache_uninterpreted : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_uninterpreted : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_uninterpreted : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_uninterpreted
        (_parse_leaf_rule "uninterpreted") nodes
    )
  in
  let cache_self : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_self : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_self : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_self
        (_parse_leaf_rule "self") nodes
    )
  in
  let cache_binary_star : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_binary_star : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_binary_star : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_binary_star
        (_parse_leaf_rule "binary_star") nodes
    )
  in
  let cache_singleton_class_left_angle_left_langle : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_singleton_class_left_angle_left_langle : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_singleton_class_left_angle_left_langle : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_singleton_class_left_angle_left_langle
        (_parse_leaf_rule "singleton_class_left_angle_left_langle") nodes
    )
  in
  let cache_instance_variable : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_instance_variable : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_instance_variable : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_instance_variable
        (_parse_leaf_rule "instance_variable") nodes
    )
  in
  let cache_empty_statement : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_empty_statement : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_empty_statement : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_empty_statement
        (_parse_leaf_rule "empty_statement") nodes
    )
  in
  let cache_binary_minus : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_binary_minus : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_binary_minus : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_binary_minus
        (_parse_leaf_rule "binary_minus") nodes
    )
  in
  let cache_simple_symbol : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_simple_symbol : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_simple_symbol : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_simple_symbol
        (_parse_leaf_rule "simple_symbol") nodes
    )
  in
  let cache_complex : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_complex : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_complex : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_complex
        (_parse_leaf_rule "complex") nodes
    )
  in
  let cache_character : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_character : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_character : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_character
        (_parse_leaf_rule "character") nodes
    )
  in
  let cache_escape_sequence : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_escape_sequence : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_escape_sequence : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_escape_sequence
        (_parse_leaf_rule "escape_sequence") nodes
    )
  in
  let cache_false_ : CST.false_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_false_ _parse_tail : (CST.false_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_False_false nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "false")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`False_false (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_False_FALSE nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "FALSE")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`False_FALSE (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_False_false nodes with
            | Some _ as res -> res
            | None ->
                _parse_False_FALSE nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_false_ : CST.false_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_false_ nodes
    )
  in
  let parse_node_false_ : CST.false_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_false_ (
        Combine.parse_rule "false" parse_children_false_
      ) nodes
    )
  in
  let cache_subshell_start : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_subshell_start : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_subshell_start : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_subshell_start
        (_parse_leaf_rule "subshell_start") nodes
    )
  in
  let cache_regex_start : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_regex_start : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_regex_start : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_regex_start
        (_parse_leaf_rule "regex_start") nodes
    )
  in
  let cache_constant : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_constant : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_constant : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_constant
        (_parse_leaf_rule "constant") nodes
    )
  in
  let cache_symbol_start : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_symbol_start : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_symbol_start : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_symbol_start
        (_parse_leaf_rule "symbol_start") nodes
    )
  in
  let cache_unary_minus : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_unary_minus : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_unary_minus : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_unary_minus
        (_parse_leaf_rule "unary_minus") nodes
    )
  in
  let cache_block_ampersand : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_block_ampersand : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_block_ampersand : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_block_ampersand
        (_parse_leaf_rule "block_ampersand") nodes
    )
  in
  let cache_class_variable : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_class_variable : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_class_variable : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_class_variable
        (_parse_leaf_rule "class_variable") nodes
    )
  in
  let cache_comment : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_comment : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_comment : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_comment
        (_parse_leaf_rule "comment") nodes
    )
  in
  let cache_string_array_start : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_string_array_start : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_string_array_start : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_string_array_start
        (_parse_leaf_rule "string_array_start") nodes
    )
  in
  let cache_splat_star : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_splat_star : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_splat_star : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_splat_star
        (_parse_leaf_rule "splat_star") nodes
    )
  in
  let cache_integer : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_integer : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_integer : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_integer
        (_parse_leaf_rule "integer") nodes
    )
  in
  let cache_heredoc_content : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_heredoc_content : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_heredoc_content : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_heredoc_content
        (_parse_leaf_rule "heredoc_content") nodes
    )
  in
  let cache_super : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_super : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_super : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_super
        (_parse_leaf_rule "super") nodes
    )
  in
  let cache_string_end : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_string_end : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_string_end : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_string_end
        (_parse_leaf_rule "string_end") nodes
    )
  in
  let cache_line_break : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_line_break : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_line_break : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_line_break
        (_parse_leaf_rule "line_break") nodes
    )
  in
  let cache_identifier : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_identifier : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_identifier : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_identifier
        (_parse_leaf_rule "identifier") nodes
    )
  in
  let cache_string_content : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_string_content : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_string_content : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_string_content
        (_parse_leaf_rule "string_content") nodes
    )
  in
  let cache_heredoc_end : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_heredoc_end : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_heredoc_end : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_heredoc_end
        (_parse_leaf_rule "heredoc_end") nodes
    )
  in
  let cache_nil : CST.nil Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_nil _parse_tail : (CST.nil * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Nil_nil nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "nil")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Nil_nil (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Nil_NIL nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "NIL")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Nil_NIL (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Nil_nil nodes with
            | Some _ as res -> res
            | None ->
                _parse_Nil_NIL nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_nil : CST.nil Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_nil nodes
    )
  in
  let parse_node_nil : CST.nil Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_nil (
        Combine.parse_rule "nil" parse_children_nil
      ) nodes
    )
  in
  let cache_heredoc_beginning : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_heredoc_beginning : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_heredoc_beginning : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_heredoc_beginning
        (_parse_leaf_rule "heredoc_beginning") nodes
    )
  in
  let cache_float_ : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_float_ : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_float_ : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_float_
        (_parse_leaf_rule "float") nodes
    )
  in
  let cache_global_variable : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_global_variable : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_global_variable : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_global_variable
        (_parse_leaf_rule "global_variable") nodes
    )
  in
  let cache_symbol_array_start : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_symbol_array_start : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_symbol_array_start : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_symbol_array_start
        (_parse_leaf_rule "symbol_array_start") nodes
    )
  in
  let cache_heredoc_body_start : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_heredoc_body_start : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_heredoc_body_start : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_heredoc_body_start
        (_parse_leaf_rule "heredoc_body_start") nodes
    )
  in
  let cache_operator : CST.operator Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_operator _parse_tail : (CST.operator * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Op_DOTDOT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "..")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_DOTDOT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_BAR nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "|")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_BAR (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_HAT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "^")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_HAT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_AMP nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "&")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_AMP (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_LTEQGT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "<=>")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_LTEQGT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_EQEQ nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "==")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_EQEQ (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_EQEQEQ nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "===")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_EQEQEQ (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_EQTILDE nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "=~")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_EQTILDE (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_GT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule ">")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_GT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_GTEQ nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule ">=")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_GTEQ (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_LT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "<")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_LT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_LTEQ nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "<=")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_LTEQ (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_PLUS nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "+")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_PLUS (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_DASH nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "-")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_DASH (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_STAR nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "*")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_STAR (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_SLASH nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "/")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_SLASH (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_PERC nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "%")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_PERC (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_BANG nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "!")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_BANG (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_BANGTILDE nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "!~")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_BANGTILDE (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_STARSTAR nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "**")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_STARSTAR (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_LTLT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "<<")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_LTLT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_GTGT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule ">>")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_GTGT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_TILDE nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "~")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_TILDE (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_PLUSAT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "+@")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_PLUSAT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_DASHAT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "-@")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_DASHAT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_LBRACKRBRACK nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "[]")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_LBRACKRBRACK (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_LBRACKRBRACKEQ nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "[]=")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_LBRACKRBRACKEQ (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Op_BQUOT nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "`")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Op_BQUOT (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Op_DOTDOT nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Op_BAR nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Op_HAT nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Op_AMP nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Op_LTEQGT nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Op_EQEQ nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Op_EQEQEQ nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Op_EQTILDE nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Op_GT nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_Op_GTEQ nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_Op_LT nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        match _parse_Op_LTEQ nodes with
                                                        | Some _ as res -> res
                                                        | None ->
                                                            match _parse_Op_PLUS nodes with
                                                            | Some _ as res -> res
                                                            | None ->
                                                                match _parse_Op_DASH nodes with
                                                                | Some _ as res -> res
                                                                | None ->
                                                                    match _parse_Op_STAR nodes with
                                                                    | Some _ as res -> res
                                                                    | None ->
                                                                        match _parse_Op_SLASH nodes with
                                                                        | Some _ as res -> res
                                                                        | None ->
                                                                            match _parse_Op_PERC nodes with
                                                                            | Some _ as res -> res
                                                                            | None ->
                                                                                match _parse_Op_BANG nodes with
                                                                                | Some _ as res -> res
                                                                                | None ->
                                                                                    match _parse_Op_BANGTILDE nodes with
                                                                                    | Some _ as res -> res
                                                                                    | None ->
                                                                                        match _parse_Op_STARSTAR nodes with
                                                                                        | Some _ as res -> res
                                                                                        | None ->
                                                                                            match _parse_Op_LTLT nodes with
                                                                                            | Some _ as res -> res
                                                                                            | None ->
                                                                                                match _parse_Op_GTGT nodes with
                                                                                                | Some _ as res -> res
                                                                                                | None ->
                                                                                                    match _parse_Op_TILDE nodes with
                                                                                                    | Some _ as res -> res
                                                                                                    | None ->
                                                                                                        match _parse_Op_PLUSAT nodes with
                                                                                                        | Some _ as res -> res
                                                                                                        | None ->
                                                                                                            match _parse_Op_DASHAT nodes with
                                                                                                            | Some _ as res -> res
                                                                                                            | None ->
                                                                                                                match _parse_Op_LBRACKRBRACK nodes with
                                                                                                                | Some _ as res -> res
                                                                                                                | None ->
                                                                                                                    match _parse_Op_LBRACKRBRACKEQ nodes with
                                                                                                                    | Some _ as res -> res
                                                                                                                    | None ->
                                                                                                                        _parse_Op_BQUOT nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_operator : CST.operator Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_operator nodes
    )
  in
  let parse_node_operator : CST.operator Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_operator (
        Combine.parse_rule "operator" parse_children_operator
      ) nodes
    )
  in
  let cache_true_ : CST.true_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_true_ _parse_tail : (CST.true_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_True_true nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "true")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`True_true (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_True_TRUE nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "TRUE")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`True_TRUE (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_True_true nodes with
            | Some _ as res -> res
            | None ->
                _parse_True_TRUE nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_true_ : CST.true_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_true_ nodes
    )
  in
  let parse_node_true_ : CST.true_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_true_ (
        Combine.parse_rule "true" parse_children_true_
      ) nodes
    )
  in
  let cache_string_start : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_string_start : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_string_start : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_string_start
        (_parse_leaf_rule "string_start") nodes
    )
  in
  let cache_identifier_hash_key : Token.t Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_identifier_hash_key : unit Combine.reader =
    (fun nodes ->
      Combine.parse_success nodes
    )
  in
  let parse_node_identifier_hash_key : Token.t Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_identifier_hash_key
        (_parse_leaf_rule "identifier_hash_key") nodes
    )
  in
  let cache_rational : CST.rational Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_rational _parse_tail : (CST.rational * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_integer)
                (Combine.parse_seq(_parse_leaf_rule "r")(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_rational : CST.rational Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_rational nodes
    )
  in
  let parse_node_rational : CST.rational Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_rational (
        Combine.parse_rule "rational" parse_children_rational
      ) nodes
    )
  in
  let cache_terminator : CST.terminator Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_terminator _parse_tail : (CST.terminator * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Term_line_brk nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_line_break)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Term_line_brk (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Term_SEMI nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule ";")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Term_SEMI (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Term_line_brk nodes with
            | Some _ as res -> res
            | None ->
                _parse_Term_SEMI nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_terminator : CST.terminator Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_terminator nodes
    )
  in
  let parse_node_terminator : CST.terminator Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_terminator (
        Combine.parse_rule "terminator" parse_children_terminator
      ) nodes
    )
  in
  let cache_hash_splat_parameter : CST.hash_splat_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_hash_splat_parameter _parse_tail : (CST.hash_splat_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "**")
                (Combine.parse_optional(parse_node_identifier)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_hash_splat_parameter : CST.hash_splat_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_hash_splat_parameter nodes
    )
  in
  let parse_node_hash_splat_parameter : CST.hash_splat_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_hash_splat_parameter (
        Combine.parse_rule "hash_splat_parameter" parse_children_hash_splat_parameter
      ) nodes
    )
  in
  let cache_splat_parameter : CST.splat_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_splat_parameter _parse_tail : (CST.splat_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "*")
                (Combine.parse_optional(parse_node_identifier)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_splat_parameter : CST.splat_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_splat_parameter nodes
    )
  in
  let parse_node_splat_parameter : CST.splat_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_splat_parameter (
        Combine.parse_rule "splat_parameter" parse_children_splat_parameter
      ) nodes
    )
  in
  let cache_setter : CST.setter Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_setter _parse_tail : (CST.setter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_identifier)
                (Combine.parse_seq(_parse_leaf_rule "=")(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_setter : CST.setter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_setter nodes
    )
  in
  let parse_node_setter : CST.setter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_setter (
        Combine.parse_rule "setter" parse_children_setter
      ) nodes
    )
  in
  let cache_block_parameter : CST.block_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_block_parameter _parse_tail : (CST.block_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "&")
                (Combine.parse_seq(parse_node_identifier)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_block_parameter : CST.block_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_block_parameter nodes
    )
  in
  let parse_node_block_parameter : CST.block_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_block_parameter (
        Combine.parse_rule "block_parameter" parse_children_block_parameter
      ) nodes
    )
  in
  let cache_unary_literal : CST.unary_literal Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_unary_literal _parse_tail : (CST.unary_literal * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              (fun nodes ->
                let _parse_tail =
                  _parse_tail
                in
                let _parse_Int nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (parse_node_integer)
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`Int (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_Float nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (parse_node_float_)
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`Float (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                match _parse_Int nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Float nodes
              )
            in
            let _parse_Un_minus nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_unary_minus)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Un_minus (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_PLUS nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "+")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`PLUS (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Un_minus nodes with
            | Some _ as res -> res
            | None ->
                _parse_PLUS nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_unary_literal : CST.unary_literal Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_unary_literal nodes
    )
  in
  let parse_node_unary_literal : CST.unary_literal Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_unary_literal (
        Combine.parse_rule "unary_literal" parse_children_unary_literal
      ) nodes
    )
  in
  let cache_variable : CST.variable Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_variable _parse_tail : (CST.variable * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Self nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_self)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Self (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Super nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_super)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Super (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Inst_var nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_instance_variable)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Inst_var (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Class_var nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_class_variable)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Class_var (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Glob_var nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_global_variable)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Glob_var (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Cst nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_constant)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Cst (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Self nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Super nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Inst_var nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Class_var nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Glob_var nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Id nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Cst nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_variable : CST.variable Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_variable nodes
    )
  in
  let parse_node_variable : CST.variable Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_variable (
        Combine.parse_rule "variable" parse_children_variable
      ) nodes
    )
  in
  let cache_do_ : CST.do_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_do_ _parse_tail : (CST.do_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Do_do nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "do")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Do_do (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Do_term nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_terminator)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Do_term (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Do_do nodes with
            | Some _ as res -> res
            | None ->
                _parse_Do_term nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_do_ : CST.do_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_do_ nodes
    )
  in
  let parse_node_do_ : CST.do_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_do_ (
        Combine.parse_rule "do" parse_children_do_
      ) nodes
    )
  in
  let cache_statements : CST.statements Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_begin_block : CST.begin_block Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_end_block : CST.end_block Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_statement : CST.statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_ : CST.method_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_singleton_method : CST.singleton_method Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_rest : CST.method_rest Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_parameters : CST.parameters Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_bare_parameters : CST.bare_parameters Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_block_parameters : CST.block_parameters Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_formal_parameter : CST.formal_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_simple_formal_parameter : CST.simple_formal_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_keyword_parameter : CST.keyword_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_optional_parameter : CST.optional_parameter Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_class_ : CST.class_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_superclass : CST.superclass Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_singleton_class : CST.singleton_class Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_module_ : CST.module_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_return_command : CST.return_command Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_yield_command : CST.yield_command Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_break_command : CST.break_command Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_next_command : CST.next_command Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_return : CST.return Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_yield : CST.yield Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_break : CST.break Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_next : CST.next Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_redo : CST.redo Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_retry : CST.retry Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_if_modifier : CST.if_modifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_unless_modifier : CST.unless_modifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_while_modifier : CST.while_modifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_until_modifier : CST.until_modifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_rescue_modifier : CST.rescue_modifier Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_while_ : CST.while_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_until : CST.until Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_for_ : CST.for_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_in_ : CST.in_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_case : CST.case Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_when_ : CST.when_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_pattern : CST.pattern Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_if_ : CST.if_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_unless : CST.unless Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_elsif : CST.elsif Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_else_ : CST.else_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_then_ : CST.then_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_begin_ : CST.begin_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_ensure : CST.ensure Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_rescue : CST.rescue Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_exceptions : CST.exceptions Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_exception_variable : CST.exception_variable Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_body_statement : CST.body_statement Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_expression : CST.expression Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_arg : CST.arg Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_primary : CST.primary Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_parenthesized_statements : CST.parenthesized_statements Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_element_reference : CST.element_reference Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_scope_resolution : CST.scope_resolution Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_call : CST.call Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_command_call : CST.command_call Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_call : CST.method_call Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_command_argument_list : CST.command_argument_list Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_argument_list : CST.argument_list Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_argument_list_with_trailing_comma : CST.argument_list_with_trailing_comma Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_argument : CST.argument Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_splat_argument : CST.splat_argument Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_hash_splat_argument : CST.hash_splat_argument Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_block_argument : CST.block_argument Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_do_block : CST.do_block Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_block : CST.block Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_assignment : CST.assignment Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_command_assignment : CST.command_assignment Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_operator_assignment : CST.operator_assignment Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_command_operator_assignment : CST.command_operator_assignment Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_conditional : CST.conditional Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_range : CST.range Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_binary : CST.binary Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_command_binary : CST.command_binary Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_unary : CST.unary Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_parenthesized_unary : CST.parenthesized_unary Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_right_assignment_list : CST.right_assignment_list Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_left_assignment_list : CST.left_assignment_list Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_mlhs : CST.mlhs Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_destructured_left_assignment : CST.destructured_left_assignment Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_rest_assignment : CST.rest_assignment Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_lhs : CST.lhs Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_method_name : CST.method_name Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_undef : CST.undef Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_alias : CST.alias Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_chained_string : CST.chained_string Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_interpolation : CST.interpolation Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_string_ : CST.string_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_subshell : CST.subshell Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_string_array : CST.string_array Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_symbol_array : CST.symbol_array Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_symbol : CST.symbol Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_regex : CST.regex Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_literal_contents : CST.literal_contents Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_array_ : CST.array_ Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_hash : CST.hash Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_pair : CST.pair Combine.Memoize.t =
    Combine.Memoize.create () in
  let cache_lambda : CST.lambda Combine.Memoize.t =
    Combine.Memoize.create () in
  let rec parse_inline_statements _parse_tail : (CST.statements * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Stmts_rep1_choice_stmt_term_opt_stmt nodes =
              (
                match
                  (
                    Combine.parse_repeat1
                      (
                        (fun nodes ->
                          let _parse_Stmt_term nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_statement)
                                    (parse_node_terminator)
                                ) nodes
                              with
                              | Some ((e0, e1), nodes) ->
                                  Some (`Stmt_term (e0, e1), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_Empty_stmt nodes =
                            (
                              match
                                (
                                  parse_node_empty_statement
                                ) nodes
                              with
                              | Some (e0, nodes) ->
                                  Some (`Empty_stmt (e0), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_Stmt_term nodes with
                          | Some _ as res -> res
                          | None ->
                              _parse_Empty_stmt nodes
                        )
                      )
                      (Combine.parse_optional(parse_node_statement)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Stmts_rep1_choice_stmt_term_opt_stmt (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmts_stmt nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_statement)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmts_stmt (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Stmts_rep1_choice_stmt_term_opt_stmt nodes with
            | Some _ as res -> res
            | None ->
                _parse_Stmts_stmt nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_statements : CST.statements Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_statements nodes
    )
  and parse_node_statements : CST.statements Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_statements (
        Combine.parse_rule "statements" parse_children_statements
      ) nodes
    )
  and parse_inline_begin_block _parse_tail : (CST.begin_block * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "BEGIN")
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "{")
                    (
                      Combine.parse_optional
                        (parse_node_statements)
                        (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_begin_block : CST.begin_block Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_begin_block nodes
    )
  and parse_node_begin_block : CST.begin_block Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_begin_block (
        Combine.parse_rule "begin_block" parse_children_begin_block
      ) nodes
    )
  and parse_inline_end_block _parse_tail : (CST.end_block * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "END")
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "{")
                    (
                      Combine.parse_optional
                        (parse_node_statements)
                        (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_end_block : CST.end_block Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_end_block nodes
    )
  and parse_node_end_block : CST.end_block Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_end_block (
        Combine.parse_rule "end_block" parse_children_end_block
      ) nodes
    )
  and parse_inline_statement _parse_tail : (CST.statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Stmt_undef nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_undef)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_undef (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_alias nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_alias)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_alias (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_if_modi nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_if_modifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_if_modi (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_unle_modi nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_unless_modifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_unle_modi (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_while_modi nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_while_modifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_while_modi (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_until_modi nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_until_modifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_until_modi (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_resc_modi nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_rescue_modifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_resc_modi (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_begin_blk nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_begin_block)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_begin_blk (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_end_blk nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_end_block)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_end_blk (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Stmt_exp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_expression)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Stmt_exp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Stmt_undef nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Stmt_alias nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Stmt_if_modi nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Stmt_unle_modi nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Stmt_while_modi nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Stmt_until_modi nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Stmt_resc_modi nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Stmt_begin_blk nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Stmt_end_blk nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                _parse_Stmt_exp nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_statement : CST.statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_statement nodes
    )
  and parse_node_statement : CST.statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_statement (
        Combine.parse_rule "statement" parse_children_statement
      ) nodes
    )
  and parse_inline_method_ _parse_tail : (CST.method_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "def")
                (Combine.parse_seq(parse_node_method_rest)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_ : CST.method_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_ nodes
    )
  and parse_node_method_ : CST.method_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_ (
        Combine.parse_rule "method" parse_children_method_
      ) nodes
    )
  and parse_inline_singleton_method _parse_tail : (CST.singleton_method * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "def")
                (
                  (fun nodes ->
                    let _parse_tail =
                      (fun nodes ->
                        let _parse_tail =
                          Combine.parse_seq
                            (parse_node_method_rest)
                            (_parse_tail)
                        in
                        let _parse_DOT nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (_parse_leaf_rule ".")
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`DOT (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_COLONCOLON nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (_parse_leaf_rule "::")
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`COLONCOLON (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_DOT nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_COLONCOLON nodes
                      )
                    in
                    let _parse_Var nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_variable)
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Var (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_LPAR_arg_RPAR nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "(")
                              (
                                Combine.parse_seq
                                  (parse_node_arg)
                                  (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                              )
                          ) nodes
                        with
                        | Some ((e0, (e1, (e2, tail))), nodes) ->
                            Some ((`LPAR_arg_RPAR (e0, e1, e2), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Var nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_LPAR_arg_RPAR nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_singleton_method : CST.singleton_method Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_singleton_method nodes
    )
  and parse_node_singleton_method : CST.singleton_method Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_singleton_method (
        Combine.parse_rule "singleton_method" parse_children_singleton_method
      ) nodes
    )
  and parse_inline_method_rest _parse_tail : (CST.method_rest * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_method_name)
                (
                  (fun nodes ->
                    let _parse_tail =
                      Combine.parse_seq
                        (parse_node_body_statement)
                        (_parse_tail)
                    in
                    let _parse_Params_opt_term nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_parameters)
                              (Combine.parse_optional(parse_node_terminator)(_parse_tail))
                          ) nodes
                        with
                        | Some ((e0, (e1, tail)), nodes) ->
                            Some ((`Params_opt_term (e0, e1), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Opt_bare_params_term nodes =
                      (
                        match
                          (
                            Combine.parse_optional
                              (parse_node_bare_parameters)
                              (Combine.parse_seq(parse_node_terminator)(_parse_tail))
                          ) nodes
                        with
                        | Some ((e0, (e1, tail)), nodes) ->
                            Some ((`Opt_bare_params_term (e0, e1), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Params_opt_term nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_Opt_bare_params_term nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_rest : CST.method_rest Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_rest nodes
    )
  and parse_node_method_rest : CST.method_rest Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_rest (
        Combine.parse_rule "method_rest" parse_children_method_rest
      ) nodes
    )
  and parse_inline_parameters _parse_tail : (CST.parameters * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            (
                              Combine.parse_seq
                                (parse_node_formal_parameter)
                                (
                                  Combine.parse_repeat
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ",")
                                        (parse_node_formal_parameter)
                                    )
                                    (Combine.parse_success)
                                )
                            ) nodes
                          with
                          | Some ((e0, (e1, tail)), nodes) ->
                              Some ((e0, e1), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_parameters : CST.parameters Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_parameters nodes
    )
  and parse_node_parameters : CST.parameters Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_parameters (
        Combine.parse_rule "parameters" parse_children_parameters
      ) nodes
    )
  and parse_inline_bare_parameters _parse_tail : (CST.bare_parameters * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_simple_formal_parameter)
                (
                  Combine.parse_repeat
                    (
                      Combine.parse_seq
                        (_parse_leaf_rule ",")
                        (parse_node_formal_parameter)
                    )
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_bare_parameters : CST.bare_parameters Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_bare_parameters nodes
    )
  and parse_node_bare_parameters : CST.bare_parameters Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_bare_parameters (
        Combine.parse_rule "bare_parameters" parse_children_bare_parameters
      ) nodes
    )
  and parse_inline_block_parameters _parse_tail : (CST.block_parameters * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "|")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            (
                              Combine.parse_seq
                                (parse_node_formal_parameter)
                                (
                                  Combine.parse_repeat
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ",")
                                        (parse_node_formal_parameter)
                                    )
                                    (Combine.parse_success)
                                )
                            ) nodes
                          with
                          | Some ((e0, (e1, tail)), nodes) ->
                              Some ((e0, e1), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (
                      Combine.parse_optional
                        (_parse_leaf_rule ",")
                        (
                          Combine.parse_optional
                            (
                              (fun nodes ->
                                (
                                  match
                                    (
                                      Combine.parse_seq
                                        (_parse_leaf_rule ";")
                                        (
                                          Combine.parse_seq
                                            (parse_node_identifier)
                                            (
                                              Combine.parse_repeat
                                                (
                                                  Combine.parse_seq
                                                    (_parse_leaf_rule ",")
                                                    (parse_node_identifier)
                                                )
                                                (Combine.parse_success)
                                            )
                                        )
                                    ) nodes
                                  with
                                  | Some ((e0, (e1, (e2, tail))), nodes) ->
                                      Some ((e0, e1, e2), nodes)
                                  | None ->
                                      None
                                )
                              )
                            )
                            (Combine.parse_seq(_parse_leaf_rule "|")(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_block_parameters : CST.block_parameters Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_block_parameters nodes
    )
  and parse_node_block_parameters : CST.block_parameters Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_block_parameters (
        Combine.parse_rule "block_parameters" parse_children_block_parameters
      ) nodes
    )
  and parse_inline_formal_parameter _parse_tail : (CST.formal_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Form_param_simple_form_param nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_simple_formal_parameter)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Form_param_simple_form_param (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Form_param_params nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_parameters)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Form_param_params (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Form_param_simple_form_param nodes with
            | Some _ as res -> res
            | None ->
                _parse_Form_param_params nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_formal_parameter : CST.formal_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_formal_parameter nodes
    )
  and parse_node_formal_parameter : CST.formal_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_formal_parameter (
        Combine.parse_rule "formal_parameter" parse_children_formal_parameter
      ) nodes
    )
  and parse_inline_simple_formal_parameter _parse_tail : (CST.simple_formal_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Simple_form_param_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_form_param_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_form_param_splat_param nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_splat_parameter)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_form_param_splat_param (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_form_param_hash_splat_param nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_hash_splat_parameter)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_form_param_hash_splat_param (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_form_param_blk_param nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_block_parameter)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_form_param_blk_param (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_form_param_kw_param nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_keyword_parameter)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_form_param_kw_param (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Simple_form_param_opt_param nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_optional_parameter)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Simple_form_param_opt_param (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Simple_form_param_id nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Simple_form_param_splat_param nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Simple_form_param_hash_splat_param nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Simple_form_param_blk_param nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Simple_form_param_kw_param nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_Simple_form_param_opt_param nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_simple_formal_parameter : CST.simple_formal_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_simple_formal_parameter nodes
    )
  and parse_node_simple_formal_parameter : CST.simple_formal_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_simple_formal_parameter (
        Combine.parse_rule "simple_formal_parameter" parse_children_simple_formal_parameter
      ) nodes
    )
  and parse_inline_keyword_parameter _parse_tail : (CST.keyword_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_identifier)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule ":")
                    (Combine.parse_optional(parse_node_arg)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_keyword_parameter : CST.keyword_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_keyword_parameter nodes
    )
  and parse_node_keyword_parameter : CST.keyword_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_keyword_parameter (
        Combine.parse_rule "keyword_parameter" parse_children_keyword_parameter
      ) nodes
    )
  and parse_inline_optional_parameter _parse_tail : (CST.optional_parameter * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_identifier)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "=")
                    (Combine.parse_seq(parse_node_arg)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_optional_parameter : CST.optional_parameter Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_optional_parameter nodes
    )
  and parse_node_optional_parameter : CST.optional_parameter Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_optional_parameter (
        Combine.parse_rule "optional_parameter" parse_children_optional_parameter
      ) nodes
    )
  and parse_inline_class_ _parse_tail : (CST.class_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "class")
                (
                  (fun nodes ->
                    let _parse_tail =
                      Combine.parse_optional
                        (parse_node_superclass)
                        (
                          Combine.parse_seq
                            (parse_node_terminator)
                            (Combine.parse_seq(parse_node_body_statement)(_parse_tail))
                        )
                    in
                    let _parse_Cst nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_constant)
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Cst (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Scope_resol nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_scope_resolution)
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Scope_resol (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Cst nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_Scope_resol nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_class_ : CST.class_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_class_ nodes
    )
  and parse_node_class_ : CST.class_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_class_ (
        Combine.parse_rule "class" parse_children_class_
      ) nodes
    )
  and parse_inline_superclass _parse_tail : (CST.superclass * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "<")
                (Combine.parse_seq(parse_node_arg)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_superclass : CST.superclass Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_superclass nodes
    )
  and parse_node_superclass : CST.superclass Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_superclass (
        Combine.parse_rule "superclass" parse_children_superclass
      ) nodes
    )
  and parse_inline_singleton_class _parse_tail : (CST.singleton_class * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "class")
                (
                  Combine.parse_seq
                    (parse_node_singleton_class_left_angle_left_langle)
                    (
                      Combine.parse_seq
                        (parse_node_arg)
                        (
                          Combine.parse_seq
                            (parse_node_terminator)
                            (Combine.parse_seq(parse_node_body_statement)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_singleton_class : CST.singleton_class Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_singleton_class nodes
    )
  and parse_node_singleton_class : CST.singleton_class Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_singleton_class (
        Combine.parse_rule "singleton_class" parse_children_singleton_class
      ) nodes
    )
  and parse_inline_module_ _parse_tail : (CST.module_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "module")
                (
                  (fun nodes ->
                    let _parse_tail =
                      (fun nodes ->
                        let _parse_tail =
                          _parse_tail
                        in
                        let _parse_Term_body_stmt nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_terminator)
                                  (Combine.parse_seq(parse_node_body_statement)(_parse_tail))
                              ) nodes
                            with
                            | Some ((e0, (e1, tail)), nodes) ->
                                Some ((`Term_body_stmt (e0, e1), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_End nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (_parse_leaf_rule "end")
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`End (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Term_body_stmt nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_End nodes
                      )
                    in
                    let _parse_Cst nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_constant)
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Cst (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Scope_resol nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (parse_node_scope_resolution)
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Scope_resol (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Cst nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_Scope_resol nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_module_ : CST.module_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_module_ nodes
    )
  and parse_node_module_ : CST.module_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_module_ (
        Combine.parse_rule "module" parse_children_module_
      ) nodes
    )
  and parse_inline_return_command _parse_tail : (CST.return_command * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "return")
                (
                  Combine.parse_seq
                    (parse_node_command_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_return_command : CST.return_command Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_return_command nodes
    )
  and parse_node_return_command : CST.return_command Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_return_command (
        Combine.parse_rule "return_command" parse_children_return_command
      ) nodes
    )
  and parse_inline_yield_command _parse_tail : (CST.yield_command * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "yield")
                (
                  Combine.parse_seq
                    (parse_node_command_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_yield_command : CST.yield_command Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_yield_command nodes
    )
  and parse_node_yield_command : CST.yield_command Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_yield_command (
        Combine.parse_rule "yield_command" parse_children_yield_command
      ) nodes
    )
  and parse_inline_break_command _parse_tail : (CST.break_command * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "break")
                (
                  Combine.parse_seq
                    (parse_node_command_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_break_command : CST.break_command Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_break_command nodes
    )
  and parse_node_break_command : CST.break_command Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_break_command (
        Combine.parse_rule "break_command" parse_children_break_command
      ) nodes
    )
  and parse_inline_next_command _parse_tail : (CST.next_command * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "next")
                (
                  Combine.parse_seq
                    (parse_node_command_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_next_command : CST.next_command Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_next_command nodes
    )
  and parse_node_next_command : CST.next_command Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_next_command (
        Combine.parse_rule "next_command" parse_children_next_command
      ) nodes
    )
  and parse_inline_return _parse_tail : (CST.return * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "return")
                (
                  Combine.parse_optional
                    (parse_node_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_return : CST.return Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_return nodes
    )
  and parse_node_return : CST.return Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_return (
        Combine.parse_rule "return" parse_children_return
      ) nodes
    )
  and parse_inline_yield _parse_tail : (CST.yield * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "yield")
                (
                  Combine.parse_optional
                    (parse_node_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_yield : CST.yield Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_yield nodes
    )
  and parse_node_yield : CST.yield Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_yield (
        Combine.parse_rule "yield" parse_children_yield
      ) nodes
    )
  and parse_inline_break _parse_tail : (CST.break * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "break")
                (
                  Combine.parse_optional
                    (parse_node_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_break : CST.break Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_break nodes
    )
  and parse_node_break : CST.break Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_break (
        Combine.parse_rule "break" parse_children_break
      ) nodes
    )
  and parse_inline_next _parse_tail : (CST.next * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "next")
                (
                  Combine.parse_optional
                    (parse_node_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_next : CST.next Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_next nodes
    )
  and parse_node_next : CST.next Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_next (
        Combine.parse_rule "next" parse_children_next
      ) nodes
    )
  and parse_inline_redo _parse_tail : (CST.redo * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "redo")
                (
                  Combine.parse_optional
                    (parse_node_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_redo : CST.redo Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_redo nodes
    )
  and parse_node_redo : CST.redo Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_redo (
        Combine.parse_rule "redo" parse_children_redo
      ) nodes
    )
  and parse_inline_retry _parse_tail : (CST.retry * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "retry")
                (
                  Combine.parse_optional
                    (parse_node_argument_list)
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_retry : CST.retry Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_retry nodes
    )
  and parse_node_retry : CST.retry Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_retry (
        Combine.parse_rule "retry" parse_children_retry
      ) nodes
    )
  and parse_inline_if_modifier _parse_tail : (CST.if_modifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_statement)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "if")
                    (Combine.parse_seq(parse_node_expression)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_if_modifier : CST.if_modifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_if_modifier nodes
    )
  and parse_node_if_modifier : CST.if_modifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_if_modifier (
        Combine.parse_rule "if_modifier" parse_children_if_modifier
      ) nodes
    )
  and parse_inline_unless_modifier _parse_tail : (CST.unless_modifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_statement)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "unless")
                    (Combine.parse_seq(parse_node_expression)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_unless_modifier : CST.unless_modifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_unless_modifier nodes
    )
  and parse_node_unless_modifier : CST.unless_modifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_unless_modifier (
        Combine.parse_rule "unless_modifier" parse_children_unless_modifier
      ) nodes
    )
  and parse_inline_while_modifier _parse_tail : (CST.while_modifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_statement)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "while")
                    (Combine.parse_seq(parse_node_expression)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_while_modifier : CST.while_modifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_while_modifier nodes
    )
  and parse_node_while_modifier : CST.while_modifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_while_modifier (
        Combine.parse_rule "while_modifier" parse_children_while_modifier
      ) nodes
    )
  and parse_inline_until_modifier _parse_tail : (CST.until_modifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_statement)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "until")
                    (Combine.parse_seq(parse_node_expression)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_until_modifier : CST.until_modifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_until_modifier nodes
    )
  and parse_node_until_modifier : CST.until_modifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_until_modifier (
        Combine.parse_rule "until_modifier" parse_children_until_modifier
      ) nodes
    )
  and parse_inline_rescue_modifier _parse_tail : (CST.rescue_modifier * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_statement)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "rescue")
                    (Combine.parse_seq(parse_node_expression)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_rescue_modifier : CST.rescue_modifier Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_rescue_modifier nodes
    )
  and parse_node_rescue_modifier : CST.rescue_modifier Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_rescue_modifier (
        Combine.parse_rule "rescue_modifier" parse_children_rescue_modifier
      ) nodes
    )
  and parse_inline_while_ _parse_tail : (CST.while_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "while")
                (
                  Combine.parse_seq
                    (parse_node_arg)
                    (
                      Combine.parse_seq
                        (parse_node_do_)
                        (
                          Combine.parse_optional
                            (parse_node_statements)
                            (Combine.parse_seq(_parse_leaf_rule "end")(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_while_ : CST.while_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_while_ nodes
    )
  and parse_node_while_ : CST.while_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_while_ (
        Combine.parse_rule "while" parse_children_while_
      ) nodes
    )
  and parse_inline_until _parse_tail : (CST.until * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "until")
                (
                  Combine.parse_seq
                    (parse_node_arg)
                    (
                      Combine.parse_seq
                        (parse_node_do_)
                        (
                          Combine.parse_optional
                            (parse_node_statements)
                            (Combine.parse_seq(_parse_leaf_rule "end")(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_until : CST.until Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_until nodes
    )
  and parse_node_until : CST.until Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_until (
        Combine.parse_rule "until" parse_children_until
      ) nodes
    )
  and parse_inline_for_ _parse_tail : (CST.for_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "for")
                (
                  Combine.parse_seq
                    (parse_node_mlhs)
                    (
                      Combine.parse_seq
                        (parse_node_in_)
                        (
                          Combine.parse_seq
                            (parse_node_do_)
                            (
                              Combine.parse_optional
                                (parse_node_statements)
                                (Combine.parse_seq(_parse_leaf_rule "end")(_parse_tail))
                            )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, (e5, tail)))))), nodes) ->
              Some (((e0, e1, e2, e3, e4, e5), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_for_ : CST.for_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_for_ nodes
    )
  and parse_node_for_ : CST.for_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_for_ (
        Combine.parse_rule "for" parse_children_for_
      ) nodes
    )
  and parse_inline_in_ _parse_tail : (CST.in_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "in")
                (Combine.parse_seq(parse_node_arg)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_in_ : CST.in_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_in_ nodes
    )
  and parse_node_in_ : CST.in_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_in_ (
        Combine.parse_rule "in" parse_children_in_
      ) nodes
    )
  and parse_inline_case _parse_tail : (CST.case * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "case")
                (
                  Combine.parse_optional
                    (parse_node_arg)
                    (
                      Combine.parse_seq
                        (parse_node_terminator)
                        (
                          Combine.parse_repeat
                            (_parse_leaf_rule ";")
                            (
                              Combine.parse_repeat
                                (parse_node_when_)
                                (
                                  Combine.parse_optional
                                    (parse_node_else_)
                                    (Combine.parse_seq(_parse_leaf_rule "end")(_parse_tail))
                                )
                            )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, (e5, (e6, tail))))))), nodes) ->
              Some (((e0, e1, e2, e3, e4, e5, e6), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_case : CST.case Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_case nodes
    )
  and parse_node_case : CST.case Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_case (
        Combine.parse_rule "case" parse_children_case
      ) nodes
    )
  and parse_inline_when_ _parse_tail : (CST.when_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "when")
                (
                  Combine.parse_seq
                    (parse_node_pattern)
                    (
                      Combine.parse_repeat
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ",")
                            (parse_node_pattern)
                        )
                        (
                          (fun nodes ->
                            let _parse_tail =
                              _parse_tail
                            in
                            let _parse_Term nodes =
                              (
                                match
                                  (
                                    Combine.parse_seq
                                      (parse_node_terminator)
                                      (_parse_tail)
                                  ) nodes
                                with
                                | Some ((e0, tail), nodes) ->
                                    Some ((`Term (e0), tail), nodes)
                                | None ->
                                    None
                              )
                            in
                            let _parse_Then nodes =
                              (
                                match
                                  (
                                    Combine.parse_seq
                                      (parse_node_then_)
                                      (_parse_tail)
                                  ) nodes
                                with
                                | Some ((e0, tail), nodes) ->
                                    Some ((`Then (e0), tail), nodes)
                                | None ->
                                    None
                              )
                            in
                            match _parse_Term nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_Then nodes
                          )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_when_ : CST.when_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_when_ nodes
    )
  and parse_node_when_ : CST.when_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_when_ (
        Combine.parse_rule "when" parse_children_when_
      ) nodes
    )
  and parse_inline_pattern _parse_tail : (CST.pattern * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Pat_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Pat_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Pat_splat_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_splat_argument)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Pat_splat_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Pat_arg nodes with
            | Some _ as res -> res
            | None ->
                _parse_Pat_splat_arg nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_pattern : CST.pattern Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_pattern nodes
    )
  and parse_node_pattern : CST.pattern Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_pattern (
        Combine.parse_rule "pattern" parse_children_pattern
      ) nodes
    )
  and parse_inline_if_ _parse_tail : (CST.if_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "if")
                (
                  Combine.parse_seq
                    (parse_node_statement)
                    (
                      (fun nodes ->
                        let _parse_tail =
                          Combine.parse_optional
                            (
                              (fun nodes ->
                                let _parse_Else nodes =
                                  (
                                    match
                                      (
                                        parse_node_else_
                                      ) nodes
                                    with
                                    | Some (e0, nodes) ->
                                        Some (`Else (e0), nodes)
                                    | None ->
                                        None
                                  )
                                in
                                let _parse_Elsif nodes =
                                  (
                                    match
                                      (
                                        parse_node_elsif
                                      ) nodes
                                    with
                                    | Some (e0, nodes) ->
                                        Some (`Elsif (e0), nodes)
                                    | None ->
                                        None
                                  )
                                in
                                match _parse_Else nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Elsif nodes
                              )
                            )
                            (Combine.parse_seq(_parse_leaf_rule "end")(_parse_tail))
                        in
                        let _parse_Term nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_terminator)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Term (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Then nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_then_)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Then (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Term nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Then nodes
                      )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_if_ : CST.if_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_if_ nodes
    )
  and parse_node_if_ : CST.if_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_if_ (
        Combine.parse_rule "if" parse_children_if_
      ) nodes
    )
  and parse_inline_unless _parse_tail : (CST.unless * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "unless")
                (
                  Combine.parse_seq
                    (parse_node_statement)
                    (
                      (fun nodes ->
                        let _parse_tail =
                          Combine.parse_optional
                            (
                              (fun nodes ->
                                let _parse_Else nodes =
                                  (
                                    match
                                      (
                                        parse_node_else_
                                      ) nodes
                                    with
                                    | Some (e0, nodes) ->
                                        Some (`Else (e0), nodes)
                                    | None ->
                                        None
                                  )
                                in
                                let _parse_Elsif nodes =
                                  (
                                    match
                                      (
                                        parse_node_elsif
                                      ) nodes
                                    with
                                    | Some (e0, nodes) ->
                                        Some (`Elsif (e0), nodes)
                                    | None ->
                                        None
                                  )
                                in
                                match _parse_Else nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Elsif nodes
                              )
                            )
                            (Combine.parse_seq(_parse_leaf_rule "end")(_parse_tail))
                        in
                        let _parse_Term nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_terminator)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Term (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Then nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_then_)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Then (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Term nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Then nodes
                      )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_unless : CST.unless Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_unless nodes
    )
  and parse_node_unless : CST.unless Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_unless (
        Combine.parse_rule "unless" parse_children_unless
      ) nodes
    )
  and parse_inline_elsif _parse_tail : (CST.elsif * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "elsif")
                (
                  Combine.parse_seq
                    (parse_node_statement)
                    (
                      (fun nodes ->
                        let _parse_tail =
                          Combine.parse_optional
                            (
                              (fun nodes ->
                                let _parse_Else nodes =
                                  (
                                    match
                                      (
                                        parse_node_else_
                                      ) nodes
                                    with
                                    | Some (e0, nodes) ->
                                        Some (`Else (e0), nodes)
                                    | None ->
                                        None
                                  )
                                in
                                let _parse_Elsif nodes =
                                  (
                                    match
                                      (
                                        parse_node_elsif
                                      ) nodes
                                    with
                                    | Some (e0, nodes) ->
                                        Some (`Elsif (e0), nodes)
                                    | None ->
                                        None
                                  )
                                in
                                match _parse_Else nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Elsif nodes
                              )
                            )
                            (_parse_tail)
                        in
                        let _parse_Term nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_terminator)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Term (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Then nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_then_)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Then (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Term nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Then nodes
                      )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_elsif : CST.elsif Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_elsif nodes
    )
  and parse_node_elsif : CST.elsif Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_elsif (
        Combine.parse_rule "elsif" parse_children_elsif
      ) nodes
    )
  and parse_inline_else_ _parse_tail : (CST.else_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "else")
                (
                  Combine.parse_optional
                    (parse_node_terminator)
                    (Combine.parse_optional(parse_node_statements)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_else_ : CST.else_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_else_ nodes
    )
  and parse_node_else_ : CST.else_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_else_ (
        Combine.parse_rule "else" parse_children_else_
      ) nodes
    )
  and parse_inline_then_ _parse_tail : (CST.then_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Then_term_stmts nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_terminator)
                      (Combine.parse_seq(parse_node_statements)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Then_term_stmts (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Then_opt_term_then_opt_stmts nodes =
              (
                match
                  (
                    Combine.parse_optional
                      (parse_node_terminator)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "then")
                          (Combine.parse_optional(parse_node_statements)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Then_opt_term_then_opt_stmts (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Then_term_stmts nodes with
            | Some _ as res -> res
            | None ->
                _parse_Then_opt_term_then_opt_stmts nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_then_ : CST.then_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_then_ nodes
    )
  and parse_node_then_ : CST.then_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_then_ (
        Combine.parse_rule "then" parse_children_then_
      ) nodes
    )
  and parse_inline_begin_ _parse_tail : (CST.begin_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "begin")
                (
                  Combine.parse_optional
                    (parse_node_terminator)
                    (Combine.parse_seq(parse_node_body_statement)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_begin_ : CST.begin_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_begin_ nodes
    )
  and parse_node_begin_ : CST.begin_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_begin_ (
        Combine.parse_rule "begin" parse_children_begin_
      ) nodes
    )
  and parse_inline_ensure _parse_tail : (CST.ensure * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "ensure")
                (Combine.parse_optional(parse_node_statements)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_ensure : CST.ensure Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_ensure nodes
    )
  and parse_node_ensure : CST.ensure Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_ensure (
        Combine.parse_rule "ensure" parse_children_ensure
      ) nodes
    )
  and parse_inline_rescue _parse_tail : (CST.rescue * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "rescue")
                (
                  Combine.parse_optional
                    (parse_node_exceptions)
                    (
                      Combine.parse_optional
                        (parse_node_exception_variable)
                        (
                          (fun nodes ->
                            let _parse_tail =
                              _parse_tail
                            in
                            let _parse_Term nodes =
                              (
                                match
                                  (
                                    Combine.parse_seq
                                      (parse_node_terminator)
                                      (_parse_tail)
                                  ) nodes
                                with
                                | Some ((e0, tail), nodes) ->
                                    Some ((`Term (e0), tail), nodes)
                                | None ->
                                    None
                              )
                            in
                            let _parse_Then nodes =
                              (
                                match
                                  (
                                    Combine.parse_seq
                                      (parse_node_then_)
                                      (_parse_tail)
                                  ) nodes
                                with
                                | Some ((e0, tail), nodes) ->
                                    Some ((`Then (e0), tail), nodes)
                                | None ->
                                    None
                              )
                            in
                            match _parse_Term nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_Then nodes
                          )
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_rescue : CST.rescue Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_rescue nodes
    )
  and parse_node_rescue : CST.rescue Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_rescue (
        Combine.parse_rule "rescue" parse_children_rescue
      ) nodes
    )
  and parse_inline_exceptions _parse_tail : (CST.exceptions * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_repeat
                (
                  Combine.parse_seq
                    (_parse_leaf_rule ",")
                    (
                      (fun nodes ->
                        let _parse_Arg nodes =
                          (
                            match
                              (
                                parse_node_arg
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Arg (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Splat_arg nodes =
                          (
                            match
                              (
                                parse_node_splat_argument
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Splat_arg (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Arg nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Splat_arg nodes
                      )
                    )
                )
                (_parse_tail)
            in
            let _parse_Arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Splat_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_splat_argument)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Splat_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Arg nodes with
            | Some _ as res -> res
            | None ->
                _parse_Splat_arg nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_exceptions : CST.exceptions Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_exceptions nodes
    )
  and parse_node_exceptions : CST.exceptions Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_exceptions (
        Combine.parse_rule "exceptions" parse_children_exceptions
      ) nodes
    )
  and parse_inline_exception_variable _parse_tail : (CST.exception_variable * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "=>")
                (Combine.parse_seq(parse_node_lhs)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_exception_variable : CST.exception_variable Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_exception_variable nodes
    )
  and parse_node_exception_variable : CST.exception_variable Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_exception_variable (
        Combine.parse_rule "exception_variable" parse_children_exception_variable
      ) nodes
    )
  and parse_inline_body_statement _parse_tail : (CST.body_statement * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_statements)
                (
                  Combine.parse_repeat
                    (
                      (fun nodes ->
                        let _parse_Resc nodes =
                          (
                            match
                              (
                                parse_node_rescue
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Resc (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Else nodes =
                          (
                            match
                              (
                                parse_node_else_
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Else (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Ensu nodes =
                          (
                            match
                              (
                                parse_node_ensure
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Ensu (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Resc nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Else nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_Ensu nodes
                      )
                    )
                    (Combine.parse_seq(_parse_leaf_rule "end")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_body_statement : CST.body_statement Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_body_statement nodes
    )
  and parse_node_body_statement : CST.body_statement Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_body_statement (
        Combine.parse_rule "body_statement" parse_children_body_statement
      ) nodes
    )
  and parse_inline_expression _parse_tail : (CST.expression * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Exp_cmd_bin nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_command_binary)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_cmd_bin (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_cmd_assign nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_command_assignment)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_cmd_assign (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_cmd_op_assign nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_command_operator_assignment)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_cmd_op_assign (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_cmd_call nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_command_call)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_cmd_call (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_ret_cmd nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_return_command)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_ret_cmd (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_yield_cmd nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_yield_command)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_yield_cmd (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_brk_cmd nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_break_command)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_brk_cmd (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_next_cmd nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_next_command)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_next_cmd (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Exp_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Exp_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Exp_cmd_bin nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Exp_cmd_assign nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Exp_cmd_op_assign nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Exp_cmd_call nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Exp_ret_cmd nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Exp_yield_cmd nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Exp_brk_cmd nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Exp_next_cmd nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            _parse_Exp_arg nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_expression : CST.expression Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_expression nodes
    )
  and parse_node_expression : CST.expression Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_expression (
        Combine.parse_rule "expression" parse_children_expression
      ) nodes
    )
  and parse_inline_arg _parse_tail : (CST.arg * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Arg_prim nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_primary)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_prim (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_assign nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_assignment)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_assign (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_op_assign nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_operator_assignment)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_op_assign (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_cond nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_conditional)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_cond (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_range nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_range)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_range (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_bin nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_binary)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_bin (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_un nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_unary)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_un (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Arg_prim nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Arg_assign nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Arg_op_assign nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Arg_cond nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Arg_range nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Arg_bin nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Arg_un nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_arg : CST.arg Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_arg nodes
    )
  and parse_node_arg : CST.arg Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_arg (
        Combine.parse_rule "arg" parse_children_arg
      ) nodes
    )
  and parse_inline_primary _parse_tail : (CST.primary * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Prim_paren_stmts nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_parenthesized_statements)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_paren_stmts (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_lhs nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_lhs)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_lhs (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_array nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_array_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_array (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_str_array nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_string_array)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_str_array (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_symb_array nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_symbol_array)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_symb_array (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_hash nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_hash)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_hash (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_subs nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_subshell)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_subs (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_symb nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_symbol)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_symb (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_int nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_integer)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_int (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_float nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_float_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_float (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_comp nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_complex)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_comp (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_rati nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_rational)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_rati (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_str nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_string_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_str (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_char nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_character)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_char (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_chai_str nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_chained_string)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_chai_str (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_regex nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_regex)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_regex (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_lamb nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_lambda)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_lamb (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_meth nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_method_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_meth (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_sing_meth nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_singleton_method)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_sing_meth (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_class nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_class_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_class (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_sing_class nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_singleton_class)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_sing_class (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_modu nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_module_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_modu (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_begin nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_begin_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_begin (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_while nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_while_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_while (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_until nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_until)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_until (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_if nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_if_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_if (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_unle nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_unless)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_unle (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_for nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_for_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_for (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_case nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_case)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_case (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_ret nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_return)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_ret (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_yield nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_yield)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_yield (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_brk nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_break)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_brk (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_next nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_next)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_next (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_redo nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_redo)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_redo (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_retry nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_retry)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_retry (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_paren_un nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_parenthesized_unary)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_paren_un (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_un_lit nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_unary_literal)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_un_lit (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_here_begin nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_heredoc_beginning)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Prim_here_begin (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Prim_paren_stmts nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Prim_lhs nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Prim_array nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Prim_str_array nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Prim_symb_array nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Prim_hash nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Prim_subs nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Prim_symb nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Prim_int nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_Prim_float nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_Prim_comp nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        match _parse_Prim_rati nodes with
                                                        | Some _ as res -> res
                                                        | None ->
                                                            match _parse_Prim_str nodes with
                                                            | Some _ as res -> res
                                                            | None ->
                                                                match _parse_Prim_char nodes with
                                                                | Some _ as res -> res
                                                                | None ->
                                                                    match _parse_Prim_chai_str nodes with
                                                                    | Some _ as res -> res
                                                                    | None ->
                                                                        match _parse_Prim_regex nodes with
                                                                        | Some _ as res -> res
                                                                        | None ->
                                                                            match _parse_Prim_lamb nodes with
                                                                            | Some _ as res -> res
                                                                            | None ->
                                                                                match _parse_Prim_meth nodes with
                                                                                | Some _ as res -> res
                                                                                | None ->
                                                                                    match _parse_Prim_sing_meth nodes with
                                                                                    | Some _ as res -> res
                                                                                    | None ->
                                                                                        match _parse_Prim_class nodes with
                                                                                        | Some _ as res -> res
                                                                                        | None ->
                                                                                            match _parse_Prim_sing_class nodes with
                                                                                            | Some _ as res -> res
                                                                                            | None ->
                                                                                                match _parse_Prim_modu nodes with
                                                                                                | Some _ as res -> res
                                                                                                | None ->
                                                                                                    match _parse_Prim_begin nodes with
                                                                                                    | Some _ as res -> res
                                                                                                    | None ->
                                                                                                        match _parse_Prim_while nodes with
                                                                                                        | Some _ as res -> res
                                                                                                        | None ->
                                                                                                            match _parse_Prim_until nodes with
                                                                                                            | Some _ as res -> res
                                                                                                            | None ->
                                                                                                                match _parse_Prim_if nodes with
                                                                                                                | Some _ as res -> res
                                                                                                                | None ->
                                                                                                                    match _parse_Prim_unle nodes with
                                                                                                                    | Some _ as res -> res
                                                                                                                    | None ->
                                                                                                                        match _parse_Prim_for nodes with
                                                                                                                        | Some _ as res -> res
                                                                                                                        | None ->
                                                                                                                            match _parse_Prim_case nodes with
                                                                                                                            | Some _ as res -> res
                                                                                                                            | None ->
                                                                                                                                match _parse_Prim_ret nodes with
                                                                                                                                | Some _ as res -> res
                                                                                                                                | None ->
                                                                                                                                    match _parse_Prim_yield nodes with
                                                                                                                                    | Some _ as res -> res
                                                                                                                                    | None ->
                                                                                                                                        match _parse_Prim_brk nodes with
                                                                                                                                        | Some _ as res -> res
                                                                                                                                        | None ->
                                                                                                                                            match _parse_Prim_next nodes with
                                                                                                                                            | Some _ as res -> res
                                                                                                                                            | None ->
                                                                                                                                                match _parse_Prim_redo nodes with
                                                                                                                                                | Some _ as res -> res
                                                                                                                                                | None ->
                                                                                                                                                    match _parse_Prim_retry nodes with
                                                                                                                                                    | Some _ as res -> res
                                                                                                                                                    | None ->
                                                                                                                                                        match _parse_Prim_paren_un nodes with
                                                                                                                                                        | Some _ as res -> res
                                                                                                                                                        | None ->
                                                                                                                                                            match _parse_Prim_un_lit nodes with
                                                                                                                                                            | Some _ as res -> res
                                                                                                                                                            | None ->
                                                                                                                                                                _parse_Prim_here_begin nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_primary : CST.primary Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_primary nodes
    )
  and parse_node_primary : CST.primary Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_primary (
        Combine.parse_rule "primary" parse_children_primary
      ) nodes
    )
  and parse_inline_parenthesized_statements _parse_tail : (CST.parenthesized_statements * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_optional
                    (parse_node_statements)
                    (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_parenthesized_statements : CST.parenthesized_statements Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_parenthesized_statements nodes
    )
  and parse_node_parenthesized_statements : CST.parenthesized_statements Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_parenthesized_statements (
        Combine.parse_rule "parenthesized_statements" parse_children_parenthesized_statements
      ) nodes
    )
  and parse_inline_element_reference _parse_tail : (CST.element_reference * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_primary)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "[")
                    (
                      Combine.parse_optional
                        (parse_node_argument_list_with_trailing_comma)
                        (Combine.parse_seq(_parse_leaf_rule "]")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_element_reference : CST.element_reference Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_element_reference nodes
    )
  and parse_node_element_reference : CST.element_reference Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_element_reference (
        Combine.parse_rule "element_reference" parse_children_element_reference
      ) nodes
    )
  and parse_inline_scope_resolution _parse_tail : (CST.scope_resolution * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              (fun nodes ->
                let _parse_tail =
                  _parse_tail
                in
                let _parse_Id nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (parse_node_identifier)
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`Id (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                let _parse_Cst nodes =
                  (
                    match
                      (
                        Combine.parse_seq
                          (parse_node_constant)
                          (_parse_tail)
                      ) nodes
                    with
                    | Some ((e0, tail), nodes) ->
                        Some ((`Cst (e0), tail), nodes)
                    | None ->
                        None
                  )
                in
                match _parse_Id nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Cst nodes
              )
            in
            let _parse_COLONCOLON nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "::")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`COLONCOLON (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Prim_COLONCOLON nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_primary)
                      (Combine.parse_seq(_parse_leaf_rule "::")(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Prim_COLONCOLON (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_COLONCOLON nodes with
            | Some _ as res -> res
            | None ->
                _parse_Prim_COLONCOLON nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_scope_resolution : CST.scope_resolution Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_scope_resolution nodes
    )
  and parse_node_scope_resolution : CST.scope_resolution Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_scope_resolution (
        Combine.parse_rule "scope_resolution" parse_children_scope_resolution
      ) nodes
    )
  and parse_inline_call _parse_tail : (CST.call * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_primary)
                (
                  (fun nodes ->
                    let _parse_tail =
                      (fun nodes ->
                        let _parse_tail =
                          _parse_tail
                        in
                        let _parse_Id nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_identifier)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Id (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Op nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_operator)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Op (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Cst nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_constant)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Cst (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Arg_list nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_argument_list)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Arg_list (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Id nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Op nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Cst nodes with
                                | Some _ as res -> res
                                | None ->
                                    _parse_Arg_list nodes
                      )
                    in
                    let _parse_DOT nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule ".")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`DOT (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_AMPDOT nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "&.")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`AMPDOT (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_DOT nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_AMPDOT nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_call : CST.call Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_call nodes
    )
  and parse_node_call : CST.call Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_call (
        Combine.parse_rule "call" parse_children_call
      ) nodes
    )
  and parse_inline_command_call _parse_tail : (CST.command_call * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Cmd_call_choice_var_cmd_arg_list nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_command_argument_list)
                      (_parse_tail)
                  in
                  let _parse_Var nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_variable)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Var (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Scope_resol nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_scope_resolution)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Scope_resol (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Call nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_call)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Call (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Var nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Scope_resol nodes with
                      | Some _ as res -> res
                      | None ->
                          _parse_Call nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Cmd_call_choice_var_cmd_arg_list (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Cmd_call_choice_var_cmd_arg_list_blk nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_command_argument_list)
                      (Combine.parse_seq(parse_node_block)(_parse_tail))
                  in
                  let _parse_Var nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_variable)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Var (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Scope_resol nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_scope_resolution)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Scope_resol (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Call nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_call)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Call (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Var nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Scope_resol nodes with
                      | Some _ as res -> res
                      | None ->
                          _parse_Call nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Cmd_call_choice_var_cmd_arg_list_blk (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Cmd_call_choice_var_cmd_arg_list_do_blk nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_command_argument_list)
                      (Combine.parse_seq(parse_node_do_block)(_parse_tail))
                  in
                  let _parse_Var nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_variable)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Var (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Scope_resol nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_scope_resolution)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Scope_resol (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Call nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_call)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Call (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Var nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Scope_resol nodes with
                      | Some _ as res -> res
                      | None ->
                          _parse_Call nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Cmd_call_choice_var_cmd_arg_list_do_blk (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Cmd_call_choice_var_cmd_arg_list nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Cmd_call_choice_var_cmd_arg_list_blk nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Cmd_call_choice_var_cmd_arg_list_do_blk nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_command_call : CST.command_call Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_command_call nodes
    )
  and parse_node_command_call : CST.command_call Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_command_call (
        Combine.parse_rule "command_call" parse_children_command_call
      ) nodes
    )
  and parse_inline_method_call _parse_tail : (CST.method_call * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Meth_call_choice_var_arg_list nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_argument_list)
                      (_parse_tail)
                  in
                  let _parse_Var nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_variable)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Var (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Scope_resol nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_scope_resolution)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Scope_resol (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Call nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_call)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Call (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Var nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Scope_resol nodes with
                      | Some _ as res -> res
                      | None ->
                          _parse_Call nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Meth_call_choice_var_arg_list (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_call_choice_var_arg_list_blk nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_argument_list)
                      (Combine.parse_seq(parse_node_block)(_parse_tail))
                  in
                  let _parse_Var nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_variable)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Var (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Scope_resol nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_scope_resolution)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Scope_resol (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Call nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_call)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Call (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Var nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Scope_resol nodes with
                      | Some _ as res -> res
                      | None ->
                          _parse_Call nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Meth_call_choice_var_arg_list_blk (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_call_choice_var_arg_list_do_blk nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_argument_list)
                      (Combine.parse_seq(parse_node_do_block)(_parse_tail))
                  in
                  let _parse_Var nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_variable)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Var (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Scope_resol nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_scope_resolution)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Scope_resol (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Call nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_call)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Call (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Var nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Scope_resol nodes with
                      | Some _ as res -> res
                      | None ->
                          _parse_Call nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Meth_call_choice_var_arg_list_do_blk (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_call_choice_var_blk nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_block)
                      (_parse_tail)
                  in
                  let _parse_Var nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_variable)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Var (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Scope_resol nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_scope_resolution)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Scope_resol (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Call nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_call)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Call (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Var nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Scope_resol nodes with
                      | Some _ as res -> res
                      | None ->
                          _parse_Call nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Meth_call_choice_var_blk (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_call_choice_var_do_blk nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_do_block)
                      (_parse_tail)
                  in
                  let _parse_Var nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_variable)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Var (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Scope_resol nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_scope_resolution)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Scope_resol (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Call nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_call)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Call (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Var nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Scope_resol nodes with
                      | Some _ as res -> res
                      | None ->
                          _parse_Call nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Meth_call_choice_var_do_blk (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Meth_call_choice_var_arg_list nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Meth_call_choice_var_arg_list_blk nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Meth_call_choice_var_arg_list_do_blk nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Meth_call_choice_var_blk nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Meth_call_choice_var_do_blk nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_call : CST.method_call Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_call nodes
    )
  and parse_node_method_call : CST.method_call Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_call (
        Combine.parse_rule "method_call" parse_children_method_call
      ) nodes
    )
  and parse_inline_command_argument_list _parse_tail : (CST.command_argument_list * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Cmd_arg_list_arg_rep_COMMA_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_argument)
                      (
                        Combine.parse_repeat
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule ",")
                              (parse_node_argument)
                          )
                          (_parse_tail)
                      )
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Cmd_arg_list_arg_rep_COMMA_arg (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Cmd_arg_list_cmd_call nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_command_call)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Cmd_arg_list_cmd_call (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Cmd_arg_list_arg_rep_COMMA_arg nodes with
            | Some _ as res -> res
            | None ->
                _parse_Cmd_arg_list_cmd_call nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_command_argument_list : CST.command_argument_list Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_command_argument_list nodes
    )
  and parse_node_command_argument_list : CST.command_argument_list Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_command_argument_list (
        Combine.parse_rule "command_argument_list" parse_children_command_argument_list
      ) nodes
    )
  and parse_inline_argument_list _parse_tail : (CST.argument_list * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_optional
                    (parse_node_argument_list_with_trailing_comma)
                    (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_argument_list : CST.argument_list Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_argument_list nodes
    )
  and parse_node_argument_list : CST.argument_list Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_argument_list (
        Combine.parse_rule "argument_list" parse_children_argument_list
      ) nodes
    )
  and parse_inline_argument_list_with_trailing_comma _parse_tail : (CST.argument_list_with_trailing_comma * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_argument)
                (
                  Combine.parse_repeat
                    (
                      Combine.parse_seq
                        (_parse_leaf_rule ",")
                        (parse_node_argument)
                    )
                    (Combine.parse_optional(_parse_leaf_rule ",")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_argument_list_with_trailing_comma : CST.argument_list_with_trailing_comma Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_argument_list_with_trailing_comma nodes
    )
  and parse_node_argument_list_with_trailing_comma : CST.argument_list_with_trailing_comma Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_argument_list_with_trailing_comma (
        Combine.parse_rule "argument_list_with_trailing_comma" parse_children_argument_list_with_trailing_comma
      ) nodes
    )
  and parse_inline_argument _parse_tail : (CST.argument * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Arg_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_splat_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_splat_argument)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_splat_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_hash_splat_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_hash_splat_argument)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_hash_splat_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_blk_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_block_argument)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_blk_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Arg_pair nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_pair)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg_pair (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Arg_arg nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Arg_splat_arg nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Arg_hash_splat_arg nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Arg_blk_arg nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Arg_pair nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_argument : CST.argument Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_argument nodes
    )
  and parse_node_argument : CST.argument Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_argument (
        Combine.parse_rule "argument" parse_children_argument
      ) nodes
    )
  and parse_inline_splat_argument _parse_tail : (CST.splat_argument * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_splat_star)
                (Combine.parse_seq(parse_node_arg)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_splat_argument : CST.splat_argument Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_splat_argument nodes
    )
  and parse_node_splat_argument : CST.splat_argument Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_splat_argument (
        Combine.parse_rule "splat_argument" parse_children_splat_argument
      ) nodes
    )
  and parse_inline_hash_splat_argument _parse_tail : (CST.hash_splat_argument * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "**")
                (Combine.parse_seq(parse_node_arg)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_hash_splat_argument : CST.hash_splat_argument Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_hash_splat_argument nodes
    )
  and parse_node_hash_splat_argument : CST.hash_splat_argument Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_hash_splat_argument (
        Combine.parse_rule "hash_splat_argument" parse_children_hash_splat_argument
      ) nodes
    )
  and parse_inline_block_argument _parse_tail : (CST.block_argument * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_block_ampersand)
                (Combine.parse_seq(parse_node_arg)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_block_argument : CST.block_argument Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_block_argument nodes
    )
  and parse_node_block_argument : CST.block_argument Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_block_argument (
        Combine.parse_rule "block_argument" parse_children_block_argument
      ) nodes
    )
  and parse_inline_do_block _parse_tail : (CST.do_block * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "do")
                (
                  Combine.parse_optional
                    (parse_node_terminator)
                    (
                      Combine.parse_optional
                        (
                          (fun nodes ->
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_block_parameters)
                                    (
                                      Combine.parse_optional
                                        (parse_node_terminator)
                                        (Combine.parse_success)
                                    )
                                ) nodes
                              with
                              | Some ((e0, (e1, tail)), nodes) ->
                                  Some ((e0, e1), nodes)
                              | None ->
                                  None
                            )
                          )
                        )
                        (Combine.parse_seq(parse_node_body_statement)(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_do_block : CST.do_block Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_do_block nodes
    )
  and parse_node_do_block : CST.do_block Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_do_block (
        Combine.parse_rule "do_block" parse_children_do_block
      ) nodes
    )
  and parse_inline_block _parse_tail : (CST.block * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_optional
                    (parse_node_block_parameters)
                    (
                      Combine.parse_optional
                        (parse_node_statements)
                        (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, tail)))), nodes) ->
              Some (((e0, e1, e2, e3), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_block : CST.block Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_block nodes
    )
  and parse_node_block : CST.block Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_block (
        Combine.parse_rule "block" parse_children_block
      ) nodes
    )
  and parse_inline_assignment _parse_tail : (CST.assignment * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Choice_lhs_EQ_choice_arg nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (_parse_leaf_rule "=")
                      (
                        (fun nodes ->
                          let _parse_tail =
                            _parse_tail
                          in
                          let _parse_Arg nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_arg)
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`Arg (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_Splat_arg nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_splat_argument)
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`Splat_arg (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_Right_assign_list nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_right_assignment_list)
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`Right_assign_list (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_Arg nodes with
                          | Some _ as res -> res
                          | None ->
                              match _parse_Splat_arg nodes with
                              | Some _ as res -> res
                              | None ->
                                  _parse_Right_assign_list nodes
                        )
                      )
                  in
                  let _parse_Lhs nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_lhs)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Lhs (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Left_assign_list nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_left_assignment_list)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Left_assign_list (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Lhs nodes with
                  | Some _ as res -> res
                  | None ->
                      _parse_Left_assign_list nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Choice_lhs_EQ_choice_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            _parse_Choice_lhs_EQ_choice_arg nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_assignment : CST.assignment Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_assignment nodes
    )
  and parse_node_assignment : CST.assignment Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_assignment (
        Combine.parse_rule "assignment" parse_children_assignment
      ) nodes
    )
  and parse_inline_command_assignment _parse_tail : (CST.command_assignment * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Choice_lhs_EQ_exp nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (_parse_leaf_rule "=")
                      (Combine.parse_seq(parse_node_expression)(_parse_tail))
                  in
                  let _parse_Lhs nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_lhs)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Lhs (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Left_assign_list nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_left_assignment_list)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Left_assign_list (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Lhs nodes with
                  | Some _ as res -> res
                  | None ->
                      _parse_Left_assign_list nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Choice_lhs_EQ_exp (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            _parse_Choice_lhs_EQ_exp nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_command_assignment : CST.command_assignment Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_command_assignment nodes
    )
  and parse_node_command_assignment : CST.command_assignment Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_command_assignment (
        Combine.parse_rule "command_assignment" parse_children_command_assignment
      ) nodes
    )
  and parse_inline_operator_assignment _parse_tail : (CST.operator_assignment * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_lhs)
                (
                  (fun nodes ->
                    let _parse_tail =
                      Combine.parse_seq
                        (parse_node_arg)
                        (_parse_tail)
                    in
                    let _parse_PLUSEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "+=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`PLUSEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_DASHEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "-=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`DASHEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_STAREQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "*=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`STAREQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_STARSTAREQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "**=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`STARSTAREQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_SLASHEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "/=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`SLASHEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_BARBAREQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "||=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`BARBAREQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_BAREQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "|=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`BAREQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_AMPAMPEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "&&=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`AMPAMPEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_AMPEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "&=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`AMPEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_PERCEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "%=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`PERCEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_GTGTEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule ">>=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`GTGTEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_LTLTEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "<<=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`LTLTEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_HATEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "^=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`HATEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_PLUSEQ nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_DASHEQ nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_STAREQ nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_STARSTAREQ nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_SLASHEQ nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_BARBAREQ nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_BAREQ nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_AMPAMPEQ nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_AMPEQ nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        match _parse_PERCEQ nodes with
                                                        | Some _ as res -> res
                                                        | None ->
                                                            match _parse_GTGTEQ nodes with
                                                            | Some _ as res -> res
                                                            | None ->
                                                                match _parse_LTLTEQ nodes with
                                                                | Some _ as res -> res
                                                                | None ->
                                                                    _parse_HATEQ nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_operator_assignment : CST.operator_assignment Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_operator_assignment nodes
    )
  and parse_node_operator_assignment : CST.operator_assignment Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_operator_assignment (
        Combine.parse_rule "operator_assignment" parse_children_operator_assignment
      ) nodes
    )
  and parse_inline_command_operator_assignment _parse_tail : (CST.command_operator_assignment * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_lhs)
                (
                  (fun nodes ->
                    let _parse_tail =
                      Combine.parse_seq
                        (parse_node_expression)
                        (_parse_tail)
                    in
                    let _parse_PLUSEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "+=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`PLUSEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_DASHEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "-=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`DASHEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_STAREQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "*=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`STAREQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_STARSTAREQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "**=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`STARSTAREQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_SLASHEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "/=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`SLASHEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_BARBAREQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "||=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`BARBAREQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_BAREQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "|=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`BAREQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_AMPAMPEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "&&=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`AMPAMPEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_AMPEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "&=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`AMPEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_PERCEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "%=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`PERCEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_GTGTEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule ">>=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`GTGTEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_LTLTEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "<<=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`LTLTEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_HATEQ nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "^=")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`HATEQ (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_PLUSEQ nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_DASHEQ nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_STAREQ nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_STARSTAREQ nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_SLASHEQ nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_BARBAREQ nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_BAREQ nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_AMPAMPEQ nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_AMPEQ nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        match _parse_PERCEQ nodes with
                                                        | Some _ as res -> res
                                                        | None ->
                                                            match _parse_GTGTEQ nodes with
                                                            | Some _ as res -> res
                                                            | None ->
                                                                match _parse_LTLTEQ nodes with
                                                                | Some _ as res -> res
                                                                | None ->
                                                                    _parse_HATEQ nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_command_operator_assignment : CST.command_operator_assignment Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_command_operator_assignment nodes
    )
  and parse_node_command_operator_assignment : CST.command_operator_assignment Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_command_operator_assignment (
        Combine.parse_rule "command_operator_assignment" parse_children_command_operator_assignment
      ) nodes
    )
  and parse_inline_conditional _parse_tail : (CST.conditional * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_arg)
                (
                  Combine.parse_seq
                    (_parse_leaf_rule "?")
                    (
                      Combine.parse_seq
                        (parse_node_arg)
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ":")
                            (Combine.parse_seq(parse_node_arg)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_conditional : CST.conditional Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_conditional nodes
    )
  and parse_node_conditional : CST.conditional Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_conditional (
        Combine.parse_rule "conditional" parse_children_conditional
      ) nodes
    )
  and parse_inline_range _parse_tail : (CST.range * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_arg)
                (
                  (fun nodes ->
                    let _parse_tail =
                      Combine.parse_seq
                        (parse_node_arg)
                        (_parse_tail)
                    in
                    let _parse_DOTDOT nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "..")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`DOTDOT (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_DOTDOTDOT nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "...")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`DOTDOTDOT (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_DOTDOT nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_DOTDOTDOT nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_range : CST.range Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_range nodes
    )
  and parse_node_range : CST.range Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_range (
        Combine.parse_rule "range" parse_children_range
      ) nodes
    )
  and parse_inline_binary _parse_tail : (CST.binary * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Bin_arg_and_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "and")
                          (Combine.parse_seq(parse_node_arg)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_and_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_or_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "or")
                          (Combine.parse_seq(parse_node_arg)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_or_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_BARBAR_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "||")
                          (Combine.parse_seq(parse_node_arg)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_BARBAR_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_AMPAMP_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "&&")
                          (Combine.parse_seq(parse_node_arg)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_AMPAMP_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_choice_LTLT_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        (fun nodes ->
                          let _parse_tail =
                            Combine.parse_seq
                              (parse_node_arg)
                              (_parse_tail)
                          in
                          let _parse_LTLT nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "<<")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`LTLT (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_GTGT nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule ">>")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`GTGT (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_LTLT nodes with
                          | Some _ as res -> res
                          | None ->
                              _parse_GTGT nodes
                        )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_choice_LTLT_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_choice_LT_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        (fun nodes ->
                          let _parse_tail =
                            Combine.parse_seq
                              (parse_node_arg)
                              (_parse_tail)
                          in
                          let _parse_LT nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "<")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`LT (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_LTEQ nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "<=")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`LTEQ (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_GT nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule ">")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`GT (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_GTEQ nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule ">=")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`GTEQ (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_LT nodes with
                          | Some _ as res -> res
                          | None ->
                              match _parse_LTEQ nodes with
                              | Some _ as res -> res
                              | None ->
                                  match _parse_GT nodes with
                                  | Some _ as res -> res
                                  | None ->
                                      _parse_GTEQ nodes
                        )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_choice_LT_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_AMP_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "&")
                          (Combine.parse_seq(parse_node_arg)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_AMP_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_choice_HAT_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        (fun nodes ->
                          let _parse_tail =
                            Combine.parse_seq
                              (parse_node_arg)
                              (_parse_tail)
                          in
                          let _parse_HAT nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "^")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`HAT (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_BAR nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "|")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`BAR (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_HAT nodes with
                          | Some _ as res -> res
                          | None ->
                              _parse_BAR nodes
                        )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_choice_HAT_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_choice_PLUS_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        (fun nodes ->
                          let _parse_tail =
                            Combine.parse_seq
                              (parse_node_arg)
                              (_parse_tail)
                          in
                          let _parse_PLUS nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "+")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`PLUS (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_Bin_minus nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_binary_minus)
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`Bin_minus (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_PLUS nodes with
                          | Some _ as res -> res
                          | None ->
                              _parse_Bin_minus nodes
                        )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_choice_PLUS_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_choice_SLASH_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        (fun nodes ->
                          let _parse_tail =
                            Combine.parse_seq
                              (parse_node_arg)
                              (_parse_tail)
                          in
                          let _parse_SLASH nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "/")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`SLASH (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_PERC nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "%")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`PERC (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_Bin_star nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_binary_star)
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`Bin_star (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_SLASH nodes with
                          | Some _ as res -> res
                          | None ->
                              match _parse_PERC nodes with
                              | Some _ as res -> res
                              | None ->
                                  _parse_Bin_star nodes
                        )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_choice_SLASH_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_choice_EQEQ_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        (fun nodes ->
                          let _parse_tail =
                            Combine.parse_seq
                              (parse_node_arg)
                              (_parse_tail)
                          in
                          let _parse_EQEQ nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "==")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`EQEQ (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_BANGEQ nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "!=")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`BANGEQ (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_EQEQEQ nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "===")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`EQEQEQ (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_LTEQGT nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "<=>")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`LTEQGT (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_EQTILDE nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "=~")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`EQTILDE (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          let _parse_BANGTILDE nodes =
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule "!~")
                                    (_parse_tail)
                                ) nodes
                              with
                              | Some ((e0, tail), nodes) ->
                                  Some ((`BANGTILDE (e0), tail), nodes)
                              | None ->
                                  None
                            )
                          in
                          match _parse_EQEQ nodes with
                          | Some _ as res -> res
                          | None ->
                              match _parse_BANGEQ nodes with
                              | Some _ as res -> res
                              | None ->
                                  match _parse_EQEQEQ nodes with
                                  | Some _ as res -> res
                                  | None ->
                                      match _parse_LTEQGT nodes with
                                      | Some _ as res -> res
                                      | None ->
                                          match _parse_EQTILDE nodes with
                                          | Some _ as res -> res
                                          | None ->
                                              _parse_BANGTILDE nodes
                        )
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_choice_EQEQ_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Bin_arg_STARSTAR_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "**")
                          (Combine.parse_seq(parse_node_arg)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Bin_arg_STARSTAR_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Bin_arg_and_arg nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Bin_arg_or_arg nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Bin_arg_BARBAR_arg nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Bin_arg_AMPAMP_arg nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Bin_arg_choice_LTLT_arg nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Bin_arg_choice_LT_arg nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Bin_arg_AMP_arg nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        match _parse_Bin_arg_choice_HAT_arg nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            match _parse_Bin_arg_choice_PLUS_arg nodes with
                                            | Some _ as res -> res
                                            | None ->
                                                match _parse_Bin_arg_choice_SLASH_arg nodes with
                                                | Some _ as res -> res
                                                | None ->
                                                    match _parse_Bin_arg_choice_EQEQ_arg nodes with
                                                    | Some _ as res -> res
                                                    | None ->
                                                        _parse_Bin_arg_STARSTAR_arg nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_binary : CST.binary Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_binary nodes
    )
  and parse_node_binary : CST.binary Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_binary (
        Combine.parse_rule "binary" parse_children_binary
      ) nodes
    )
  and parse_inline_command_binary _parse_tail : (CST.command_binary * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_expression)
                (
                  (fun nodes ->
                    let _parse_tail =
                      Combine.parse_seq
                        (parse_node_expression)
                        (_parse_tail)
                    in
                    let _parse_Or nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "or")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`Or (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_And nodes =
                      (
                        match
                          (
                            Combine.parse_seq
                              (_parse_leaf_rule "and")
                              (_parse_tail)
                          ) nodes
                        with
                        | Some ((e0, tail), nodes) ->
                            Some ((`And (e0), tail), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Or nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_And nodes
                  )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_command_binary : CST.command_binary Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_command_binary nodes
    )
  and parse_node_command_binary : CST.command_binary Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_command_binary (
        Combine.parse_rule "command_binary" parse_children_command_binary
      ) nodes
    )
  and parse_inline_unary _parse_tail : (CST.unary * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Un_defi_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "defined?")
                      (Combine.parse_seq(parse_node_arg)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Un_defi_arg (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Un_not_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "not")
                      (Combine.parse_seq(parse_node_arg)(_parse_tail))
                  ) nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Un_not_arg (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Un_choice_un_minus_arg nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_arg)
                      (_parse_tail)
                  in
                  let _parse_Un_minus nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_unary_minus)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Un_minus (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_PLUS nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule "+")
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`PLUS (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Un_minus nodes with
                  | Some _ as res -> res
                  | None ->
                      _parse_PLUS nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Un_choice_un_minus_arg (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Un_choice_BANG_arg nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (parse_node_arg)
                      (_parse_tail)
                  in
                  let _parse_BANG nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule "!")
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`BANG (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_TILDE nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule "~")
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`TILDE (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_BANG nodes with
                  | Some _ as res -> res
                  | None ->
                      _parse_TILDE nodes
                with
                | Some ((e0, (e1, tail)), nodes) ->
                    Some ((`Un_choice_BANG_arg (e0, e1), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Un_defi_arg nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Un_not_arg nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Un_choice_un_minus_arg nodes with
                    | Some _ as res -> res
                    | None ->
                        _parse_Un_choice_BANG_arg nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_unary : CST.unary Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_unary nodes
    )
  and parse_node_unary : CST.unary Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_unary (
        Combine.parse_rule "unary" parse_children_unary
      ) nodes
    )
  and parse_inline_parenthesized_unary _parse_tail : (CST.parenthesized_unary * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_seq
                (parse_node_parenthesized_statements)
                (_parse_tail)
            in
            let _parse_Defi nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "defined?")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Defi (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Not nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (_parse_leaf_rule "not")
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Not (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Defi nodes with
            | Some _ as res -> res
            | None ->
                _parse_Not nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_parenthesized_unary : CST.parenthesized_unary Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_parenthesized_unary nodes
    )
  and parse_node_parenthesized_unary : CST.parenthesized_unary Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_parenthesized_unary (
        Combine.parse_rule "parenthesized_unary" parse_children_parenthesized_unary
      ) nodes
    )
  and parse_inline_right_assignment_list _parse_tail : (CST.right_assignment_list * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_repeat
                (
                  Combine.parse_seq
                    (_parse_leaf_rule ",")
                    (
                      (fun nodes ->
                        let _parse_Arg nodes =
                          (
                            match
                              (
                                parse_node_arg
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Arg (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Splat_arg nodes =
                          (
                            match
                              (
                                parse_node_splat_argument
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Splat_arg (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Arg nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Splat_arg nodes
                      )
                    )
                )
                (_parse_tail)
            in
            let _parse_Arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Splat_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_splat_argument)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Splat_arg (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Arg nodes with
            | Some _ as res -> res
            | None ->
                _parse_Splat_arg nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_right_assignment_list : CST.right_assignment_list Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_right_assignment_list nodes
    )
  and parse_node_right_assignment_list : CST.right_assignment_list Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_right_assignment_list (
        Combine.parse_rule "right_assignment_list" parse_children_right_assignment_list
      ) nodes
    )
  and parse_inline_left_assignment_list _parse_tail : (CST.left_assignment_list * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_mlhs)
                (_parse_tail)
            ) nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_left_assignment_list : CST.left_assignment_list Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_left_assignment_list nodes
    )
  and parse_node_left_assignment_list : CST.left_assignment_list Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_left_assignment_list (
        Combine.parse_rule "left_assignment_list" parse_children_left_assignment_list
      ) nodes
    )
  and parse_inline_mlhs _parse_tail : (CST.mlhs * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              Combine.parse_repeat
                (
                  Combine.parse_seq
                    (_parse_leaf_rule ",")
                    (
                      (fun nodes ->
                        let _parse_Lhs nodes =
                          (
                            match
                              (
                                parse_node_lhs
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Lhs (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Rest_assign nodes =
                          (
                            match
                              (
                                parse_node_rest_assignment
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Rest_assign (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Dest_left_assign nodes =
                          (
                            match
                              (
                                parse_node_destructured_left_assignment
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Dest_left_assign (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Lhs nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Rest_assign nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_Dest_left_assign nodes
                      )
                    )
                )
                (Combine.parse_optional(_parse_leaf_rule ",")(_parse_tail))
            in
            let _parse_Lhs nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_lhs)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Lhs (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Rest_assign nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_rest_assignment)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Rest_assign (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Dest_left_assign nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_destructured_left_assignment)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Dest_left_assign (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Lhs nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Rest_assign nodes with
                | Some _ as res -> res
                | None ->
                    _parse_Dest_left_assign nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_mlhs : CST.mlhs Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_mlhs nodes
    )
  and parse_node_mlhs : CST.mlhs Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_mlhs (
        Combine.parse_rule "mlhs" parse_children_mlhs
      ) nodes
    )
  and parse_inline_destructured_left_assignment _parse_tail : (CST.destructured_left_assignment * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "(")
                (
                  Combine.parse_seq
                    (parse_node_mlhs)
                    (Combine.parse_seq(_parse_leaf_rule ")")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_destructured_left_assignment : CST.destructured_left_assignment Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_destructured_left_assignment nodes
    )
  and parse_node_destructured_left_assignment : CST.destructured_left_assignment Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_destructured_left_assignment (
        Combine.parse_rule "destructured_left_assignment" parse_children_destructured_left_assignment
      ) nodes
    )
  and parse_inline_rest_assignment _parse_tail : (CST.rest_assignment * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "*")
                (Combine.parse_optional(parse_node_lhs)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_rest_assignment : CST.rest_assignment Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_rest_assignment nodes
    )
  and parse_node_rest_assignment : CST.rest_assignment Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_rest_assignment (
        Combine.parse_rule "rest_assignment" parse_children_rest_assignment
      ) nodes
    )
  and parse_inline_lhs _parse_tail : (CST.lhs * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Var nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_variable)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Var (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_True nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_true_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`True (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_False nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_false_)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`False (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Nil nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_nil)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Nil (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Scope_resol nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_scope_resolution)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Scope_resol (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Elem_ref nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_element_reference)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Elem_ref (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Call nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_call)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Call (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_call nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_method_call)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_call (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Var nodes with
            | Some _ as res -> res
            | None ->
                match _parse_True nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_False nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Nil nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Scope_resol nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Elem_ref nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Call nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        _parse_Meth_call nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_lhs : CST.lhs Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_lhs nodes
    )
  and parse_node_lhs : CST.lhs Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_lhs (
        Combine.parse_rule "lhs" parse_children_lhs
      ) nodes
    )
  and parse_inline_method_name _parse_tail : (CST.method_name * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Meth_name_id nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_identifier)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_name_id (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_name_cst nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_constant)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_name_cst (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_name_sett nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_setter)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_name_sett (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_name_symb nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_symbol)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_name_symb (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_name_op nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_operator)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_name_op (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_name_inst_var nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_instance_variable)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_name_inst_var (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_name_class_var nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_class_variable)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_name_class_var (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Meth_name_glob_var nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_global_variable)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Meth_name_glob_var (e0), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Meth_name_id nodes with
            | Some _ as res -> res
            | None ->
                match _parse_Meth_name_cst nodes with
                | Some _ as res -> res
                | None ->
                    match _parse_Meth_name_sett nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Meth_name_symb nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Meth_name_op nodes with
                            | Some _ as res -> res
                            | None ->
                                match _parse_Meth_name_inst_var nodes with
                                | Some _ as res -> res
                                | None ->
                                    match _parse_Meth_name_class_var nodes with
                                    | Some _ as res -> res
                                    | None ->
                                        _parse_Meth_name_glob_var nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_method_name : CST.method_name Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_method_name nodes
    )
  and parse_node_method_name : CST.method_name Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_method_name (
        Combine.parse_rule "method_name" parse_children_method_name
      ) nodes
    )
  and parse_inline_undef _parse_tail : (CST.undef * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "undef")
                (
                  Combine.parse_seq
                    (parse_node_method_name)
                    (
                      Combine.parse_repeat
                        (
                          Combine.parse_seq
                            (_parse_leaf_rule ",")
                            (parse_node_method_name)
                        )
                        (_parse_tail)
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_undef : CST.undef Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_undef nodes
    )
  and parse_node_undef : CST.undef Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_undef (
        Combine.parse_rule "undef" parse_children_undef
      ) nodes
    )
  and parse_inline_alias _parse_tail : (CST.alias * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "alias")
                (
                  Combine.parse_seq
                    (parse_node_method_name)
                    (Combine.parse_seq(parse_node_method_name)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_alias : CST.alias Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_alias nodes
    )
  and parse_node_alias : CST.alias Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_alias (
        Combine.parse_rule "alias" parse_children_alias
      ) nodes
    )
  and parse_inline_chained_string _parse_tail : (CST.chained_string * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_string_)
                (Combine.parse_repeat1(parse_node_string_)(_parse_tail))
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_chained_string : CST.chained_string Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_chained_string nodes
    )
  and parse_node_chained_string : CST.chained_string Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_chained_string (
        Combine.parse_rule "chained_string" parse_children_chained_string
      ) nodes
    )
  and parse_inline_interpolation _parse_tail : (CST.interpolation * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "#{")
                (
                  Combine.parse_seq
                    (parse_node_statement)
                    (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_interpolation : CST.interpolation Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_interpolation nodes
    )
  and parse_node_interpolation : CST.interpolation Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_interpolation (
        Combine.parse_rule "interpolation" parse_children_interpolation
      ) nodes
    )
  and parse_inline_string_ _parse_tail : (CST.string_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_string_start)
                (
                  Combine.parse_optional
                    (parse_node_literal_contents)
                    (Combine.parse_seq(parse_node_string_end)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_string_ : CST.string_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_string_ nodes
    )
  and parse_node_string_ : CST.string_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_string_ (
        Combine.parse_rule "string" parse_children_string_
      ) nodes
    )
  and parse_inline_subshell _parse_tail : (CST.subshell * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_subshell_start)
                (
                  Combine.parse_optional
                    (parse_node_literal_contents)
                    (Combine.parse_seq(parse_node_string_end)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_subshell : CST.subshell Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_subshell nodes
    )
  and parse_node_subshell : CST.subshell Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_subshell (
        Combine.parse_rule "subshell" parse_children_subshell
      ) nodes
    )
  and parse_inline_string_array _parse_tail : (CST.string_array * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_string_array_start)
                (
                  Combine.parse_optional
                    (Combine.parse_success)
                    (
                      Combine.parse_optional
                        (
                          (fun nodes ->
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_literal_contents)
                                    (
                                      Combine.parse_repeat
                                        (
                                          Combine.parse_seq
                                            (Combine.parse_success)
                                            (parse_node_literal_contents)
                                        )
                                        (Combine.parse_success)
                                    )
                                ) nodes
                              with
                              | Some ((e0, (e1, tail)), nodes) ->
                                  Some ((e0, e1), nodes)
                              | None ->
                                  None
                            )
                          )
                        )
                        (
                          Combine.parse_optional
                            (Combine.parse_success)
                            (Combine.parse_seq(parse_node_string_end)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_string_array : CST.string_array Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_string_array nodes
    )
  and parse_node_string_array : CST.string_array Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_string_array (
        Combine.parse_rule "string_array" parse_children_string_array
      ) nodes
    )
  and parse_inline_symbol_array _parse_tail : (CST.symbol_array * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_symbol_array_start)
                (
                  Combine.parse_optional
                    (Combine.parse_success)
                    (
                      Combine.parse_optional
                        (
                          (fun nodes ->
                            (
                              match
                                (
                                  Combine.parse_seq
                                    (parse_node_literal_contents)
                                    (
                                      Combine.parse_repeat
                                        (
                                          Combine.parse_seq
                                            (Combine.parse_success)
                                            (parse_node_literal_contents)
                                        )
                                        (Combine.parse_success)
                                    )
                                ) nodes
                              with
                              | Some ((e0, (e1, tail)), nodes) ->
                                  Some ((e0, e1), nodes)
                              | None ->
                                  None
                            )
                          )
                        )
                        (
                          Combine.parse_optional
                            (Combine.parse_success)
                            (Combine.parse_seq(parse_node_string_end)(_parse_tail))
                        )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, (e3, (e4, tail))))), nodes) ->
              Some (((e0, e1, e2, e3, e4), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_symbol_array : CST.symbol_array Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_symbol_array nodes
    )
  and parse_node_symbol_array : CST.symbol_array Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_symbol_array (
        Combine.parse_rule "symbol_array" parse_children_symbol_array
      ) nodes
    )
  and parse_inline_symbol _parse_tail : (CST.symbol * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Symb_simple_symb nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_simple_symbol)
                      (_parse_tail)
                  ) nodes
                with
                | Some ((e0, tail), nodes) ->
                    Some ((`Symb_simple_symb (e0), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Symb_symb_start_opt_lit_content_str_end nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_symbol_start)
                      (
                        Combine.parse_optional
                          (parse_node_literal_contents)
                          (Combine.parse_seq(parse_node_string_end)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Symb_symb_start_opt_lit_content_str_end (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Symb_simple_symb nodes with
            | Some _ as res -> res
            | None ->
                _parse_Symb_symb_start_opt_lit_content_str_end nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_symbol : CST.symbol Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_symbol nodes
    )
  and parse_node_symbol : CST.symbol Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_symbol (
        Combine.parse_rule "symbol" parse_children_symbol
      ) nodes
    )
  and parse_inline_regex _parse_tail : (CST.regex * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_regex_start)
                (
                  Combine.parse_optional
                    (parse_node_literal_contents)
                    (Combine.parse_seq(parse_node_string_end)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_regex : CST.regex Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_regex nodes
    )
  and parse_node_regex : CST.regex Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_regex (
        Combine.parse_rule "regex" parse_children_regex
      ) nodes
    )
  and parse_inline_literal_contents _parse_tail : (CST.literal_contents * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_repeat1
                (
                  (fun nodes ->
                    let _parse_Str_content nodes =
                      (
                        match
                          (
                            parse_node_string_content
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Str_content (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Interp nodes =
                      (
                        match
                          (
                            parse_node_interpolation
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Interp (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    let _parse_Esc_seq nodes =
                      (
                        match
                          (
                            parse_node_escape_sequence
                          ) nodes
                        with
                        | Some (e0, nodes) ->
                            Some (`Esc_seq (e0), nodes)
                        | None ->
                            None
                      )
                    in
                    match _parse_Str_content nodes with
                    | Some _ as res -> res
                    | None ->
                        match _parse_Interp nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Esc_seq nodes
                  )
                )
                (_parse_tail)
            ) nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_literal_contents : CST.literal_contents Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_literal_contents nodes
    )
  and parse_node_literal_contents : CST.literal_contents Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_literal_contents (
        Combine.parse_rule "literal_contents" parse_children_literal_contents
      ) nodes
    )
  and parse_inline_array_ _parse_tail : (CST.array_ * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "[")
                (
                  Combine.parse_optional
                    (parse_node_argument_list_with_trailing_comma)
                    (Combine.parse_seq(_parse_leaf_rule "]")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_array_ : CST.array_ Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_array_ nodes
    )
  and parse_node_array_ : CST.array_ Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_array_ (
        Combine.parse_rule "array" parse_children_array_
      ) nodes
    )
  and parse_inline_hash _parse_tail : (CST.hash * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "{")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            let _parse_tail =
                              Combine.parse_repeat
                                (
                                  Combine.parse_seq
                                    (_parse_leaf_rule ",")
                                    (
                                      (fun nodes ->
                                        let _parse_Pair nodes =
                                          (
                                            match
                                              (
                                                parse_node_pair
                                              ) nodes
                                            with
                                            | Some (e0, nodes) ->
                                                Some (`Pair (e0), nodes)
                                            | None ->
                                                None
                                          )
                                        in
                                        let _parse_Hash_splat_arg nodes =
                                          (
                                            match
                                              (
                                                parse_node_hash_splat_argument
                                              ) nodes
                                            with
                                            | Some (e0, nodes) ->
                                                Some (`Hash_splat_arg (e0), nodes)
                                            | None ->
                                                None
                                          )
                                        in
                                        match _parse_Pair nodes with
                                        | Some _ as res -> res
                                        | None ->
                                            _parse_Hash_splat_arg nodes
                                      )
                                    )
                                )
                                (
                                  Combine.parse_optional
                                    (_parse_leaf_rule ",")
                                    (Combine.parse_success)
                                )
                            in
                            let _parse_Pair nodes =
                              (
                                match
                                  (
                                    Combine.parse_seq
                                      (parse_node_pair)
                                      (_parse_tail)
                                  ) nodes
                                with
                                | Some ((e0, tail), nodes) ->
                                    Some ((`Pair (e0), tail), nodes)
                                | None ->
                                    None
                              )
                            in
                            let _parse_Hash_splat_arg nodes =
                              (
                                match
                                  (
                                    Combine.parse_seq
                                      (parse_node_hash_splat_argument)
                                      (_parse_tail)
                                  ) nodes
                                with
                                | Some ((e0, tail), nodes) ->
                                    Some ((`Hash_splat_arg (e0), tail), nodes)
                                | None ->
                                    None
                              )
                            in
                            match _parse_Pair nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_Hash_splat_arg nodes
                          with
                          | Some ((e0, (e1, (e2, tail))), nodes) ->
                              Some ((e0, e1, e2), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (Combine.parse_seq(_parse_leaf_rule "}")(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_hash : CST.hash Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_hash nodes
    )
  and parse_node_hash : CST.hash Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_hash (
        Combine.parse_rule "hash" parse_children_hash
      ) nodes
    )
  and parse_inline_pair _parse_tail : (CST.pair * _) Combine.reader =
      (fun nodes ->
        (
          match
            let _parse_tail =
              _parse_tail
            in
            let _parse_Pair_arg_EQGT_arg nodes =
              (
                match
                  (
                    Combine.parse_seq
                      (parse_node_arg)
                      (
                        Combine.parse_seq
                          (_parse_leaf_rule "=>")
                          (Combine.parse_seq(parse_node_arg)(_parse_tail))
                      )
                  ) nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Pair_arg_EQGT_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            let _parse_Pair_choice_id_hash_key_COLON_arg nodes =
              (
                match
                  let _parse_tail =
                    Combine.parse_seq
                      (_parse_leaf_rule ":")
                      (Combine.parse_seq(parse_node_arg)(_parse_tail))
                  in
                  let _parse_Id_hash_key nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_identifier_hash_key)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Id_hash_key (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Id nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_identifier)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Id (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Cst nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_constant)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Cst (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  let _parse_Str nodes =
                    (
                      match
                        (
                          Combine.parse_seq
                            (parse_node_string_)
                            (_parse_tail)
                        ) nodes
                      with
                      | Some ((e0, tail), nodes) ->
                          Some ((`Str (e0), tail), nodes)
                      | None ->
                          None
                    )
                  in
                  match _parse_Id_hash_key nodes with
                  | Some _ as res -> res
                  | None ->
                      match _parse_Id nodes with
                      | Some _ as res -> res
                      | None ->
                          match _parse_Cst nodes with
                          | Some _ as res -> res
                          | None ->
                              _parse_Str nodes
                with
                | Some ((e0, (e1, (e2, tail))), nodes) ->
                    Some ((`Pair_choice_id_hash_key_COLON_arg (e0, e1, e2), tail), nodes)
                | None ->
                    None
              )
            in
            match _parse_Pair_arg_EQGT_arg nodes with
            | Some _ as res -> res
            | None ->
                _parse_Pair_choice_id_hash_key_COLON_arg nodes
          with
          | Some ((e0, tail), nodes) ->
              Some (((e0), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_pair : CST.pair Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_pair nodes
    )
  and parse_node_pair : CST.pair Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_pair (
        Combine.parse_rule "pair" parse_children_pair
      ) nodes
    )
  and parse_inline_lambda _parse_tail : (CST.lambda * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (_parse_leaf_rule "->")
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        let _parse_Params nodes =
                          (
                            match
                              (
                                parse_node_parameters
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Params (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Bare_params nodes =
                          (
                            match
                              (
                                parse_node_bare_parameters
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Bare_params (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Params nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Bare_params nodes
                      )
                    )
                    (
                      (fun nodes ->
                        let _parse_tail =
                          _parse_tail
                        in
                        let _parse_Blk nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_block)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Blk (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Do_blk nodes =
                          (
                            match
                              (
                                Combine.parse_seq
                                  (parse_node_do_block)
                                  (_parse_tail)
                              ) nodes
                            with
                            | Some ((e0, tail), nodes) ->
                                Some ((`Do_blk (e0), tail), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Blk nodes with
                        | Some _ as res -> res
                        | None ->
                            _parse_Do_blk nodes
                      )
                    )
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  and parse_children_lambda : CST.lambda Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_lambda nodes
    )
  and parse_node_lambda : CST.lambda Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_lambda (
        Combine.parse_rule "lambda" parse_children_lambda
      ) nodes
    )
  in
  let cache_program : CST.program Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_program _parse_tail : (CST.program * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_optional
                (parse_node_statements)
                (
                  Combine.parse_optional
                    (
                      (fun nodes ->
                        (
                          match
                            (
                              Combine.parse_seq
                                (_parse_leaf_rule "__END__")
                                (
                                  Combine.parse_seq
                                    (parse_node_line_break)
                                    (parse_node_uninterpreted)
                                )
                            ) nodes
                          with
                          | Some ((e0, (e1, e2)), nodes) ->
                              Some ((e0, e1, e2), nodes)
                          | None ->
                              None
                        )
                      )
                    )
                    (_parse_tail)
                )
            ) nodes
          with
          | Some ((e0, (e1, tail)), nodes) ->
              Some (((e0, e1), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_program : CST.program Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_program nodes
    )
  in
  let parse_node_program : CST.program Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_program (
        Combine.parse_rule "program" parse_children_program
      ) nodes
    )
  in
  let cache_heredoc_body : CST.heredoc_body Combine.Memoize.t =
    Combine.Memoize.create () in
  let parse_inline_heredoc_body _parse_tail : (CST.heredoc_body * _) Combine.reader =
      (fun nodes ->
        (
          match
            (
              Combine.parse_seq
                (parse_node_heredoc_body_start)
                (
                  Combine.parse_repeat
                    (
                      (fun nodes ->
                        let _parse_Here_content nodes =
                          (
                            match
                              (
                                parse_node_heredoc_content
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Here_content (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Interp nodes =
                          (
                            match
                              (
                                parse_node_interpolation
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Interp (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        let _parse_Esc_seq nodes =
                          (
                            match
                              (
                                parse_node_escape_sequence
                              ) nodes
                            with
                            | Some (e0, nodes) ->
                                Some (`Esc_seq (e0), nodes)
                            | None ->
                                None
                          )
                        in
                        match _parse_Here_content nodes with
                        | Some _ as res -> res
                        | None ->
                            match _parse_Interp nodes with
                            | Some _ as res -> res
                            | None ->
                                _parse_Esc_seq nodes
                      )
                    )
                    (Combine.parse_seq(parse_node_heredoc_end)(_parse_tail))
                )
            ) nodes
          with
          | Some ((e0, (e1, (e2, tail))), nodes) ->
              Some (((e0, e1, e2), tail), nodes)
          | None ->
              None
        )
      )
  in
  let parse_children_heredoc_body : CST.heredoc_body Combine.full_seq_reader =
    (fun nodes ->
      Combine.parse_full_seq parse_inline_heredoc_body nodes
    )
  in
  let parse_node_heredoc_body : CST.heredoc_body Combine.reader =
    (fun nodes ->
      Combine.Memoize.apply cache_heredoc_body (
        Combine.parse_rule "heredoc_body" parse_children_heredoc_body
      ) nodes
    )
  in
  let result =
    Combine.parse_root ~extras parse_node_program root_node;
  in
  if !debug then (
    Printf.printf "---
";
    flush stdout
  );
  result

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree
